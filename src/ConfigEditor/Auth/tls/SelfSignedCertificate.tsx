import React from 'react';
import { cx } from '@emotion/css';
import { InlineField } from '@grafana/ui';
import { SecretTextArea } from '../common';
import { TLSSettingsSection } from './TLSSettingsSection';
import { useCommonStyles } from '../styles';

export type Props = {
  enabled: boolean;
  onToggle: (enabled: boolean) => void;
  certificateConfigured: boolean;
  onCertificateChange: (certificate: string) => void;
  onCertificateReset: () => void;
  tooltips?: {
    certificateLabel?: string;
  };
  readOnly: boolean;
};

export const SelfSignedCertificate: React.FC<Props> = ({
  enabled,
  certificateConfigured,
  onToggle,
  onCertificateChange,
  onCertificateReset,
  tooltips,
  readOnly,
}) => {
  const commonStyles = useCommonStyles();

  return (
    <TLSSettingsSection
      enabled={enabled}
      label="Add self-signed certificate"
      tooltipText="Add your own Certificate Authority (CA) certificate on top of one generated by the certificate authorities for additional security measures"
      onToggle={(newEnabled) => onToggle(newEnabled)}
      readOnly={readOnly}
    >
      <InlineField
        label="CA Certificate"
        labelWidth={24}
        tooltip={tooltips?.certificateLabel ?? 'Your self-signed certificate'}
        required
        htmlFor="self-signed-certificate-input"
        interactive
        grow
        className={cx(commonStyles.inlineFieldNoMarginRight, commonStyles.inlineFieldWithSecret)}
        disabled={readOnly}
      >
        <SecretTextArea
          id="self-signed-certificate-input"
          isConfigured={certificateConfigured}
          onChange={(e) => onCertificateChange(e.currentTarget.value)}
          onReset={readOnly ? () => {} : onCertificateReset}
          placeholder="Begins with --- BEGIN CERTIFICATE ---"
          rows={6}
          required
        />
      </InlineField>
    </TLSSettingsSection>
  );
};
