{"version":3,"file":"index.js","sources":["../src/llms/openai.ts","../src/sql-editor/types.ts","../src/sql-editor/standardSql/getStatementPosition.ts","../src/sql-editor/utils/toCompletionItem.ts","../src/sql-editor/standardSql/getStandardSuggestions.ts","../src/sql-editor/standardSql/suggestionsKindRegistry.ts","../src/sql-editor/utils/getSuggestionKind.ts","../src/sql-editor/utils/LinkedToken.ts","../src/sql-editor/utils/linkedTokenBuilder.ts","../src/sql-editor/standardSql/language.ts","../src/sql-editor/utils/tokenUtils.ts","../src/sql-editor/utils/commands.ts","../src/sql-editor/standardSql/standardSuggestionsRegistry.ts","../src/sql-editor/standardSql/statementPositionResolversRegistry.ts","../src/sql-editor/utils/debugger.ts","../src/sql-editor/standardSql/macros.ts","../src/sql-editor/standardSql/standardSQLCompletionItemProvider.ts","../src/sql-editor/standardSql/definition.ts","../src/sql-editor/components/SQLEditor.tsx","../src/sql-editor/mocks/queries/singleLineFullQuery.ts","../src/sql-editor/mocks/queries/singleLineFullQueryWithAggregation.ts","../src/sql-editor/mocks/queries/multiLineFullQuery.ts","../src/sql-editor/mocks/queries/multiLineFullQueryWithAggregation.ts","../src/sql-editor/mocks/queries/singleLineEmptyQuery.ts","../src/sql-editor/mocks/queries/singleLineTwoQueries.ts","../src/sql-editor/mocks/queries/singleLineTwoQueriesWithAggregation.ts","../src/sql-editor/mocks/queries/singleLineMultipleColumns.ts","../src/sql-editor/mocks/queries/multiLineMultipleColumns.ts","../src/sql-editor/mocks/Monaco.ts","../src/sql-editor/mocks/TextModel.ts","../src/sql-editor/test-utils/statementPosition.ts","../src/sql-editor/test-utils/index.ts","../src/QueryEditor/AccessoryButton.tsx","../src/QueryEditor/Stack.tsx","../src/QueryEditor/EditorFieldGroup.tsx","../src/QueryEditor/EditorHeader.tsx","../src/QueryEditor/Space.tsx","../src/QueryEditor/EditorField.tsx","../src/QueryEditor/EditorRow.tsx","../src/QueryEditor/EditorList.tsx","../src/QueryEditor/EditorRows.tsx","../src/QueryEditor/EditorSwitch.tsx","../src/QueryEditor/FlexItem.tsx","../src/QueryEditor/InlineSelect.tsx","../src/QueryEditor/InputGroup.tsx","../src/ConfigEditor/DataSourceDescription.tsx","../src/ConfigEditor/ConfigSection/GenericConfigSection.tsx","../src/ConfigEditor/ConfigSection/ConfigSection.tsx","../src/ConfigEditor/ConfigSection/ConfigSubSection.tsx","../src/ConfigEditor/Auth/common/SecretInput.tsx","../src/ConfigEditor/Auth/common/SecretTextarea.tsx","../src/ConfigEditor/Auth/styles.ts","../src/ConfigEditor/Auth/auth-method/BasicAuth.tsx","../src/ConfigEditor/Auth/types.ts","../src/ConfigEditor/Auth/auth-method/AuthMethodSettings.tsx","../src/ConfigEditor/Auth/tls/TLSSettingsSection.tsx","../src/ConfigEditor/Auth/tls/SelfSignedCertificate.tsx","../src/ConfigEditor/Auth/tls/TLSClientAuth.tsx","../src/ConfigEditor/Auth/tls/SkipTLSVerification.tsx","../src/ConfigEditor/Auth/tls/TLSSettings.tsx","../src/ConfigEditor/Auth/custom-headers/CustomHeader.tsx","../src/ConfigEditor/Auth/custom-headers/CustomHeaders.tsx","../src/ConfigEditor/Auth/Auth.tsx","../src/ConfigEditor/Auth/utils.ts","../src/ConfigEditor/Connection/ConnectionSettings.tsx","../src/ConfigEditor/AdvancedSettings/AdvancedHttpSettings.tsx"],"sourcesContent":["/**\n * OpenAI API client.\n *\n * This module contains functions used to make requests to the OpenAI API via\n * the Grafana LLM app plugin. That plugin must be installed, enabled and configured\n * in order for these functions to work.\n *\n * The {@link enabled} function can be used to check if the plugin is enabled and configured.\n */\n\nimport { isLiveChannelMessageEvent, LiveChannelAddress, LiveChannelMessageEvent, LiveChannelScope } from \"@grafana/data\";\nimport { getBackendSrv, getGrafanaLiveSrv, logDebug } from \"@grafana/runtime\";\n\nimport { pipe, Observable, UnaryFunction } from \"rxjs\";\nimport { filter, map, scan, takeWhile } from \"rxjs/operators\";\n\nconst LLM_PLUGIN_ID = 'grafana-llm-app';\nconst LLM_PLUGIN_ROUTE = `/api/plugins/${LLM_PLUGIN_ID}`;\nconst OPENAI_CHAT_COMPLETIONS_PATH = 'openai/v1/chat/completions';\n\n/** The role of a message's author. */\nexport type Role = 'system' | 'user' | 'assistant' | 'function';\n\n/** A message in a conversation. */\nexport interface Message {\n  /** The role of the message's author. */\n  role: Role;\n\n  /** The contents of the message. content is required for all messages, and may be null for assistant messages with function calls. */\n  content: string;\n\n  /**\n   * The name of the author of this message.\n   *\n   * This is required if role is 'function', and it should be the name of the function whose response is in the content.\n   *\n   * May contain a-z, A-Z, 0-9, and underscores, with a maximum length of 64 characters.\n   */\n  name?: string;\n\n  /**\n   * The name and arguments of a function that should be called, as generated by the model.\n   */\n  function_call?: Object;\n}\n\n/** A function the model may generate JSON inputs for. */\nexport interface Function {\n  /**\n   * The name of the function to be called.\n   *\n   * Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.\n   */\n  name: string;\n  /**\n   * A description of what the function does, used by the model to choose when and how to call the function.\n   */\n  description?: string;\n  /*\n   * The parameters the functions accepts, described as a JSON Schema object. See the OpenAI guide for examples, and the JSON Schema reference for documentation about the format.\n   *\n   * To describe a function that accepts no parameters, provide the value {\"type\": \"object\", \"properties\": {}}.\n   */\n  parameters: Object;\n}\n\nexport interface ChatCompletionsRequest {\n  /**\n   * ID of the model to use.\n   *\n   * See the model endpoint compatibility table for details on which models work with the Chat Completions API.\n   */\n  model: string;\n  /** A list of messages comprising the conversation so far. */\n  messages: Message[];\n  /** A list of functions the model may generate JSON inputs for. */\n  functions?: Function[];\n  /**\n   * Controls how the model responds to function calls.\n   *\n   * \"none\" means the model does not call a function, and responds to the end-user.\n   * \"auto\" means the model can pick between an end-user or calling a function.\n   * Specifying a particular function via {\"name\": \"my_function\"} forces the model to call that function.\n   *\n   * \"none\" is the default when no functions are present. \"auto\" is the default if functions are present.\n   */\n  function_call?: 'none' | 'auto' | { name: string };\n  /**\n   * What sampling temperature to use, between 0 and 2.\n   * Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.\n   *\n   * We generally recommend altering this or top_p but not both.\n   */\n  temperature?: number;\n  /**\n   * An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass.\n   * So 0.1 means only the tokens comprising the top 10% probability mass are considered.\n   *\n   * We generally recommend altering this or temperature but not both.\n   */\n  top_p?: number;\n  /**\n   * How many chat completion choices to generate for each input message.\n   */\n  n?: number;\n  /**\n   * Up to 4 sequences where the API will stop generating further tokens.\n   */\n  stop?: string | string[];\n  /**\n   * The maximum number of tokens to generate in the chat completion.\n   *\n   * The total length of input tokens and generated tokens is limited by the model's context length. Example Python code for counting tokens.\n   */\n  max_tokens?: number;\n  /**\n   * Number between -2.0 and 2.0.\n   *\n   * Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.\n   */\n  presence_penalty?: number;\n  /**\n   * Number between -2.0 and 2.0.\n   *\n   * Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.\n   */\n  frequency_penalty?: number;\n  /**\n   * Modify the likelihood of specified tokens appearing in the completion.\n   *\n   * Accepts a json object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100.\n   * Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model,\n   * but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban\n   * or exclusive selection of the relevant token.\n   */\n  logit_bias?: { [key: string]: number };\n  /**\n   * A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse.\n   */\n  user?: string;\n}\n\n/** A completion object from an OpenAI model. */\nexport interface Choice {\n  /** The message object generated by the model. */\n  message: Message;\n  /**\n   * The reason the model stopped generating text.\n   *\n   * This may be one of:\n   *  - stop: API returned complete message, or a message terminated by one of the stop sequences provided via the stop parameter\n   *  - length: incomplete model output due to max_tokens parameter or token limit\n   *  - function_call: the model decided to call a function\n   *  - content_filter: omitted content due to a flag from our content filters\n   *  - null: API response still in progress or incomplete\n   */\n  finish_reason: string;\n  /** The index of the completion in the list of choices. */\n  index: number;\n}\n\n/** The usage statistics for a request to OpenAPI. */\nexport interface Usage {\n  /** The number of tokens in the prompt. */\n  prompt_tokens: number;\n  /** The number of tokens in the completion. */\n  completion_tokens: number;\n  /** The total number of tokens. */\n  total_tokens: number;\n}\n\n/** A response from the OpenAI Chat Completions API. */\nexport interface ChatCompletionsResponse<T = Choice> {\n  /** The ID of the request. */\n  id: string;\n  /** The type of object returned (e.g. 'chat.completion'). */\n  object: string;\n  /** The timestamp of the request, as a UNIX timestamp. */\n  created: number;\n  /** The name of the model used to generate the response. */\n  model: string;\n  /** A list of completion objects (only one, unless `n > 1` in the request). */\n  choices: T[];\n  /** The number of tokens used to generate the replies, counting prompt, completion, and total. */\n  usage: Usage;\n}\n\n/** A content message returned from the model. */\nexport interface ContentMessage {\n  /** The content of the message. */\n  content: string;\n}\n\n/** A message returned from the model indicating that it is done. */\nexport interface DoneMessage {\n  done: boolean;\n}\n\n/** A function call message returned from the model. */\nexport interface FunctionCallMessage {\n  /** The name of the function to call. */\n  name: string;\n  /** The arguments to the function call. */\n  arguments: any[];\n}\n\n/**\n * A delta returned from a stream of chat completion responses.\n *\n * In practice this will be either a content message or a function call;\n * done messages are filtered out by the `streamChatCompletions` function.\n */\nexport type ChatCompletionsDelta = ContentMessage | FunctionCallMessage | DoneMessage;\n\n/** A chunk included in a chat completion response. */\nexport interface ChatCompletionsChunk {\n  /** The delta since the previous chunk. */\n  delta: ChatCompletionsDelta;\n}\n\n/** Return true if the message is a 'content' message. */\nexport function isContentMessage(message: any): message is ContentMessage {\n  return message.content != null;\n}\n\n\n/** Return true if the message is a 'done' message. */\nexport function isDoneMessage(message: any): message is DoneMessage {\n  return message.done !== undefined\n}\n\n/**\n * An rxjs operator that extracts the content messages from a stream of chat completion responses.\n *\n * @returns An observable that emits the content messages. Each emission will be a string containing the\n *         token emitted by the model.\n * @example <caption>Example of reading all tokens in a stream.</caption>\n * const stream = streamChatCompletions({ model: 'gpt-3.5-turbo', messages: [\n *   { role: 'system', content: 'You are a great bot.' },\n *   { role: 'user', content: 'Hello, bot.' },\n * ]}).pipe(extractContent());\n * stream.subscribe(console.log);\n * // Output:\n * // ['Hello', '? ', 'How ', 'are ', 'you', '?']\n */\nexport function extractContent(): UnaryFunction<Observable<ChatCompletionsResponse<ChatCompletionsChunk>>, Observable<string>> {\n  return pipe(\n    filter((response: ChatCompletionsResponse<ChatCompletionsChunk>) => isContentMessage(response.choices[0].delta)),\n    // The type assertion is needed here because the type predicate above doesn't seem to propagate.\n    map((response: ChatCompletionsResponse<ChatCompletionsChunk>) => (response.choices[0].delta as ContentMessage).content),\n  )\n}\n\n/**\n * An rxjs operator that accumulates the content messages from a stream of chat completion responses.\n *\n * @returns An observable that emits the accumulated content messages. Each emission will be a string containing the\n *         content of all messages received so far.\n * @example\n * const stream = streamChatCompletions({ model: 'gpt-3.5-turbo', messages: [\n *   { role: 'system', content: 'You are a great bot.' },\n *   { role: 'user', content: 'Hello, bot.' },\n * ]}).pipe(accumulateContent());\n * stream.subscribe(console.log);\n * // Output:\n * // ['Hello', 'Hello! ', 'Hello! How ', 'Hello! How are ', 'Hello! How are you', 'Hello! How are you?']\n */\nexport function accumulateContent(): UnaryFunction<Observable<ChatCompletionsResponse<ChatCompletionsChunk>>, Observable<string>> {\n  return pipe(\n    extractContent(),\n    scan((acc, curr) => acc + curr, ''),\n  );\n}\n\n/**\n * Make a request to OpenAI's chat-completions API via the Grafana LLM plugin proxy.\n */\nexport async function chatCompletions(request: ChatCompletionsRequest): Promise<ChatCompletionsResponse> {\n  const response = await getBackendSrv().post<ChatCompletionsResponse>('/api/plugins/grafana-llm-app/resources/openai/v1/chat/completions', request, {\n    headers: { 'Content-Type': 'application/json' }\n  });\n  return response;\n}\n\n/**\n * Make a streaming request to OpenAI's chat-completions API via the Grafana LLM plugin proxy.\n *\n * A stream of tokens will be returned as an `Observable<string>`. Use the `extractContent` operator to\n * filter the stream to only content messages, or the `accumulateContent` operator to obtain a stream of\n * accumulated content messages.\n *\n * The 'done' message will not be emitted; the stream will simply end when this message is encountered.\n *\n * @example <caption>Example of reading all tokens in a stream.</caption>\n * const stream = streamChatCompletions({ model: 'gpt-3.5-turbo', messages: [\n *   { role: 'system', content: 'You are a great bot.' },\n *   { role: 'user', content: 'Hello, bot.' },\n * ]}).pipe(extractContent());\n * stream.subscribe(console.log);\n * // Output:\n * // ['Hello', '? ', 'How ', 'are ', 'you', '?']\n *\n * @example <caption>Example of accumulating tokens in a stream.</caption>\n * const stream = streamChatCompletions({ model: 'gpt-3.5-turbo', messages: [\n *   { role: 'system', content: 'You are a great bot.' },\n *   { role: 'user', content: 'Hello, bot.' },\n * ]}).pipe(accumulateContent());\n * stream.subscribe(console.log);\n * // Output:\n * // ['Hello', 'Hello! ', 'Hello! How ', 'Hello! How are ', 'Hello! How are you', 'Hello! How are you?']\n */\nexport function streamChatCompletions(request: ChatCompletionsRequest): Observable<ChatCompletionsResponse<ChatCompletionsChunk>> {\n  const channel: LiveChannelAddress = {\n    scope: LiveChannelScope.Plugin,\n    namespace: LLM_PLUGIN_ID,\n    path: OPENAI_CHAT_COMPLETIONS_PATH,\n    data: request,\n  };\n  const messages = getGrafanaLiveSrv()\n    .getStream(channel)\n    .pipe(filter((event) => isLiveChannelMessageEvent(event))) as Observable<LiveChannelMessageEvent<ChatCompletionsResponse<ChatCompletionsChunk>>>\n  return messages.pipe(\n    takeWhile((event) => !isDoneMessage(event.message.choices[0].delta)),\n    map((event) => event.message),\n  );\n}\n\nlet loggedWarning = false;\n\n/** Check if the OpenAI API is enabled via the LLM plugin. */\nexport const enabled = async () => {\n  try {\n    const settings = await getBackendSrv().get(`${LLM_PLUGIN_ROUTE}/settings`, undefined, undefined, {\n      showSuccessAlert: false, showErrorAlert: false,\n    });\n    return settings.enabled && (settings?.secureJsonFields?.openAIKey ?? false);\n  } catch (e) {\n    if (!loggedWarning) {\n      logDebug(String(e));\n      logDebug('Failed to check if OpenAI is enabled. This is expected if the Grafana LLM plugin is not installed, and the above error can be ignored.');\n      loggedWarning = true;\n    }\n    return false;\n  }\n}\n","import { Monaco, monacoTypes } from '@grafana/ui';\nimport { SQLMonarchLanguage, StatementPositionResolver, SuggestionsResolver } from './standardSql/types';\nimport { LinkedToken } from './utils/LinkedToken';\n\n/**\n * Provides a context for suggestions resolver\n * @alpha\n */\nexport interface PositionContext {\n  position: monacoTypes.IPosition;\n  kind: SuggestionKind[];\n  statementPosition: StatementPosition[];\n  currentToken: LinkedToken | null;\n  range: monacoTypes.IRange;\n}\n\nexport type CustomSuggestion = Partial<monacoTypes.languages.CompletionItem> & { label: string };\n\nexport interface CustomSuggestionKind {\n  id: string;\n  suggestionsResolver: SuggestionsResolver;\n  applyTo?: Array<StatementPosition | string>;\n  overrideDefault?: boolean;\n}\n\nexport interface CustomStatementPlacement {\n  id: string;\n  name?: string;\n  resolve: StatementPositionResolver;\n  overrideDefault?: boolean;\n}\nexport type StatementPlacementProvider = () => CustomStatementPlacement[];\nexport type SuggestionKindProvider = () => CustomSuggestionKind[];\n\nexport interface ColumnDefinition {\n  name: string;\n  type?: string;\n  description?: string;\n  // Text used for automplete. If not provided name is used.\n  completion?: string;\n}\n\nexport interface SchemaDefinition {\n  name: string;\n  // Text used for autocomplete. If not provided name is used.\n  completion?: string;\n}\n\nexport interface TableDefinition {\n  name: string;\n  // Text used for automplete. If not provided name is used.\n  completion?: string;\n}\n\nexport interface Operator {\n  id: string;\n  operator: string;\n  type: OperatorType;\n  description?: string;\n}\n\nexport interface TableIdentifier {\n  table?: string;\n  schema?: string;\n}\n\nexport interface SQLCompletionItemProvider\n  extends Omit<monacoTypes.languages.CompletionItemProvider, 'provideCompletionItems'> {\n  /**\n   * Allows dialect specific functions to be added to the completion list.\n   * @alpha\n   */\n  supportedFunctions?: () => Array<{\n    id: string;\n    name: string;\n    description?: string;\n  }>;\n\n  /**\n   * Allows dialect specific operators to be added to the completion list.\n   * @alpha\n   */\n  supportedOperators?: () => Array<{\n    id: string;\n    operator: string;\n    type: OperatorType;\n    description?: string;\n  }>;\n\n  supportedMacros?: () => Array<{\n    id: string;\n    text: string;\n    type: MacroType;\n    args: string[];\n    description?: string;\n  }>;\n\n  /**\n   * Allows custom suggestion kinds to be defined and correlate them with <Custom>StatementPosition.\n   * @alpha\n   */\n  customSuggestionKinds?: SuggestionKindProvider;\n\n  /**\n   * Allows custom statement placement definition.\n   * @alpha\n   */\n  customStatementPlacement?: StatementPlacementProvider;\n\n  /**\n   * Allows providing a custom function for resolving schemas.\n   * It's up to the consumer to decide whether the schemas are resolved via API calls or preloaded in the query editor(i.e. full db schema is preloades loaded).\n   * @alpha\n   */\n  schemas?: {\n    resolve: () => Promise<SchemaDefinition[]>;\n  };\n\n  /**\n   * Allows providing a custom function for resolving db tables.\n   * It's up to the consumer to decide whether the columns are resolved via API calls or preloaded in the query editor(i.e. full db schema is preloades loaded).\n   * @alpha\n   */\n  tables?: {\n    resolve: (TableIdentifier: TableIdentifier | null) => Promise<TableDefinition[]>;\n    // Allows providing a custom function for calculating the table name from the query. If not specified a default implemnentation is used.\n    parseName?: (token: LinkedToken | null | undefined) => TableIdentifier;\n  };\n  /**\n   * Allows providing a custom function for resolving table.\n   * It's up to the consumer to decide whether the columns are resolved via API calls or preloaded in the query editor(i.e. full db schema is preloades loaded).\n   * @alpha\n   */\n  columns?: {\n    resolve: (identifier?: TableIdentifier) => Promise<ColumnDefinition[]>;\n  };\n\n  /**\n   * TODO: Not sure whether or not we need this. Would like to avoid this kind of flexibility.\n   * @alpha\n   */\n  provideCompletionItems?: (\n    model: monacoTypes.editor.ITextModel,\n    position: monacoTypes.Position,\n    context: monacoTypes.languages.CompletionContext,\n    token: monacoTypes.CancellationToken,\n    positionContext: PositionContext // Decorates original provideCompletionItems function with our custom statement position context\n  ) => monacoTypes.languages.CompletionList;\n}\n\nexport type LanguageCompletionProvider = (m: Monaco, l?: SQLMonarchLanguage) => SQLCompletionItemProvider;\n\nexport enum OperatorType {\n  Comparison,\n  Logical,\n}\n\nexport enum MacroType {\n  Value,\n  Filter,\n  Group,\n  Column,\n  Table,\n}\n\nexport enum TokenType {\n  Parenthesis = 'delimiter.parenthesis.sql',\n  Whitespace = 'white.sql',\n  Keyword = 'keyword.sql',\n  Delimiter = 'delimiter.sql',\n  Operator = 'operator.sql',\n  Identifier = 'identifier.sql',\n  IdentifierQuote = 'identifier.quote.sql',\n  Type = 'type.sql',\n  Function = 'predefined.sql',\n  Number = 'number.sql',\n  String = 'string.sql',\n  Variable = 'variable.sql',\n}\n\nexport enum StatementPosition {\n  Unknown = 'unknown',\n  SelectKeyword = 'selectKeyword',\n  WithKeyword = 'withKeyword',\n  AfterSelectKeyword = 'afterSelectKeyword',\n  AfterSelectArguments = 'afterSelectArguments',\n  AfterSelectFuncFirstArgument = 'afterSelectFuncFirstArgument',\n  SelectAlias = 'selectAlias',\n  AfterFromKeyword = 'afterFromKeyword',\n  AfterTable = 'afterTable',\n  SchemaFuncFirstArgument = 'schemaFuncFirstArgument',\n  SchemaFuncExtraArgument = 'schemaFuncExtraArgument',\n  FromKeyword = 'fromKeyword',\n  AfterFrom = 'afterFrom',\n  WhereKeyword = 'whereKeyword',\n  WhereComparisonOperator = 'whereComparisonOperator',\n  WhereValue = 'whereValue',\n  AfterWhereFunctionArgument = 'afterWhereFunctionArgument',\n  AfterGroupByFunctionArgument = 'afterGroupByFunctionArgument',\n  AfterWhereValue = 'afterWhereValue',\n  AfterGroupByKeywords = 'afterGroupByKeywords',\n  AfterGroupBy = 'afterGroupBy',\n  AfterOrderByKeywords = 'afterOrderByKeywords',\n  AfterOrderByFunction = 'afterOrderByFunction',\n  AfterOrderByDirection = 'afterOrderByDirection',\n  AfterIsOperator = 'afterIsOperator',\n  AfterIsNotOperator = 'afterIsNotOperator',\n  AfterSchema = 'afterSchema',\n}\n\nexport enum SuggestionKind {\n  Schemas = 'schemas',\n  Tables = 'tables',\n  Columns = 'columns',\n  SelectKeyword = 'selectKeyword',\n  WithKeyword = 'withKeyword',\n  FunctionsWithArguments = 'functionsWithArguments',\n  FromKeyword = 'fromKeyword',\n  WhereKeyword = 'whereKeyword',\n  GroupByKeywords = 'groupByKeywords',\n  OrderByKeywords = 'orderByKeywords',\n  FunctionsWithoutArguments = 'functionsWithoutArguments',\n  LimitKeyword = 'limitKeyword',\n  SortOrderDirectionKeyword = 'sortOrderDirectionKeyword',\n  ComparisonOperators = 'comparisonOperators',\n  LogicalOperators = 'logicalOperators',\n  SelectMacro = 'selectMacro',\n  TableMacro = 'tableMacro',\n  FilterMacro = 'filterMacro',\n  GroupMacro = 'groupMacro',\n  BoolValues = 'boolValues',\n  NullValue = 'nullValue',\n  NotKeyword = 'notKeyword',\n  TemplateVariables = 'templateVariables',\n  StarWildCard = 'starWildCard',\n}\n\n// TODO: export from grafana/ui\nexport enum CompletionItemPriority {\n  High = 'a',\n  MediumHigh = 'd',\n  Medium = 'g',\n  MediumLow = 'k',\n  Low = 'q',\n}\n\nexport enum CompletionItemKind {\n  Method = 0,\n  Function = 1,\n  Constructor = 2,\n  Field = 3,\n  Variable = 4,\n  Class = 5,\n  Struct = 6,\n  Interface = 7,\n  Module = 8,\n  Property = 9,\n  Event = 10,\n  Operator = 11,\n  Unit = 12,\n  Value = 13,\n  Constant = 14,\n  Enum = 15,\n  EnumMember = 16,\n  Keyword = 17,\n  Text = 18,\n  Color = 19,\n  File = 20,\n  Reference = 21,\n  Customcolor = 22,\n  Folder = 23,\n  TypeParameter = 24,\n  User = 25,\n  Issue = 26,\n  Snippet = 27,\n}\n\nexport enum CompletionItemInsertTextRule {\n  KeepWhitespace = 1,\n  InsertAsSnippet = 4,\n}\n\nexport enum EditorMode {\n  Builder = 'builder',\n  Code = 'code',\n}\n","import { StatementPosition, TokenType } from '../types';\nimport { LinkedToken } from '../utils/LinkedToken';\nimport { StatementPositionResolversRegistryItem } from './types';\nimport { Registry } from '@grafana/data';\n\n// Given current cursor position in the SQL editor, returns the statement position.\nexport function getStatementPosition(\n  currentToken: LinkedToken | null,\n  statementPositionResolversRegistry: Registry<StatementPositionResolversRegistryItem>\n): StatementPosition[] {\n  const previousNonWhiteSpace = currentToken?.getPreviousNonWhiteSpaceToken();\n  const previousKeyword = currentToken?.getPreviousKeyword();\n  const previousIsSlash = currentToken?.getPreviousNonWhiteSpaceToken()?.is(TokenType.Operator, '/');\n  const resolvers = statementPositionResolversRegistry.list();\n  const positions = [];\n\n  for (const resolver of resolvers) {\n    if (\n      resolver.resolve(currentToken, previousKeyword ?? null, previousNonWhiteSpace ?? null, Boolean(previousIsSlash))\n    ) {\n      positions.push(resolver.id);\n    }\n  }\n\n  if (positions.length === 0) {\n    return [StatementPosition.Unknown];\n  }\n  return positions;\n}\n","import { monacoTypes } from '@grafana/ui';\nimport { CompletionItemKind, CompletionItemPriority } from '../types';\n\nexport const toCompletionItem = (\n  value: string,\n  range: monacoTypes.IRange,\n  rest: Partial<monacoTypes.languages.CompletionItem> = {}\n) => {\n  const item: monacoTypes.languages.CompletionItem = {\n    label: value,\n    insertText: value,\n    kind: CompletionItemKind.Field,\n    sortText: CompletionItemPriority.Medium,\n    range,\n    ...rest,\n  };\n  return item;\n};\n","import { Registry } from '@grafana/data';\nimport { Monaco, monacoTypes } from '@grafana/ui';\nimport { PositionContext, SuggestionKind } from '../types';\nimport { LinkedToken } from '../utils/LinkedToken';\nimport { toCompletionItem } from '../utils/toCompletionItem';\nimport { SuggestionsRegistryItem } from './types';\n\n// Given standard and custom registered suggestions and kinds of suggestion expected, return a list of completion items\nexport const getStandardSuggestions = async (\n  monaco: Monaco,\n  currentToken: LinkedToken | null,\n  suggestionKinds: SuggestionKind[],\n  positionContext: PositionContext,\n  suggestionsRegistry: Registry<SuggestionsRegistryItem>\n): Promise<monacoTypes.languages.CompletionItem[]> => {\n  let suggestions: monacoTypes.languages.CompletionItem[] = [];\n  const invalidRangeToken =\n    currentToken?.isWhiteSpace() ||\n    currentToken?.isParenthesis() ||\n    (currentToken?.isIdentifier() && currentToken.value.endsWith('.'));\n  const range =\n    invalidRangeToken || !currentToken?.range\n      ? monaco.Range.fromPositions(positionContext.position)\n      : currentToken?.range;\n\n  // iterating over Set to deduplicate\n  for (const suggestion of [...new Set(suggestionKinds)]) {\n    const registeredSuggestions = suggestionsRegistry.getIfExists(suggestion);\n    if (registeredSuggestions) {\n      const su = await registeredSuggestions.suggestions({ ...positionContext, range }, monaco);\n      suggestions = [...suggestions, ...su.map((s) => toCompletionItem(s.label, range, { kind: s.kind, ...s }))];\n    }\n  }\n  return Promise.resolve(suggestions);\n};\n","import { RegistryItem } from '@grafana/data';\nimport { StatementPosition, SuggestionKind } from '../types';\n\nexport interface SuggestionKindRegistryItem extends RegistryItem {\n  id: StatementPosition;\n  kind: SuggestionKind[];\n}\n\n// Registry of possible suggestions for the given statement position\nexport const initSuggestionsKindRegistry = (): SuggestionKindRegistryItem[] => {\n  return [\n    {\n      id: StatementPosition.SelectKeyword,\n      name: StatementPosition.SelectKeyword,\n      kind: [SuggestionKind.SelectKeyword],\n    },\n    {\n      id: StatementPosition.WithKeyword,\n      name: StatementPosition.WithKeyword,\n      kind: [SuggestionKind.WithKeyword],\n    },\n    {\n      id: StatementPosition.AfterSelectKeyword,\n      name: StatementPosition.AfterSelectKeyword,\n      kind: [\n        SuggestionKind.StarWildCard,\n        SuggestionKind.FunctionsWithArguments,\n        SuggestionKind.Columns,\n        SuggestionKind.SelectMacro,\n      ],\n    },\n    {\n      id: StatementPosition.AfterSelectFuncFirstArgument,\n      name: StatementPosition.AfterSelectFuncFirstArgument,\n      kind: [SuggestionKind.Columns],\n    },\n    {\n      id: StatementPosition.AfterGroupByFunctionArgument,\n      name: StatementPosition.AfterGroupByFunctionArgument,\n      kind: [SuggestionKind.Columns],\n    },\n    {\n      id: StatementPosition.AfterWhereFunctionArgument,\n      name: StatementPosition.AfterWhereFunctionArgument,\n      kind: [SuggestionKind.Columns],\n    },\n    {\n      id: StatementPosition.AfterSelectArguments,\n      name: StatementPosition.AfterSelectArguments,\n      kind: [SuggestionKind.Columns],\n    },\n    {\n      id: StatementPosition.AfterFromKeyword,\n      name: StatementPosition.AfterFromKeyword,\n      kind: [SuggestionKind.Schemas, SuggestionKind.Tables, SuggestionKind.TableMacro],\n    },\n    {\n      id: StatementPosition.AfterSchema,\n      name: StatementPosition.AfterSchema,\n      kind: [SuggestionKind.Tables, SuggestionKind.TableMacro],\n    },\n    {\n      id: StatementPosition.SelectAlias,\n      name: StatementPosition.SelectAlias,\n      kind: [SuggestionKind.Columns, SuggestionKind.FunctionsWithArguments],\n    },\n    {\n      id: StatementPosition.FromKeyword,\n      name: StatementPosition.FromKeyword,\n      kind: [SuggestionKind.FromKeyword],\n    },\n    {\n      id: StatementPosition.AfterFrom,\n      name: StatementPosition.AfterFrom,\n      kind: [\n        SuggestionKind.WhereKeyword,\n        SuggestionKind.GroupByKeywords,\n        SuggestionKind.OrderByKeywords,\n        SuggestionKind.LimitKeyword,\n      ],\n    },\n    {\n      id: StatementPosition.AfterTable,\n      name: StatementPosition.AfterTable,\n      kind: [\n        SuggestionKind.WhereKeyword,\n        SuggestionKind.GroupByKeywords,\n        SuggestionKind.OrderByKeywords,\n        SuggestionKind.LimitKeyword,\n      ],\n    },\n    {\n      id: StatementPosition.WhereKeyword,\n      name: StatementPosition.WhereKeyword,\n      kind: [SuggestionKind.Columns, SuggestionKind.FilterMacro, SuggestionKind.TemplateVariables],\n    },\n    {\n      id: StatementPosition.WhereComparisonOperator,\n      name: StatementPosition.WhereComparisonOperator,\n      kind: [SuggestionKind.ComparisonOperators],\n    },\n    {\n      id: StatementPosition.WhereValue,\n      name: StatementPosition.WhereValue,\n      kind: [SuggestionKind.FilterMacro, SuggestionKind.TemplateVariables],\n    },\n    {\n      id: StatementPosition.AfterWhereValue,\n      name: StatementPosition.AfterWhereValue,\n      kind: [\n        SuggestionKind.LogicalOperators,\n        SuggestionKind.GroupByKeywords,\n        SuggestionKind.OrderByKeywords,\n        SuggestionKind.LimitKeyword,\n        SuggestionKind.Columns,\n        SuggestionKind.TemplateVariables,\n      ],\n    },\n    {\n      id: StatementPosition.AfterGroupByKeywords,\n      name: StatementPosition.AfterGroupByKeywords,\n      kind: [SuggestionKind.GroupMacro, SuggestionKind.Columns],\n    },\n    {\n      id: StatementPosition.AfterGroupBy,\n      name: StatementPosition.AfterGroupBy,\n      kind: [SuggestionKind.OrderByKeywords, SuggestionKind.LimitKeyword],\n    },\n    {\n      id: StatementPosition.AfterOrderByKeywords,\n      name: StatementPosition.AfterOrderByKeywords,\n      kind: [SuggestionKind.Columns],\n    },\n    {\n      id: StatementPosition.AfterOrderByFunction,\n      name: StatementPosition.AfterOrderByFunction,\n      kind: [SuggestionKind.SortOrderDirectionKeyword, SuggestionKind.LimitKeyword],\n    },\n    {\n      id: StatementPosition.AfterOrderByDirection,\n      name: StatementPosition.AfterOrderByDirection,\n      kind: [SuggestionKind.LimitKeyword],\n    },\n    {\n      id: StatementPosition.AfterIsOperator,\n      name: StatementPosition.AfterOrderByDirection,\n      kind: [SuggestionKind.NotKeyword, SuggestionKind.NullValue, SuggestionKind.BoolValues],\n    },\n    {\n      id: StatementPosition.AfterIsNotOperator,\n      name: StatementPosition.AfterOrderByDirection,\n      kind: [SuggestionKind.NullValue, SuggestionKind.BoolValues],\n    },\n  ];\n};\n","import { Registry } from '@grafana/data';\nimport { SuggestionKindRegistryItem } from '../standardSql/suggestionsKindRegistry';\nimport { StatementPosition, SuggestionKind } from '../types';\n\n/**\n * Given statement positions, returns list of suggestion kinds that apply to those positions.\n */\nexport function getSuggestionKinds(\n  statementPosition: StatementPosition[],\n  suggestionsKindRegistry: Registry<SuggestionKindRegistryItem>\n): SuggestionKind[] {\n  let result: SuggestionKind[] = [];\n  for (let i = 0; i < statementPosition.length; i++) {\n    const exists = suggestionsKindRegistry.getIfExists(statementPosition[i]);\n    if (exists) {\n      result = result.concat(exists.kind);\n    }\n  }\n\n  return result;\n}\n","import { monacoTypes } from '@grafana/ui';\nimport { TokenType } from '../types';\n\nexport class LinkedToken {\n  constructor(\n    public type: string,\n    public value: string,\n    public range: monacoTypes.IRange,\n    public previous: LinkedToken | null,\n    public next: LinkedToken | null\n  ) {}\n\n  isKeyword(): boolean {\n    return this.type === TokenType.Keyword;\n  }\n\n  isWhiteSpace(): boolean {\n    return this.type === TokenType.Whitespace;\n  }\n\n  isParenthesis(): boolean {\n    return this.type === TokenType.Parenthesis;\n  }\n\n  isIdentifier(): boolean {\n    return this.type === TokenType.Identifier;\n  }\n\n  isString(): boolean {\n    return this.type === TokenType.String;\n  }\n\n  isNumber(): boolean {\n    return this.type === TokenType.Number;\n  }\n\n  isDoubleQuotedString(): boolean {\n    return this.type === TokenType.Type;\n  }\n\n  isVariable(): boolean {\n    return this.type === TokenType.Variable;\n  }\n\n  isFunction(): boolean {\n    return this.type === TokenType.Function;\n  }\n\n  isOperator(): boolean {\n    return this.type === TokenType.Operator;\n  }\n\n  isTemplateVariable(): boolean {\n    return this.type === TokenType.Variable;\n  }\n\n  is(type: TokenType, value?: string | number | boolean): boolean {\n    const isType = this.type === type;\n\n    return value !== undefined ? isType && compareTokenWithValue(type, this, value) : isType;\n  }\n\n  getPreviousNonWhiteSpaceToken(): LinkedToken | null {\n    let curr = this.previous;\n    while (curr != null) {\n      if (!curr.isWhiteSpace()) {\n        return curr;\n      }\n      curr = curr.previous;\n    }\n    return null;\n  }\n\n  getPreviousOfType(type: TokenType, value?: string): LinkedToken | null {\n    let curr = this.previous;\n    while (curr != null) {\n      const isType = curr.type === type;\n\n      if (value !== undefined ? isType && compareTokenWithValue(type, curr, value) : isType) {\n        return curr;\n      }\n      curr = curr.previous;\n    }\n    return null;\n  }\n\n  getPreviousUntil(type: TokenType, ignoreTypes: TokenType[], value?: string): LinkedToken[] | null {\n    let tokens: LinkedToken[] = [];\n    let curr = this.previous;\n    while (curr != null) {\n      if (ignoreTypes.some((t) => t === curr?.type)) {\n        curr = curr.previous;\n        continue;\n      }\n\n      const isType = curr.type === type;\n\n      if (value !== undefined ? isType && compareTokenWithValue(type, curr, value) : isType) {\n        return tokens;\n      }\n      if (!curr.isWhiteSpace()) {\n        tokens.push(curr);\n      }\n      curr = curr.previous;\n    }\n\n    return tokens;\n  }\n\n  getNextUntil(type: TokenType, ignoreTypes: TokenType[], value?: string): LinkedToken[] | null {\n    let tokens: LinkedToken[] = [];\n    let curr = this.next;\n    while (curr != null) {\n      if (ignoreTypes.some((t) => t === curr?.type)) {\n        curr = curr.next;\n        continue;\n      }\n\n      const isType = curr.type === type;\n\n      if (value !== undefined ? isType && compareTokenWithValue(type, curr, value) : isType) {\n        return tokens;\n      }\n      if (!curr.isWhiteSpace()) {\n        tokens.push(curr);\n      }\n      curr = curr.next;\n    }\n\n    return tokens;\n  }\n\n  getPreviousKeyword(): LinkedToken | null {\n    let curr = this.previous;\n    while (curr != null) {\n      if (curr.isKeyword()) {\n        return curr;\n      }\n      curr = curr.previous;\n    }\n    return null;\n  }\n\n  getNextNonWhiteSpaceToken(): LinkedToken | null {\n    let curr = this.next;\n    while (curr != null) {\n      if (!curr.isWhiteSpace()) {\n        return curr;\n      }\n      curr = curr.next;\n    }\n    return null;\n  }\n\n  getNextOfType(type: TokenType, value?: string): LinkedToken | null {\n    let curr = this.next;\n    while (curr != null) {\n      const isType = curr.type === type;\n\n      if (value !== undefined ? isType && compareTokenWithValue(type, curr, value) : isType) {\n        return curr;\n      }\n      curr = curr.next;\n    }\n    return null;\n  }\n}\n\nfunction compareTokenWithValue(type: TokenType, token: LinkedToken, value: string | number | boolean) {\n  return type === TokenType.Keyword || type === TokenType.Operator\n    ? token.value.toLowerCase() === value.toString().toLowerCase()\n    : token.value === value;\n}\n","import type { monacoTypes } from '@grafana/ui';\nimport { TokenType } from '../types';\nimport { LinkedToken } from './LinkedToken';\nimport { Monaco } from './types';\n\nexport function linkedTokenBuilder(\n  monaco: Monaco,\n  model: monacoTypes.editor.ITextModel,\n  position: monacoTypes.IPosition,\n  languageId = 'sql'\n) {\n  let current: LinkedToken | null = null;\n  let previous: LinkedToken | null = null;\n  const tokensPerLine = monaco.editor.tokenize(model.getValue() ?? '', languageId);\n  for (let lineIndex = 0; lineIndex < tokensPerLine.length; lineIndex++) {\n    const tokens = tokensPerLine[lineIndex];\n    // In case position is first column in new line, add empty whitespace token so that links are not broken\n    if (!tokens.length && previous) {\n      const token: monacoTypes.Token = {\n        offset: 0,\n        type: TokenType.Whitespace,\n        language: languageId,\n        _tokenBrand: undefined,\n      };\n      tokens.push(token);\n    }\n\n    for (let columnIndex = 0; columnIndex < tokens.length; columnIndex++) {\n      const token = tokens[columnIndex];\n      let endColumn =\n        tokens.length > columnIndex + 1 ? tokens[columnIndex + 1].offset + 1 : model.getLineLength(lineIndex + 1) + 1;\n\n      const range: monacoTypes.IRange = {\n        startLineNumber: lineIndex + 1,\n        startColumn: token.offset === 0 ? 0 : token.offset + 1,\n        endLineNumber: lineIndex + 1,\n        endColumn,\n      };\n\n      const value = model.getValueInRange(range);\n      const sqlToken: LinkedToken = new LinkedToken(token.type, value, range, previous, null);\n\n      if (monaco.Range.containsPosition(range, position)) {\n        current = sqlToken;\n      }\n\n      if (previous) {\n        previous.next = sqlToken;\n      }\n      previous = sqlToken;\n    }\n  }\n  return current;\n}\n","import { monacoTypes } from '@grafana/ui';\nimport { SQLMonarchLanguage } from './types';\n\n// STD basic SQL\nexport const SELECT = 'select';\nexport const FROM = 'from';\nexport const WHERE = 'where';\nexport const GROUP = 'group';\nexport const ORDER = 'order';\nexport const BY = 'by';\nexport const DESC = 'desc';\nexport const ASC = 'asc';\nexport const LIMIT = 'limit';\nexport const WITH = 'with';\nexport const AS = 'as';\nexport const SCHEMA = 'schema';\n\nexport const AND = 'AND';\nexport const OR = 'OR';\nexport const LOGICAL_OPERATORS = [AND, OR];\n\nexport const EQUALS = '=';\nexport const NOT_EQUALS = '!=';\nexport const COMPARISON_OPERATORS = [EQUALS, NOT_EQUALS];\n\nexport const STD_OPERATORS = [...COMPARISON_OPERATORS];\n\nexport const conf: monacoTypes.languages.LanguageConfiguration = {\n  comments: {\n    lineComment: '--',\n    blockComment: ['/*', '*/'],\n  },\n  brackets: [\n    ['{', '}'],\n    ['[', ']'],\n    ['(', ')'],\n  ],\n  autoClosingPairs: [\n    { open: '{', close: '}' },\n    { open: '[', close: ']' },\n    { open: '(', close: ')' },\n    { open: '\"', close: '\"' },\n    { open: \"'\", close: \"'\" },\n  ],\n  surroundingPairs: [\n    { open: '{', close: '}' },\n    { open: '[', close: ']' },\n    { open: '(', close: ')' },\n    { open: '\"', close: '\"' },\n    { open: \"'\", close: \"'\" },\n  ],\n};\n\n// based on https://github.com/microsoft/monaco-editor/blob/main/src/basic-languages/sql/sql.ts\nexport const language: SQLMonarchLanguage = {\n  defaultToken: '',\n  tokenPostfix: '.sql',\n  ignoreCase: true,\n\n  brackets: [\n    { open: '[', close: ']', token: 'delimiter.square' },\n    { open: '(', close: ')', token: 'delimiter.parenthesis' },\n  ],\n\n  keywords: [\n    'ABORT',\n    'ABSOLUTE',\n    'ACTION',\n    'ADA',\n    'ADD',\n    'AFTER',\n    'ALL',\n    'ALLOCATE',\n    'ALTER',\n    'ALWAYS',\n    'ANALYZE',\n    'AND',\n    'ANY',\n    'ARE',\n    'AS',\n    'ASC',\n    'ASSERTION',\n    'AT',\n    'ATTACH',\n    'AUTHORIZATION',\n    'AUTOINCREMENT',\n    'AVG',\n    'BACKUP',\n    'BEFORE',\n    'BEGIN',\n    'BETWEEN',\n    'BIT',\n    'BIT_LENGTH',\n    'BOTH',\n    'BREAK',\n    'BROWSE',\n    'BULK',\n    'BY',\n    'CASCADE',\n    'CASCADED',\n    'CASE',\n    'CAST',\n    'CATALOG',\n    'CHAR',\n    'CHARACTER',\n    'CHARACTER_LENGTH',\n    'CHAR_LENGTH',\n    'CHECK',\n    'CHECKPOINT',\n    'CLOSE',\n    'CLUSTERED',\n    'COALESCE',\n    'COLLATE',\n    'COLLATION',\n    'COLUMN',\n    'COMMIT',\n    'COMPUTE',\n    'CONFLICT',\n    'CONNECT',\n    'CONNECTION',\n    'CONSTRAINT',\n    'CONSTRAINTS',\n    'CONTAINS',\n    'CONTAINSTABLE',\n    'CONTINUE',\n    'CONVERT',\n    'CORRESPONDING',\n    'COUNT',\n    'CREATE',\n    'CROSS',\n    'CURRENT',\n    'CURRENT_DATE',\n    'CURRENT_TIME',\n    'CURRENT_TIMESTAMP',\n    'CURRENT_USER',\n    'CURSOR',\n    'DATABASE',\n    'DATE',\n    'DAY',\n    'DBCC',\n    'DEALLOCATE',\n    'DEC',\n    'DECIMAL',\n    'DECLARE',\n    'DEFAULT',\n    'DEFERRABLE',\n    'DEFERRED',\n    'DELETE',\n    'DENY',\n    'DESC',\n    'DESCRIBE',\n    'DESCRIPTOR',\n    'DETACH',\n    'DIAGNOSTICS',\n    'DISCONNECT',\n    'DISK',\n    'DISTINCT',\n    'DISTRIBUTED',\n    'DO',\n    'DOMAIN',\n    'DOUBLE',\n    'DROP',\n    'DUMP',\n    'EACH',\n    'ELSE',\n    'END',\n    'END-EXEC',\n    'ERRLVL',\n    'ESCAPE',\n    'EXCEPT',\n    'EXCEPTION',\n    'EXCLUDE',\n    'EXCLUSIVE',\n    'EXEC',\n    'EXECUTE',\n    'EXISTS',\n    'EXIT',\n    'EXPLAIN',\n    'EXTERNAL',\n    'EXTRACT',\n    'FAIL',\n    'FALSE',\n    'FETCH',\n    'FILE',\n    'FILLFACTOR',\n    'FILTER',\n    'FIRST',\n    'FLOAT',\n    'FOLLOWING',\n    'FOR',\n    'FOREIGN',\n    'FORTRAN',\n    'FOUND',\n    'FREETEXT',\n    'FREETEXTTABLE',\n    'FROM',\n    'FULL',\n    'FUNCTION',\n    'GENERATED',\n    'GET',\n    'GLOB',\n    'GLOBAL',\n    'GO',\n    'GOTO',\n    'GRANT',\n    'GROUP',\n    'GROUPS',\n    'HAVING',\n    'HOLDLOCK',\n    'HOUR',\n    'IDENTITY',\n    'IDENTITYCOL',\n    'IDENTITY_INSERT',\n    'IF',\n    'IGNORE',\n    'IMMEDIATE',\n    'IN',\n    'INCLUDE',\n    'INDEX',\n    'INDEXED',\n    'INDICATOR',\n    'INITIALLY',\n    'INNER',\n    'INPUT',\n    'INSENSITIVE',\n    'INSERT',\n    'INSTEAD',\n    'INT',\n    'INTEGER',\n    'INTERSECT',\n    'INTERVAL',\n    'INTO',\n    'IS',\n    'ISNULL',\n    'ISOLATION',\n    'JOIN',\n    'KEY',\n    'KILL',\n    'LANGUAGE',\n    'LAST',\n    'LEADING',\n    'LEFT',\n    'LEVEL',\n    'LIKE',\n    'LIMIT',\n    'LINENO',\n    'LOAD',\n    'LOCAL',\n    'LOWER',\n    'MATCH',\n    'MATERIALIZED',\n    'MAX',\n    'MERGE',\n    'MIN',\n    'MINUTE',\n    'MODULE',\n    'MONTH',\n    'NAMES',\n    'NATIONAL',\n    'NATURAL',\n    'NCHAR',\n    'NEXT',\n    'NO',\n    'NOCHECK',\n    'NONCLUSTERED',\n    'NONE',\n    'NOT',\n    'NOTHING',\n    'NOTNULL',\n    'NULL',\n    'NULLIF',\n    'NULLS',\n    'NUMERIC',\n    'OCTET_LENGTH',\n    'OF',\n    'OFF',\n    'OFFSET',\n    'OFFSETS',\n    'ON',\n    'ONLY',\n    'OPEN',\n    'OPENDATASOURCE',\n    'OPENQUERY',\n    'OPENROWSET',\n    'OPENXML',\n    'OPTION',\n    'OR',\n    'ORDER',\n    'OTHERS',\n    'OUTER',\n    'OUTPUT',\n    'OVER',\n    'OVERLAPS',\n    'PAD',\n    'PARTIAL',\n    'PARTITION',\n    'PASCAL',\n    'PERCENT',\n    'PIVOT',\n    'PLAN',\n    'POSITION',\n    'PRAGMA',\n    'PRECEDING',\n    'PRECISION',\n    'PREPARE',\n    'PRESERVE',\n    'PRIMARY',\n    'PRINT',\n    'PRIOR',\n    'PRIVILEGES',\n    'PROC',\n    'PROCEDURE',\n    'PUBLIC',\n    'QUERY',\n    'RAISE',\n    'RAISERROR',\n    'RANGE',\n    'READ',\n    'READTEXT',\n    'REAL',\n    'RECONFIGURE',\n    'RECURSIVE',\n    'REFERENCES',\n    'REGEXP',\n    'REINDEX',\n    'RELATIVE',\n    'RELEASE',\n    'RENAME',\n    'REPLACE',\n    'REPLICATION',\n    'RESTORE',\n    'RESTRICT',\n    'RETURN',\n    'RETURNING',\n    'REVERT',\n    'REVOKE',\n    'RIGHT',\n    'ROLLBACK',\n    'ROW',\n    'ROWCOUNT',\n    'ROWGUIDCOL',\n    'ROWS',\n    'RULE',\n    'SAVE',\n    'SAVEPOINT',\n    'SCHEMA',\n    'SCROLL',\n    'SECOND',\n    'SECTION',\n    'SECURITYAUDIT',\n    'SELECT',\n    'SEMANTICKEYPHRASETABLE',\n    'SEMANTICSIMILARITYDETAILSTABLE',\n    'SEMANTICSIMILARITYTABLE',\n    'SESSION',\n    'SESSION_USER',\n    'SET',\n    'SETUSER',\n    'SHUTDOWN',\n    'SIZE',\n    'SMALLINT',\n    'SOME',\n    'SPACE',\n    'SQL',\n    'SQLCA',\n    'SQLCODE',\n    'SQLERROR',\n    'SQLSTATE',\n    'SQLWARNING',\n    'STATISTICS',\n    'SUBSTRING',\n    'SUM',\n    'SYSTEM_USER',\n    'TABLE',\n    'TABLESAMPLE',\n    'TEMP',\n    'TEMPORARY',\n    'TEXTSIZE',\n    'THEN',\n    'TIES',\n    'TIME',\n    'TIMESTAMP',\n    'TIMEZONE_HOUR',\n    'TIMEZONE_MINUTE',\n    'TO',\n    'TOP',\n    'TRAILING',\n    'TRAN',\n    'TRANSACTION',\n    'TRANSLATE',\n    'TRANSLATION',\n    'TRIGGER',\n    'TRIM',\n    'TRUE',\n    'TRUNCATE',\n    'TRY_CONVERT',\n    'TSEQUAL',\n    'UNBOUNDED',\n    'UNION',\n    'UNIQUE',\n    'UNKNOWN',\n    'UNPIVOT',\n    'UPDATE',\n    'UPDATETEXT',\n    'UPPER',\n    'USAGE',\n    'USE',\n    'USER',\n    'USING',\n    'VACUUM',\n    'VALUE',\n    'VALUES',\n    'VARCHAR',\n    'VARYING',\n    'VIEW',\n    'VIRTUAL',\n    'WAITFOR',\n    'WHEN',\n    'WHENEVER',\n    'WHERE',\n    'WHILE',\n    'WINDOW',\n    'WITH',\n    'WITHIN GROUP',\n    'WITHOUT',\n    'WORK',\n    'WRITE',\n    'WRITETEXT',\n    'YEAR',\n    'ZONE',\n  ],\n  operators: [\n    // Set\n    'EXCEPT',\n    'INTERSECT',\n    'UNION',\n    // Join\n    'APPLY',\n    'CROSS',\n    'FULL',\n    'INNER',\n    'JOIN',\n    'LEFT',\n    'OUTER',\n    'RIGHT',\n    // Predicates\n    'CONTAINS',\n    'FREETEXT',\n    'IS',\n    'NULL',\n    // Pivoting\n    'PIVOT',\n    'UNPIVOT',\n    // Merging\n    'MATCHED',\n  ],\n  logicalOperators: ['ALL', 'AND', 'ANY', 'BETWEEN', 'EXISTS', 'IN', 'LIKE', 'NOT', 'OR', 'SOME'],\n  comparisonOperators: ['<>', '>', '<', '>=', '<=', '=', '!=', '&', '~', '^', '%'],\n\n  builtinFunctions: [\n    // Aggregate\n    'AVG',\n    'CHECKSUM_AGG',\n    'COUNT',\n    'COUNT_BIG',\n    'GROUPING',\n    'GROUPING_ID',\n    'MAX',\n    'MIN',\n    'SUM',\n    'STDEV',\n    'STDEVP',\n    'VAR',\n    'VARP',\n    // Analytic\n    'CUME_DIST',\n    'FIRST_VALUE',\n    'LAG',\n    'LAST_VALUE',\n    'LEAD',\n    'PERCENTILE_CONT',\n    'PERCENTILE_DISC',\n    'PERCENT_RANK',\n    // Collation\n    'COLLATE',\n    'COLLATIONPROPERTY',\n    'TERTIARY_WEIGHTS',\n    // Azure\n    'FEDERATION_FILTERING_VALUE',\n    // Conversion\n    'CAST',\n    'CONVERT',\n    'PARSE',\n    'TRY_CAST',\n    'TRY_CONVERT',\n    'TRY_PARSE',\n    // Cryptographic\n    'ASYMKEY_ID',\n    'ASYMKEYPROPERTY',\n    'CERTPROPERTY',\n    'CERT_ID',\n    'CRYPT_GEN_RANDOM',\n    'DECRYPTBYASYMKEY',\n    'DECRYPTBYCERT',\n    'DECRYPTBYKEY',\n    'DECRYPTBYKEYAUTOASYMKEY',\n    'DECRYPTBYKEYAUTOCERT',\n    'DECRYPTBYPASSPHRASE',\n    'ENCRYPTBYASYMKEY',\n    'ENCRYPTBYCERT',\n    'ENCRYPTBYKEY',\n    'ENCRYPTBYPASSPHRASE',\n    'HASHBYTES',\n    'IS_OBJECTSIGNED',\n    'KEY_GUID',\n    'KEY_ID',\n    'KEY_NAME',\n    'SIGNBYASYMKEY',\n    'SIGNBYCERT',\n    'SYMKEYPROPERTY',\n    'VERIFYSIGNEDBYCERT',\n    'VERIFYSIGNEDBYASYMKEY',\n    // Cursor\n    'CURSOR_STATUS',\n    // Datatype\n    'DATALENGTH',\n    'IDENT_CURRENT',\n    'IDENT_INCR',\n    'IDENT_SEED',\n    'IDENTITY',\n    'SQL_VARIANT_PROPERTY',\n    // Datetime\n    'CURRENT_TIMESTAMP',\n    'DATEADD',\n    'DATEDIFF',\n    'DATEFROMPARTS',\n    'DATENAME',\n    'DATEPART',\n    'DATETIME2FROMPARTS',\n    'DATETIMEFROMPARTS',\n    'DATETIMEOFFSETFROMPARTS',\n    'DAY',\n    'EOMONTH',\n    'GETDATE',\n    'GETUTCDATE',\n    'ISDATE',\n    'MONTH',\n    'SMALLDATETIMEFROMPARTS',\n    'SWITCHOFFSET',\n    'SYSDATETIME',\n    'SYSDATETIMEOFFSET',\n    'SYSUTCDATETIME',\n    'TIMEFROMPARTS',\n    'TODATETIMEOFFSET',\n    'YEAR',\n    // Logical\n    'CHOOSE',\n    'COALESCE',\n    'IIF',\n    'NULLIF',\n    // Mathematical\n    'ABS',\n    'ACOS',\n    'ASIN',\n    'ATAN',\n    'ATN2',\n    'CEILING',\n    'COS',\n    'COT',\n    'DEGREES',\n    'EXP',\n    'FLOOR',\n    'LOG',\n    'LOG10',\n    'PI',\n    'POWER',\n    'RADIANS',\n    'RAND',\n    'ROUND',\n    'SIGN',\n    'SIN',\n    'SQRT',\n    'SQUARE',\n    'TAN',\n    // Metadata\n    'APP_NAME',\n    'APPLOCK_MODE',\n    'APPLOCK_TEST',\n    'ASSEMBLYPROPERTY',\n    'COL_LENGTH',\n    'COL_NAME',\n    'COLUMNPROPERTY',\n    'DATABASE_PRINCIPAL_ID',\n    'DATABASEPROPERTYEX',\n    'DB_ID',\n    'DB_NAME',\n    'FILE_ID',\n    'FILE_IDEX',\n    'FILE_NAME',\n    'FILEGROUP_ID',\n    'FILEGROUP_NAME',\n    'FILEGROUPPROPERTY',\n    'FILEPROPERTY',\n    'FULLTEXTCATALOGPROPERTY',\n    'FULLTEXTSERVICEPROPERTY',\n    'INDEX_COL',\n    'INDEXKEY_PROPERTY',\n    'INDEXPROPERTY',\n    'OBJECT_DEFINITION',\n    'OBJECT_ID',\n    'OBJECT_NAME',\n    'OBJECT_SCHEMA_NAME',\n    'OBJECTPROPERTY',\n    'OBJECTPROPERTYEX',\n    'ORIGINAL_DB_NAME',\n    'PARSENAME',\n    'SCHEMA_ID',\n    'SCHEMA_NAME',\n    'SCOPE_IDENTITY',\n    'SERVERPROPERTY',\n    'STATS_DATE',\n    'TYPE_ID',\n    'TYPE_NAME',\n    'TYPEPROPERTY',\n    // Ranking\n    'DENSE_RANK',\n    'NTILE',\n    'RANK',\n    'ROW_NUMBER',\n    // Replication\n    'PUBLISHINGSERVERNAME',\n    // Rowset\n    'OPENDATASOURCE',\n    'OPENQUERY',\n    'OPENROWSET',\n    'OPENXML',\n    // Security\n    'CERTENCODED',\n    'CERTPRIVATEKEY',\n    'CURRENT_USER',\n    'HAS_DBACCESS',\n    'HAS_PERMS_BY_NAME',\n    'IS_MEMBER',\n    'IS_ROLEMEMBER',\n    'IS_SRVROLEMEMBER',\n    'LOGINPROPERTY',\n    'ORIGINAL_LOGIN',\n    'PERMISSIONS',\n    'PWDENCRYPT',\n    'PWDCOMPARE',\n    'SESSION_USER',\n    'SESSIONPROPERTY',\n    'SUSER_ID',\n    'SUSER_NAME',\n    'SUSER_SID',\n    'SUSER_SNAME',\n    'SYSTEM_USER',\n    'USER',\n    'USER_ID',\n    'USER_NAME',\n    // String\n    'ASCII',\n    'CHAR',\n    'CHARINDEX',\n    'CONCAT',\n    'DIFFERENCE',\n    'FORMAT',\n    'LEFT',\n    'LEN',\n    'LOWER',\n    'LTRIM',\n    'NCHAR',\n    'PATINDEX',\n    'QUOTENAME',\n    'REPLACE',\n    'REPLICATE',\n    'REVERSE',\n    'RIGHT',\n    'RTRIM',\n    'SOUNDEX',\n    'SPACE',\n    'STR',\n    'STUFF',\n    'SUBSTRING',\n    'UNICODE',\n    'UPPER',\n    // System\n    'BINARY_CHECKSUM',\n    'CHECKSUM',\n    'CONNECTIONPROPERTY',\n    'CONTEXT_INFO',\n    'CURRENT_REQUEST_ID',\n    'ERROR_LINE',\n    'ERROR_NUMBER',\n    'ERROR_MESSAGE',\n    'ERROR_PROCEDURE',\n    'ERROR_SEVERITY',\n    'ERROR_STATE',\n    'FORMATMESSAGE',\n    'GETANSINULL',\n    'GET_FILESTREAM_TRANSACTION_CONTEXT',\n    'HOST_ID',\n    'HOST_NAME',\n    'ISNULL',\n    'ISNUMERIC',\n    'MIN_ACTIVE_ROWVERSION',\n    'NEWID',\n    'NEWSEQUENTIALID',\n    'ROWCOUNT_BIG',\n    'XACT_STATE',\n    // TextImage\n    'TEXTPTR',\n    'TEXTVALID',\n    // Trigger\n    'COLUMNS_UPDATED',\n    'EVENTDATA',\n    'TRIGGER_NESTLEVEL',\n    'UPDATE',\n    // ChangeTracking\n    'CHANGETABLE',\n    'CHANGE_TRACKING_CONTEXT',\n    'CHANGE_TRACKING_CURRENT_VERSION',\n    'CHANGE_TRACKING_IS_COLUMN_IN_MASK',\n    'CHANGE_TRACKING_MIN_VALID_VERSION',\n    // FullTextSearch\n    'CONTAINSTABLE',\n    'FREETEXTTABLE',\n    // SemanticTextSearch\n    'SEMANTICKEYPHRASETABLE',\n    'SEMANTICSIMILARITYDETAILSTABLE',\n    'SEMANTICSIMILARITYTABLE',\n    // FileStream\n    'FILETABLEROOTPATH',\n    'GETFILENAMESPACEPATH',\n    'GETPATHLOCATOR',\n    'PATHNAME',\n    // ServiceBroker\n    'GET_TRANSMISSION_STATUS',\n  ],\n  builtinVariables: [\n    // Configuration\n    '@@DATEFIRST',\n    '@@DBTS',\n    '@@LANGID',\n    '@@LANGUAGE',\n    '@@LOCK_TIMEOUT',\n    '@@MAX_CONNECTIONS',\n    '@@MAX_PRECISION',\n    '@@NESTLEVEL',\n    '@@OPTIONS',\n    '@@REMSERVER',\n    '@@SERVERNAME',\n    '@@SERVICENAME',\n    '@@SPID',\n    '@@TEXTSIZE',\n    '@@VERSION',\n    // Cursor\n    '@@CURSOR_ROWS',\n    '@@FETCH_STATUS',\n    // Datetime\n    '@@DATEFIRST',\n    // Metadata\n    '@@PROCID',\n    // System\n    '@@ERROR',\n    '@@IDENTITY',\n    '@@ROWCOUNT',\n    '@@TRANCOUNT',\n    // Stats\n    '@@CONNECTIONS',\n    '@@CPU_BUSY',\n    '@@IDLE',\n    '@@IO_BUSY',\n    '@@PACKET_ERRORS',\n    '@@PACK_RECEIVED',\n    '@@PACK_SENT',\n    '@@TIMETICKS',\n    '@@TOTAL_ERRORS',\n    '@@TOTAL_READ',\n    '@@TOTAL_WRITE',\n  ],\n  pseudoColumns: ['$ACTION', '$IDENTITY', '$ROWGUID', '$PARTITION'],\n  tokenizer: {\n    root: [\n      { include: '@templateVariables' },\n      { include: '@macros' },\n      { include: '@comments' },\n      { include: '@whitespace' },\n      { include: '@pseudoColumns' },\n      { include: '@numbers' },\n      { include: '@strings' },\n      { include: '@complexIdentifiers' },\n      { include: '@scopes' },\n      { include: '@schemaTable' },\n      [/[;,.]/, 'delimiter'],\n      [/[()]/, '@brackets'],\n      [\n        /[\\w@#$|<|>|=|!|%|&|+|\\|-|*|/|~|^]+/,\n        {\n          cases: {\n            '@operators': 'operator',\n            '@comparisonOperators': 'operator',\n            '@logicalOperators': 'operator',\n            '@builtinVariables': 'predefined',\n            '@builtinFunctions': 'predefined',\n            '@keywords': 'keyword',\n            '@default': 'identifier',\n          },\n        },\n      ],\n    ],\n    templateVariables: [[/\\$[a-zA-Z0-9]+/, 'variable']],\n    macros: [[/\\$__[a-zA-Z0-9-_]+/, 'type']],\n    schemaTable: [\n      [/(\\w+)\\./, 'identifier'],\n      [/(\\w+\\.\\w+)/, 'identifier'],\n    ],\n    whitespace: [[/\\s+/, 'white']],\n    comments: [\n      [/--+.*/, 'comment'],\n      [/\\/\\*/, { token: 'comment.quote', next: '@comment' }],\n    ],\n    comment: [\n      [/[^*/]+/, 'comment'],\n      // Not supporting nested comments, as nested comments seem to not be standard?\n      // i.e. http://stackoverflow.com/questions/728172/are-there-multiline-comment-delimiters-in-sql-that-are-vendor-agnostic\n      // [/\\/\\*/, { token: 'comment.quote', next: '@push' }],    // nested comment not allowed :-(\n      [/\\*\\//, { token: 'comment.quote', next: '@pop' }],\n      [/./, 'comment'],\n    ],\n    pseudoColumns: [\n      [\n        /[$][A-Za-z_][\\w@#$]*/,\n        {\n          cases: {\n            '@pseudoColumns': 'predefined',\n            '@default': 'identifier',\n          },\n        },\n      ],\n    ],\n    numbers: [\n      [/0[xX][0-9a-fA-F]*/, 'number'],\n      [/[$][+-]*\\d*(\\.\\d*)?/, 'number'],\n      [/((\\d+(\\.\\d*)?)|(\\.\\d+))([eE][\\-+]?\\d+)?/, 'number'],\n    ],\n    strings: [\n      [/N'/, { token: 'string', next: '@string' }],\n      [/'/, { token: 'string', next: '@string' }],\n    ],\n    string: [\n      [/[^']+/, 'string'],\n      [/''/, 'string'],\n      [/'/, { token: 'string', next: '@pop' }],\n    ],\n    complexIdentifiers: [\n      [/\\[/, { token: 'identifier.quote', next: '@bracketedIdentifier' }],\n      [/\"/, { token: 'identifier.quote', next: '@quotedIdentifier' }],\n    ],\n    bracketedIdentifier: [\n      [/[^\\]]+/, 'identifier'],\n      [/]]/, 'identifier'],\n      [/]/, { token: 'identifier.quote', next: '@pop' }],\n    ],\n    quotedIdentifier: [\n      [/[^\"]+/, 'identifier'],\n      [/\"\"/, 'identifier'],\n      [/\"/, { token: 'identifier.quote', next: '@pop' }],\n    ],\n    scopes: [\n      [/BEGIN\\s+(DISTRIBUTED\\s+)?TRAN(SACTION)?\\b/i, 'keyword'],\n      [/BEGIN\\s+TRY\\b/i, { token: 'keyword.try' }],\n      [/END\\s+TRY\\b/i, { token: 'keyword.try' }],\n      [/BEGIN\\s+CATCH\\b/i, { token: 'keyword.catch' }],\n      [/END\\s+CATCH\\b/i, { token: 'keyword.catch' }],\n      [/(BEGIN|CASE)\\b/i, { token: 'keyword.block' }],\n      [/END\\b/i, { token: 'keyword.block' }],\n      [/WHEN\\b/i, { token: 'keyword.choice' }],\n      [/THEN\\b/i, { token: 'keyword.choice' }],\n    ],\n  },\n};\n","import { FROM, SCHEMA, SELECT } from '../standardSql/language';\nimport { TokenType } from '../types';\nimport { LinkedToken } from './LinkedToken';\n\nexport const getSelectToken = (currentToken: LinkedToken | null) =>\n  currentToken?.getPreviousOfType(TokenType.Keyword, SELECT) ?? null;\n\nexport const getSelectStatisticToken = (currentToken: LinkedToken | null) => {\n  const assumedStatisticToken = getSelectToken(currentToken)?.getNextNonWhiteSpaceToken();\n  return assumedStatisticToken?.isVariable() || assumedStatisticToken?.isFunction() ? assumedStatisticToken : null;\n};\n\nexport const getMetricNameToken = (currentToken: LinkedToken | null) => {\n  // statistic function is followed by `(` and then an argument\n  const assumedMetricNameToken = getSelectStatisticToken(currentToken)?.next?.next;\n  return assumedMetricNameToken?.isVariable() || assumedMetricNameToken?.isIdentifier() ? assumedMetricNameToken : null;\n};\n\nexport const getFromKeywordToken = (currentToken: LinkedToken | null) => {\n  const selectToken = getSelectToken(currentToken);\n  return selectToken?.getNextOfType(TokenType.Keyword, FROM);\n};\n\nexport const getNamespaceToken = (currentToken: LinkedToken | null) => {\n  const fromToken = getFromKeywordToken(currentToken);\n  const nextNonWhiteSpace = fromToken?.getNextNonWhiteSpaceToken();\n\n  if (\n    nextNonWhiteSpace?.isDoubleQuotedString() ||\n    (nextNonWhiteSpace?.isVariable() && nextNonWhiteSpace?.value.toUpperCase() !== SCHEMA)\n  ) {\n    // schema is not used\n    return nextNonWhiteSpace;\n  } else if (nextNonWhiteSpace?.isKeyword() && nextNonWhiteSpace.next?.is(TokenType.Parenthesis, '(')) {\n    // schema is specified\n    const assumedNamespaceToken = nextNonWhiteSpace.next?.next;\n    if (assumedNamespaceToken?.isDoubleQuotedString() || assumedNamespaceToken?.isVariable()) {\n      return assumedNamespaceToken;\n    }\n  }\n  return null;\n};\nexport const getTableToken = (currentToken: LinkedToken | null) => {\n  const fromToken = getFromKeywordToken(currentToken);\n  const nextNonWhiteSpace = fromToken?.getNextNonWhiteSpaceToken();\n  if (nextNonWhiteSpace?.isVariable()) {\n    // TODO: resolve column from variable?\n    return null;\n  } else if (nextNonWhiteSpace?.isKeyword() && nextNonWhiteSpace.next?.is(TokenType.Parenthesis, '(')) {\n    return null;\n  } else {\n    return nextNonWhiteSpace;\n  }\n};\n\nexport const defaultTableNameParser = (token: LinkedToken | null | undefined) => {\n  const parts = token?.value.split('.');\n\n  if (parts?.length === 1) {\n    return { table: parts[0] };\n  } else if (parts?.length === 2) {\n    return { schema: parts[0], table: parts[1] };\n  }\n\n  return null;\n};\n","export const TRIGGER_SUGGEST = {\n  id: 'editor.action.triggerSuggest',\n  title: '',\n};\n","import { Registry } from '@grafana/data';\nimport { getTemplateSrv } from '@grafana/runtime';\nimport { TRIGGER_SUGGEST } from '../utils/commands';\nimport {\n  CompletionItemInsertTextRule,\n  CompletionItemKind,\n  CompletionItemPriority,\n  MacroType,\n  OperatorType,\n  SuggestionKind,\n} from '../types';\nimport { ASC, DESC } from './language';\nimport { FunctionsRegistryItem, MacrosRegistryItem, OperatorsRegistryItem, SuggestionsRegistryItem } from './types';\n\n/**\n * This registry glues particular SuggestionKind with an async function that provides completion items for it.\n * To add a new suggestion kind, SQLEditor should be configured with a provider that implements customSuggestionKinds.\n */\n\nexport const initStandardSuggestions =\n  (\n    functions: Registry<FunctionsRegistryItem>,\n    operators: Registry<OperatorsRegistryItem>,\n    macros: Registry<MacrosRegistryItem>\n  ) =>\n  (): SuggestionsRegistryItem[] =>\n    [\n      {\n        id: SuggestionKind.SelectKeyword,\n        name: SuggestionKind.SelectKeyword,\n        suggestions: (_, m) =>\n          Promise.resolve([\n            {\n              label: `SELECT <column>`,\n              insertText: `SELECT $0`,\n              insertTextRules: CompletionItemInsertTextRule.InsertAsSnippet,\n              kind: CompletionItemKind.Snippet,\n              command: TRIGGER_SUGGEST,\n              sortText: CompletionItemPriority.Medium,\n            },\n            {\n              label: `SELECT <column> FROM <table>`,\n              insertText: `SELECT $2 FROM $1`,\n              insertTextRules: CompletionItemInsertTextRule.InsertAsSnippet,\n              kind: CompletionItemKind.Snippet,\n              command: TRIGGER_SUGGEST,\n              sortText: CompletionItemPriority.Medium,\n            },\n          ]),\n      },\n      {\n        id: SuggestionKind.TemplateVariables,\n        name: SuggestionKind.TemplateVariables,\n        suggestions: (_, m) => {\n          const templateSrv = getTemplateSrv();\n          if (!templateSrv) {\n            return Promise.resolve([]);\n          }\n\n          return Promise.resolve(\n            templateSrv.getVariables().map((variable) => {\n              const label = `\\$${variable.name}`;\n              const val = templateSrv.replace(label);\n              return {\n                label,\n                detail: `(Template Variable) ${val}`,\n                kind: CompletionItemKind.Snippet,\n                documentation: `(Template Variable) ${val}`,\n                insertText: `\\\\$${variable.name} `,\n                insertTextRules: CompletionItemInsertTextRule.InsertAsSnippet,\n                command: TRIGGER_SUGGEST,\n                sortText: CompletionItemPriority.Low,\n              };\n            })\n          );\n        },\n      },\n      {\n        id: SuggestionKind.SelectMacro,\n        name: SuggestionKind.SelectMacro,\n        suggestions: (_, m) =>\n          Promise.resolve([\n            ...macros\n              .list()\n              .filter((m) => m.type === MacroType.Value || m.type === MacroType.Column)\n              .map(createMacroSuggestionItem),\n          ]),\n      },\n      {\n        id: SuggestionKind.TableMacro,\n        name: SuggestionKind.TableMacro,\n        suggestions: (_, m) =>\n          Promise.resolve([\n            ...macros\n              .list()\n              .filter((m) => m.type === MacroType.Table)\n              .map(createMacroSuggestionItem),\n          ]),\n      },\n      {\n        id: SuggestionKind.GroupMacro,\n        name: SuggestionKind.GroupMacro,\n        suggestions: (_, m) =>\n          Promise.resolve([\n            ...macros\n              .list()\n              .filter((m) => m.type === MacroType.Group)\n              .map(createMacroSuggestionItem),\n          ]),\n      },\n      {\n        id: SuggestionKind.FilterMacro,\n        name: SuggestionKind.FilterMacro,\n        suggestions: (_, m) =>\n          Promise.resolve([\n            ...macros\n              .list()\n              .filter((m) => m.type === MacroType.Filter)\n              .map(createMacroSuggestionItem),\n          ]),\n      },\n      {\n        id: SuggestionKind.WithKeyword,\n        name: SuggestionKind.WithKeyword,\n        suggestions: (_, m) =>\n          Promise.resolve([\n            {\n              label: `WITH <alias> AS ( ... )`,\n              insertText: `WITH $1  AS ( $2 )`,\n              insertTextRules: CompletionItemInsertTextRule.InsertAsSnippet,\n              kind: CompletionItemKind.Snippet,\n              command: TRIGGER_SUGGEST,\n              sortText: CompletionItemPriority.Medium,\n            },\n          ]),\n      },\n      {\n        id: SuggestionKind.StarWildCard,\n        name: SuggestionKind.StarWildCard,\n        suggestions: (_, m) =>\n          Promise.resolve([\n            {\n              label: '*',\n              insertText: `* $0`,\n              insertTextRules: CompletionItemInsertTextRule.InsertAsSnippet,\n              kind: CompletionItemKind.Field,\n              command: TRIGGER_SUGGEST,\n              sortText: CompletionItemPriority.High,\n            },\n          ]),\n      },\n      {\n        id: SuggestionKind.FunctionsWithArguments,\n        name: SuggestionKind.FunctionsWithArguments,\n        suggestions: (_, m) =>\n          Promise.resolve([\n            ...functions.list().map((f) => ({\n              label: f.name,\n              insertText: `${f.name}($0)`,\n              documentation: f.description,\n              insertTextRules: CompletionItemInsertTextRule.InsertAsSnippet,\n              kind: CompletionItemKind.Function,\n              command: TRIGGER_SUGGEST,\n              sortText: CompletionItemPriority.MediumLow,\n            })),\n          ]),\n      },\n      {\n        id: SuggestionKind.FunctionsWithoutArguments,\n        name: SuggestionKind.FunctionsWithoutArguments,\n        suggestions: (_, m) =>\n          Promise.resolve([\n            ...functions.list().map((f) => ({\n              label: f.name,\n              insertText: `${f.name}()`,\n              documentation: f.description,\n              insertTextRules: CompletionItemInsertTextRule.InsertAsSnippet,\n              kind: CompletionItemKind.Function,\n              command: TRIGGER_SUGGEST,\n              sortText: CompletionItemPriority.MediumHigh,\n            })),\n          ]),\n      },\n      {\n        id: SuggestionKind.FromKeyword,\n        name: SuggestionKind.FromKeyword,\n        suggestions: (_, m) =>\n          Promise.resolve([\n            {\n              label: 'FROM',\n              insertText: `FROM $0`,\n              command: TRIGGER_SUGGEST,\n              insertTextRules: CompletionItemInsertTextRule.InsertAsSnippet,\n              kind: CompletionItemKind.Keyword,\n            },\n          ]),\n      },\n      {\n        id: SuggestionKind.Schemas,\n        name: SuggestionKind.Schemas,\n        suggestions: (_, m) => Promise.resolve([]),\n      },\n      {\n        id: SuggestionKind.Tables,\n        name: SuggestionKind.Tables,\n        suggestions: (_, m) => Promise.resolve([]),\n      },\n      {\n        id: SuggestionKind.Columns,\n        name: SuggestionKind.Columns,\n        suggestions: (_, m) => Promise.resolve([]),\n      },\n      {\n        id: SuggestionKind.LogicalOperators,\n        name: SuggestionKind.LogicalOperators,\n        suggestions: (_, m) =>\n          Promise.resolve(\n            operators\n              .list()\n              .filter((o) => o.type === OperatorType.Logical)\n              .map((o) => ({\n                label: o.operator,\n                insertText: `${o.operator} `,\n                documentation: o.description,\n                command: TRIGGER_SUGGEST,\n                sortText: CompletionItemPriority.MediumHigh,\n                kind: CompletionItemKind.Operator,\n              }))\n          ),\n      },\n      {\n        id: SuggestionKind.WhereKeyword,\n        name: SuggestionKind.WhereKeyword,\n        suggestions: (_, m) =>\n          Promise.resolve([\n            {\n              label: 'WHERE',\n              insertText: `WHERE `,\n              command: TRIGGER_SUGGEST,\n              sortText: CompletionItemPriority.MediumHigh,\n              kind: CompletionItemKind.Keyword,\n            },\n          ]),\n      },\n      {\n        id: SuggestionKind.ComparisonOperators,\n        name: SuggestionKind.ComparisonOperators,\n        suggestions: (_, m) =>\n          Promise.resolve([\n            ...operators\n              .list()\n              .filter((o) => o.type === OperatorType.Comparison)\n              .map((o) => ({\n                label: o.operator,\n                insertText: `${o.operator} `,\n                documentation: o.description,\n                command: TRIGGER_SUGGEST,\n                sortText: CompletionItemPriority.MediumHigh,\n                kind: CompletionItemKind.Operator,\n              })),\n            {\n              label: 'IN (...)',\n              insertText: `IN ( $0 )`,\n              command: TRIGGER_SUGGEST,\n              sortText: CompletionItemPriority.Medium,\n              kind: CompletionItemKind.Operator,\n              insertTextRules: CompletionItemInsertTextRule.InsertAsSnippet,\n            },\n            {\n              label: 'NOT IN (...)',\n              insertText: `NOT IN ( $0 )`,\n              command: TRIGGER_SUGGEST,\n              sortText: CompletionItemPriority.Medium,\n              kind: CompletionItemKind.Operator,\n              insertTextRules: CompletionItemInsertTextRule.InsertAsSnippet,\n            },\n            {\n              label: 'IS',\n              insertText: `IS`,\n              command: TRIGGER_SUGGEST,\n              sortText: CompletionItemPriority.Medium,\n              kind: CompletionItemKind.Operator,\n            },\n            {\n              label: 'IS NOT',\n              insertText: `IS NOT`,\n              command: TRIGGER_SUGGEST,\n              sortText: CompletionItemPriority.Medium,\n              kind: CompletionItemKind.Operator,\n            },\n          ]),\n      },\n      {\n        id: SuggestionKind.GroupByKeywords,\n        name: SuggestionKind.GroupByKeywords,\n        suggestions: (_, m) =>\n          Promise.resolve([\n            {\n              label: 'GROUP BY',\n              insertText: `GROUP BY `,\n              command: TRIGGER_SUGGEST,\n              sortText: CompletionItemPriority.MediumHigh,\n              kind: CompletionItemKind.Keyword,\n            },\n          ]),\n      },\n      {\n        id: SuggestionKind.OrderByKeywords,\n        name: SuggestionKind.OrderByKeywords,\n        suggestions: (_, m) =>\n          Promise.resolve([\n            {\n              label: 'ORDER BY',\n              insertText: `ORDER BY `,\n              command: TRIGGER_SUGGEST,\n              sortText: CompletionItemPriority.Medium,\n              kind: CompletionItemKind.Keyword,\n            },\n            {\n              label: 'ORDER BY(ascending)',\n              insertText: `ORDER BY $1 ASC `,\n              command: TRIGGER_SUGGEST,\n              sortText: CompletionItemPriority.MediumLow,\n              kind: CompletionItemKind.Snippet,\n              insertTextRules: CompletionItemInsertTextRule.InsertAsSnippet,\n            },\n            {\n              label: 'ORDER BY(descending)',\n              insertText: `ORDER BY $1 DESC`,\n              command: TRIGGER_SUGGEST,\n              sortText: CompletionItemPriority.MediumLow,\n              kind: CompletionItemKind.Snippet,\n              insertTextRules: CompletionItemInsertTextRule.InsertAsSnippet,\n            },\n          ]),\n      },\n      {\n        id: SuggestionKind.LimitKeyword,\n        name: SuggestionKind.LimitKeyword,\n        suggestions: (_, m) =>\n          Promise.resolve([\n            {\n              label: 'LIMIT',\n              insertText: `LIMIT `,\n              command: TRIGGER_SUGGEST,\n              sortText: CompletionItemPriority.MediumLow,\n              kind: CompletionItemKind.Keyword,\n            },\n          ]),\n      },\n      {\n        id: SuggestionKind.SortOrderDirectionKeyword,\n        name: SuggestionKind.SortOrderDirectionKeyword,\n        suggestions: (_, m) =>\n          Promise.resolve(\n            [ASC, DESC].map((o) => ({\n              label: o,\n              insertText: `${o} `,\n              command: TRIGGER_SUGGEST,\n              kind: CompletionItemKind.Keyword,\n            }))\n          ),\n      },\n      {\n        id: SuggestionKind.NotKeyword,\n        name: SuggestionKind.NotKeyword,\n        suggestions: () =>\n          Promise.resolve([\n            {\n              label: 'NOT',\n              insertText: 'NOT',\n              command: TRIGGER_SUGGEST,\n              kind: CompletionItemKind.Keyword,\n              sortText: CompletionItemPriority.High,\n            },\n          ]),\n      },\n      {\n        id: SuggestionKind.BoolValues,\n        name: SuggestionKind.BoolValues,\n        suggestions: () =>\n          Promise.resolve(\n            ['TRUE', 'FALSE'].map((o) => ({\n              label: o,\n              insertText: `${o}`,\n              command: TRIGGER_SUGGEST,\n              kind: CompletionItemKind.Keyword,\n              sortText: CompletionItemPriority.Medium,\n            }))\n          ),\n      },\n      {\n        id: SuggestionKind.NullValue,\n        name: SuggestionKind.NullValue,\n        suggestions: () =>\n          Promise.resolve(\n            ['NULL'].map((o) => ({\n              label: o,\n              insertText: `${o}`,\n              command: TRIGGER_SUGGEST,\n              kind: CompletionItemKind.Keyword,\n              sortText: CompletionItemPriority.Low,\n            }))\n          ),\n      },\n    ];\n\nfunction createMacroSuggestionItem(m: MacrosRegistryItem) {\n  return {\n    label: m.name,\n    insertText: `${'\\\\' + m.text}${argsString(m.args)} `,\n    insertTextRules: CompletionItemInsertTextRule.InsertAsSnippet,\n    kind: CompletionItemKind.Snippet,\n    documentation: m.description,\n    command: TRIGGER_SUGGEST,\n  };\n}\n\nfunction argsString(args?: string[]): string {\n  if (!args) {\n    return '()';\n  }\n  return '('.concat(args.map((t, i) => `\\${${i}:${t}}`).join(', ')).concat(')');\n}\n","import { StatementPosition, TokenType } from '../types';\nimport { AND, AS, ASC, BY, DESC, FROM, GROUP, ORDER, SELECT, WHERE, WITH } from './language';\nimport { StatementPositionResolversRegistryItem } from './types';\n\nexport function initStatementPositionResolvers(): StatementPositionResolversRegistryItem[] {\n  return [\n    {\n      id: StatementPosition.SelectKeyword,\n      name: StatementPosition.SelectKeyword,\n      resolve: (currentToken, previousKeyword, previousNonWhiteSpace, previousIsSlash) =>\n        Boolean(\n          currentToken === null ||\n            (currentToken.isWhiteSpace() && currentToken.previous === null) ||\n            currentToken.is(TokenType.Keyword, SELECT) ||\n            (currentToken.is(TokenType.Keyword, SELECT) && currentToken.previous === null) ||\n            previousIsSlash ||\n            (currentToken.isIdentifier() && (previousIsSlash || currentToken?.previous === null)) ||\n            (currentToken.isIdentifier() && SELECT.startsWith(currentToken.value.toLowerCase()))\n        ),\n    },\n    {\n      id: StatementPosition.WithKeyword,\n      name: StatementPosition.WithKeyword,\n      resolve: (currentToken, previousKeyword, previousNonWhiteSpace, previousIsSlash) =>\n        Boolean(\n          currentToken === null ||\n            (currentToken.isWhiteSpace() && currentToken.previous === null) ||\n            (currentToken.is(TokenType.Keyword, WITH) && currentToken.previous === null) ||\n            (currentToken.isIdentifier() && WITH.toLowerCase().startsWith(currentToken.value.toLowerCase()))\n        ),\n    },\n    {\n      id: StatementPosition.AfterSelectKeyword,\n      name: StatementPosition.AfterSelectKeyword,\n      resolve: (currentToken, previousKeyword, previousNonWhiteSpace, previousIsSlash) =>\n        Boolean(previousNonWhiteSpace?.value.toLowerCase() === SELECT),\n    },\n    {\n      id: StatementPosition.AfterSelectArguments,\n      name: StatementPosition.AfterSelectArguments,\n      resolve: (currentToken, previousKeyword, previousNonWhiteSpace, previousIsSlash) => {\n        return Boolean(previousKeyword?.value.toLowerCase() === SELECT && previousNonWhiteSpace?.value === ',');\n      },\n    },\n    {\n      id: StatementPosition.AfterSelectFuncFirstArgument,\n      name: StatementPosition.AfterSelectFuncFirstArgument,\n      resolve: (currentToken, previousKeyword, previousNonWhiteSpace, previousIsSlash) => {\n        return Boolean(\n          (previousKeyword?.value.toLowerCase() === SELECT || previousKeyword?.value.toLowerCase() === AS) &&\n            (previousNonWhiteSpace?.is(TokenType.Parenthesis, '(') || currentToken?.is(TokenType.Parenthesis, '()'))\n        );\n      },\n    },\n    {\n      id: StatementPosition.AfterWhereFunctionArgument,\n      name: StatementPosition.AfterWhereFunctionArgument,\n      resolve: (currentToken, previousKeyword, previousNonWhiteSpace, previousIsSlash) => {\n        return Boolean(\n          previousKeyword?.is(TokenType.Keyword, WHERE) &&\n            (previousNonWhiteSpace?.is(TokenType.Parenthesis, '(') || currentToken?.is(TokenType.Parenthesis, '()'))\n        );\n      },\n    },\n    {\n      id: StatementPosition.AfterGroupBy,\n      name: StatementPosition.AfterGroupBy,\n      resolve: (currentToken, previousKeyword, previousNonWhiteSpace, previousIsSlash) =>\n        Boolean(\n          previousKeyword?.is(TokenType.Keyword, BY) &&\n            previousKeyword?.getPreviousKeyword()?.is(TokenType.Keyword, GROUP) &&\n            (previousNonWhiteSpace?.isIdentifier() ||\n              previousNonWhiteSpace?.isDoubleQuotedString() ||\n              previousNonWhiteSpace?.is(TokenType.Parenthesis, ')') ||\n              previousNonWhiteSpace?.is(TokenType.Parenthesis, '()'))\n        ),\n    },\n    {\n      id: StatementPosition.SelectAlias,\n      name: StatementPosition.SelectAlias,\n      resolve: (currentToken, previousKeyword, previousNonWhiteSpace, previousIsSlash) => {\n        if (previousNonWhiteSpace?.value === ',' && previousKeyword?.value.toLowerCase() === AS) {\n          return true;\n        }\n\n        return false;\n      },\n    },\n\n    {\n      id: StatementPosition.FromKeyword,\n      name: StatementPosition.FromKeyword,\n      resolve: (currentToken, previousKeyword, previousNonWhiteSpace, previousIsSlash) => {\n        // cloudwatch specific commented out\n        // Boolean(previousKeyword?.value === SELECT && previousNonWhiteSpace?.isParenthesis()),\n        return Boolean(\n          (previousKeyword?.value.toLowerCase() === SELECT && previousNonWhiteSpace?.value !== ',') ||\n            ((currentToken?.isKeyword() || currentToken?.isIdentifier()) &&\n              FROM.toLowerCase().startsWith(currentToken.value.toLowerCase()))\n        );\n      },\n    },\n    {\n      id: StatementPosition.AfterFromKeyword,\n      name: StatementPosition.AfterFromKeyword,\n      resolve: (currentToken, previousKeyword, previousNonWhiteSpace, previousIsSlash) =>\n        Boolean(!currentToken?.value.includes('.') && previousNonWhiteSpace?.value.toLowerCase() === FROM),\n    },\n    {\n      id: StatementPosition.AfterSchema,\n      name: StatementPosition.AfterSchema,\n      resolve: (currentToken, previousKeyword, previousNonWhiteSpace, previousIsSlash) => {\n        // depending on whether the schema was the last token in the query or not, current token might be whitespace or dot. if whitespace, just use the previous token\n        if (currentToken?.isWhiteSpace() && currentToken?.next) {\n          currentToken = currentToken?.previous;\n          previousNonWhiteSpace = currentToken!.getPreviousNonWhiteSpaceToken();\n        }\n        return Boolean(\n          currentToken?.isIdentifier() &&\n            currentToken?.value.endsWith('.') &&\n            previousNonWhiteSpace?.value.toLowerCase() === FROM\n        );\n      },\n    },\n    {\n      id: StatementPosition.AfterFrom,\n      name: StatementPosition.AfterFrom,\n      resolve: (currentToken, previousKeyword, previousNonWhiteSpace, previousIsSlash) =>\n        Boolean(\n          (previousKeyword?.value.toLowerCase() === FROM && previousNonWhiteSpace?.isDoubleQuotedString()) ||\n            (previousKeyword?.value.toLowerCase() === FROM && previousNonWhiteSpace?.isIdentifier()) ||\n            (previousKeyword?.value.toLowerCase() === FROM && previousNonWhiteSpace?.isVariable())\n          //  cloudwatch specific\n          // (previousKeyword?.value === SCHEMA && previousNonWhiteSpace?.is(TokenType.Parenthesis, ')'))\n        ),\n    },\n    {\n      id: StatementPosition.AfterTable,\n      name: StatementPosition.AfterTable,\n      resolve: (currentToken, previousKeyword, previousNonWhiteSpace, previousIsSlash) => {\n        return Boolean(\n          previousKeyword?.value.toLowerCase() === FROM &&\n            (previousNonWhiteSpace?.isVariable() ||\n              (previousNonWhiteSpace?.value !== '' && previousNonWhiteSpace?.value.toLowerCase() !== FROM))\n        );\n      },\n    },\n    {\n      id: StatementPosition.WhereKeyword,\n      name: StatementPosition.WhereKeyword,\n      resolve: (currentToken, previousKeyword, previousNonWhiteSpace, previousIsSlash) =>\n        Boolean(\n          previousKeyword?.value.toLowerCase() === WHERE &&\n            (previousNonWhiteSpace?.isKeyword() ||\n              previousNonWhiteSpace?.is(TokenType.Parenthesis, '(') ||\n              previousNonWhiteSpace?.is(TokenType.Operator, AND))\n        ),\n    },\n    {\n      id: StatementPosition.WhereComparisonOperator,\n      name: StatementPosition.WhereComparisonOperator,\n      resolve: (currentToken, previousKeyword, previousNonWhiteSpace, previousIsSlash) =>\n        Boolean(\n          previousKeyword?.value.toLowerCase() === WHERE &&\n            !previousNonWhiteSpace?.getPreviousNonWhiteSpaceToken()?.isOperator() &&\n            !currentToken?.is(TokenType.Delimiter, '.') &&\n            !currentToken?.isParenthesis() &&\n            (previousNonWhiteSpace?.isIdentifier() || previousNonWhiteSpace?.isDoubleQuotedString())\n        ),\n    },\n    {\n      id: StatementPosition.WhereValue,\n      name: StatementPosition.WhereValue,\n      resolve: (currentToken, previousKeyword, previousNonWhiteSpace, previousIsSlash) =>\n        Boolean(previousKeyword?.value.toLowerCase() === WHERE && previousNonWhiteSpace?.isOperator()),\n    },\n    {\n      id: StatementPosition.AfterWhereValue,\n      name: StatementPosition.AfterWhereValue,\n      resolve: (currentToken, previousKeyword, previousNonWhiteSpace, previousIsSlash) => {\n        return Boolean(\n          previousKeyword?.value.toLowerCase() === WHERE &&\n            (previousNonWhiteSpace?.is(TokenType.Operator, 'and') ||\n              previousNonWhiteSpace?.is(TokenType.Operator, 'or') ||\n              previousNonWhiteSpace?.isString() ||\n              previousNonWhiteSpace?.isNumber() ||\n              previousNonWhiteSpace?.is(TokenType.Parenthesis, ')') ||\n              previousNonWhiteSpace?.is(TokenType.Parenthesis, '()') ||\n              previousNonWhiteSpace?.isTemplateVariable() ||\n              (previousNonWhiteSpace?.is(TokenType.IdentifierQuote) &&\n                previousNonWhiteSpace.getPreviousNonWhiteSpaceToken()?.is(TokenType.Identifier) &&\n                previousNonWhiteSpace\n                  ?.getPreviousNonWhiteSpaceToken()\n                  ?.getPreviousNonWhiteSpaceToken()\n                  ?.is(TokenType.IdentifierQuote)))\n        );\n      },\n    },\n    {\n      id: StatementPosition.AfterGroupByKeywords,\n      name: StatementPosition.AfterGroupByKeywords,\n      resolve: (currentToken, previousKeyword, previousNonWhiteSpace, previousIsSlash) =>\n        Boolean(\n          previousKeyword?.is(TokenType.Keyword, BY) &&\n            previousKeyword?.getPreviousKeyword()?.is(TokenType.Keyword, GROUP) &&\n            (previousNonWhiteSpace?.is(TokenType.Keyword, BY) || previousNonWhiteSpace?.is(TokenType.Delimiter, ','))\n        ),\n    },\n    {\n      id: StatementPosition.AfterGroupByFunctionArgument,\n      name: StatementPosition.AfterGroupByFunctionArgument,\n      resolve: (currentToken, previousKeyword, previousNonWhiteSpace, previousIsSlash) => {\n        return Boolean(\n          previousKeyword?.is(TokenType.Keyword, BY) &&\n            previousKeyword?.getPreviousKeyword()?.is(TokenType.Keyword, GROUP) &&\n            (previousNonWhiteSpace?.is(TokenType.Parenthesis, '(') || currentToken?.is(TokenType.Parenthesis, '()'))\n        );\n      },\n    },\n    {\n      id: StatementPosition.AfterOrderByKeywords,\n      name: StatementPosition.AfterOrderByKeywords,\n      resolve: (currentToken, previousKeyword, previousNonWhiteSpace, previousIsSlash) =>\n        Boolean(\n          previousNonWhiteSpace?.is(TokenType.Keyword, BY) &&\n            previousNonWhiteSpace?.getPreviousKeyword()?.is(TokenType.Keyword, ORDER)\n        ),\n    },\n    {\n      id: StatementPosition.AfterOrderByFunction,\n      name: StatementPosition.AfterOrderByFunction,\n      resolve: (currentToken, previousKeyword, previousNonWhiteSpace, previousIsSlash) =>\n        Boolean(\n          previousKeyword?.is(TokenType.Keyword, BY) &&\n            previousKeyword?.getPreviousKeyword()?.is(TokenType.Keyword, ORDER) &&\n            previousNonWhiteSpace?.is(TokenType.Parenthesis) &&\n            previousNonWhiteSpace?.getPreviousNonWhiteSpaceToken()?.is(TokenType.Function)\n        ),\n    },\n    {\n      id: StatementPosition.AfterOrderByDirection,\n      name: StatementPosition.AfterOrderByDirection,\n      resolve: (currentToken, previousKeyword, previousNonWhiteSpace, previousIsSlash) =>\n        Boolean(previousKeyword?.is(TokenType.Keyword, DESC) || previousKeyword?.is(TokenType.Keyword, ASC)),\n    },\n    {\n      id: StatementPosition.AfterIsOperator,\n      name: StatementPosition.AfterIsOperator,\n      resolve: (currentToken, previousKeyword, previousNonWhiteSpace, previousIsSlash) => {\n        return Boolean(previousNonWhiteSpace?.is(TokenType.Operator, 'IS'));\n      },\n    },\n    {\n      id: StatementPosition.AfterIsNotOperator,\n      name: StatementPosition.AfterIsNotOperator,\n      resolve: (currentToken, previousKeyword, previousNonWhiteSpace, previousIsSlash) => {\n        return Boolean(\n          previousNonWhiteSpace?.is(TokenType.Operator, 'NOT') &&\n            previousNonWhiteSpace.getPreviousNonWhiteSpaceToken()?.is(TokenType.Operator, 'IS')\n        );\n      },\n    },\n  ];\n}\n","import { attachDebugger, createLogger } from '@grafana/ui';\n\nlet sqlEditorLogger = { logger: () => {} };\nlet sqlEditorLog: (...t: any[]) => void = () => {};\n\nif (attachDebugger && createLogger) {\n  sqlEditorLogger = createLogger('SQLEditor');\n  sqlEditorLog = sqlEditorLogger.logger;\n  attachDebugger('sqleditor', undefined, sqlEditorLogger as any);\n}\n\nexport { sqlEditorLog, sqlEditorLogger };\n","import { MacroType } from '../types';\nimport { MacrosRegistryItem } from './types';\n\nconst COLUMN = 'column',\n  RELATIVE_TIME_STRING = \"'5m'\";\n\nexport const MACROS: MacrosRegistryItem[] = [\n  {\n    id: '$__timeFilter(dateColumn)',\n    name: '$__timeFilter(dateColumn)',\n    text: '$__timeFilter',\n    args: [COLUMN],\n    type: MacroType.Filter,\n    description:\n      'Will be replaced by a time range filter using the specified column name. For example, dateColumn BETWEEN FROM_UNIXTIME(1494410783) AND FROM_UNIXTIME(1494410983)',\n  },\n  {\n    id: '$__timeFrom()',\n    name: '$__timeFrom()',\n    text: '$__timeFrom',\n    args: [],\n    type: MacroType.Filter,\n    description:\n      'Will be replaced by the start of the currently active time selection. For example, FROM_UNIXTIME(1494410783)',\n  },\n  {\n    id: '$__timeTo()',\n    name: '$__timeTo()',\n    text: '$__timeTo',\n    args: [],\n    type: MacroType.Filter,\n    description:\n      'Will be replaced by the end of the currently active time selection. For example, FROM_UNIXTIME(1494410983)',\n  },\n  {\n    id: \"$__timeGroup(dateColumn, '5m')\",\n    name: \"$__timeGroup(dateColumn, '5m')\",\n    text: '$__timeGroup',\n    args: [COLUMN, RELATIVE_TIME_STRING],\n    type: MacroType.Value,\n    description:\n      'Will be replaced by an expression usable in GROUP BY clause. For example, *cast(cast(UNIX_TIMESTAMP(dateColumn)/(300) as signed)*300 as signed),*',\n  },\n  {\n    id: '$__table',\n    name: '$__table',\n    text: '$__table',\n    args: [],\n    type: MacroType.Table,\n    description: 'Will be replaced by the query table.',\n  },\n  {\n    id: '$__column',\n    name: '$__column',\n    text: '$__column',\n    args: [],\n    type: MacroType.Column,\n    description: 'Will be replaced by the query column.',\n  },\n];\n\n/*\n  {\n    id: \"$__timeGroupAlias(dateColumn, '5m', fill)\",\n    name: \"$__timeGroupAlias(dateColumn, '5m', fill)\",\n    text: \"$__timeGroup\",\n    args: [COLUMN, RELATIVE_TIME_STRING , FILL_TYPE],\n    type: MacroType.Group,\n    description:\n      \"Will be replaced by an expression usable in GROUP BY clause. For example, *cast(cast(UNIX_TIMESTAMP(dateColumn)/(300) as signed)*300 as signed),* with an added column alias\",\n  },\n  {\n    id: \"$__unixEpochFilter(dateColumn)\",\n    name: \"$__unixEpochFilter(dateColumn)\",\n    text: \"$__unixEpochFilter\",\n    args: [COLUMN],\n    type: MacroType.Filter,\n    description:\n      \"Will be replaced by a time range filter using the specified column name with times represented as Unix timestamp. For example, dateColumn > 1494410783 AND dateColumn < 1494497183\",\n  },\n  {\n    id: \"$__unixEpochFrom()\",\n    name: \"$__unixEpochFrom()\",\n    text: \"$__unixEpochFrom\",\n    args: [],\n    type: MacroType.Value,\n    description:\n      \"Will be replaced by the start of the currently active time selection as Unix timestamp. For example, 1494410783\",\n  },\n  {\n    id: \"$__unixEpochTo()\",\n    name: \"$__unixEpochTo()\",\n    text: \"$__unixEpochTo\",\n    args: [],\n    type: MacroType.Value,\n    description:\n      \"Will be replaced by the end of the currently active time selection as Unix timestamp. For example, 1494410783\",\n  },\n  {\n    id: \"$__unixEpochNanoFilter(dateColumn)\",\n    name: \"$__unixEpochNanoFilter(dateColumn)\",\n    text: \"$__unixEpochNanoFilter\",\n    args: [COLUMN],\n    type: MacroType.Filter,\n    description:\n      \"Will be replaced by a time range filter using the specified column name with times represented as nanosecond timestamp. For example, dateColumn > 1494410783152415214 AND dateColumn < 1494497183142514872\",\n  },\n  {\n    id: \"$__unixEpochNanoFrom()\",\n    name: \"$__unixEpochNanoFrom()\",\n    text: \"$__unixEpochNanoFrom\",\n    args: [],\n    type: MacroType.Value,\n    description:\n      \"Will be replaced by the start of the currently active time selection as nanosecond timestamp. For example, 1494410783152415214\",\n  },\n  {\n    id: \"$__unixEpochNanoTo()\",\n    name: \"$__unixEpochNanoTo()\",\n    text: \"$__unixEpochNanoTo\",\n    args: [],\n    type: MacroType.Value,\n    description:\n      \"Will be replaced by the end of the currently active time selection as nanosecond timestamp. For example, 1494410783152415214\",\n  },\n  {\n    id: \"$__unixEpochGroup(dateColumn, '5m')\",\n    name: \"$__unixEpochGroup(dateColumn, '5m')\",\n    text: \"$__unixEpochGroup\",\n    args: [COLUMN, RELATIVE_TIME_STRING],\n    type: MacroType.Group,\n    description:\n      \"Will be replaced by an expression usable in GROUP BY clause. For values stored as unix timestamp.\",\n  },\n  {\n    id: \"$__unixEpochGroup(dateColumn, '5m', fill)\",\n    name: \"$__unixEpochGroup(dateColumn, '5m', fill)\",\n    text: \"$__unixEpochGroup\",\n    args: [COLUMN, RELATIVE_TIME_STRING, FILL_TYPE],\n    type: MacroType.Group,\n    description:\n      \"Will be replaced by an expression usable in GROUP BY clause. For values stored as unix timestamp. Missing values can be filled with 0, NULL or previous\",\n  },\n  {\n    id: \"$__timeEpoch(dateColumn, )\",\n    name: \"$__timeEpoch(dateColumn)\",\n    text: \"$__timeEpoch\",\n    args: [COLUMN],\n    type: MacroType.Value,\n    description:\n      \"Will be replaced by an expression to convert to a UNIX timestamp and rename the column to time_sec. For example, UNIX_TIMESTAMP(dateColumn) as time_sec\",\n  },\n  {\n    id: \"$__time(dateColumn)\",\n    name: \"$__time(dateColumn)\",\n    text: \"$__time\",\n    args: [COLUMN],\n    type: MacroType.Value,\n    description:\n      \"Will be replaced by an expression to convert to a UNIX timestamp and rename the column to time_sec. For example, UNIX_TIMESTAMP(dateColumn) as time_sec\",\n  },\n  {\n    id: \"$__timeGroup(dateColumn, '5m', fill)\",\n    name: \"$__timeGroup(dateColumn, '5m', fill)\",\n    text: \"$__timeGroup\",\n    args: [COLUMN, RELATIVE_TIME_STRING, FILL_TYPE],\n    type: MacroType.Value,\n    description:\n      \"Will be replaced by an expression usable in GROUP BY clause. For example, *cast(cast(UNIX_TIMESTAMP(dateColumn)/(300) as signed)*300 as signed),* missing values can be filled with 0, NULL or previous\",\n  },\n  */\n","import { Monaco } from '@grafana/ui';\nimport { Operator, OperatorType, SQLCompletionItemProvider } from '../types';\nimport { MACROS } from './macros';\nimport { SQLMonarchLanguage } from './types';\n\nexport function getStandardSQLCompletionProvider(\n  monaco: Monaco,\n  language: SQLMonarchLanguage\n): SQLCompletionItemProvider {\n  const provider: SQLCompletionItemProvider = { triggerCharacters: ['.', ' ', '$', ',', '(', \"'\"] };\n  if (language && Array.isArray(language.builtinFunctions)) {\n    provider.supportedFunctions = () => language.builtinFunctions!.map((f) => ({ id: f, name: f }));\n  }\n\n  const operators: Operator[] = [];\n  if (language?.comparisonOperators?.length) {\n    operators.push(\n      ...language.comparisonOperators.map((f) => ({\n        id: f.toLocaleLowerCase(),\n        operator: f,\n        type: OperatorType.Comparison,\n      }))\n    );\n  }\n\n  // some languages in the monaco language registry don't specify logical operators, only operators. if so, suggest them instead\n  language.logicalOperators = language.logicalOperators ?? language.operators;\n  if (language?.logicalOperators?.length) {\n    operators.push(\n      ...language.logicalOperators.map((f) => ({ id: f.toLocaleLowerCase(), operator: f, type: OperatorType.Logical }))\n    );\n  }\n\n  provider.supportedOperators = () => operators;\n\n  provider.supportedMacros = () => MACROS;\n\n  return provider;\n}\n","import { LanguageDefinition } from '../components/SQLEditor';\nimport { getStandardSQLCompletionProvider } from './standardSQLCompletionItemProvider';\n\nconst standardSQLLanguageDefinition: LanguageDefinition = {\n  id: 'standardSql',\n  extensions: ['.sql'],\n  aliases: ['sql'],\n  mimetypes: [],\n  loader: () => import('./language'),\n  \n  completionProvider: getStandardSQLCompletionProvider,\n};\n\nexport default standardSQLLanguageDefinition;\n","import { CodeEditor, Monaco, monacoTypes } from '@grafana/ui';\nimport React, { useCallback, useEffect, useMemo, useRef } from 'react';\nimport { getStatementPosition } from '../standardSql/getStatementPosition';\nimport { getStandardSuggestions } from '../standardSql/getStandardSuggestions';\nimport { initSuggestionsKindRegistry, SuggestionKindRegistryItem } from '../standardSql/suggestionsKindRegistry';\nimport {\n  CompletionItemInsertTextRule,\n  CompletionItemKind,\n  CompletionItemPriority,\n  CustomSuggestion,\n  PositionContext,\n  SQLCompletionItemProvider,\n  StatementPosition,\n  SuggestionKind,\n} from '../types';\nimport { getSuggestionKinds } from '../utils/getSuggestionKind';\nimport { linkedTokenBuilder } from '../utils/linkedTokenBuilder';\nimport { defaultTableNameParser, getTableToken } from '../utils/tokenUtils';\nimport { TRIGGER_SUGGEST } from '../utils/commands';\nimport { v4 } from 'uuid';\nimport { Registry } from '@grafana/data';\nimport {\n  FunctionsRegistryItem,\n  MacrosRegistryItem,\n  OperatorsRegistryItem,\n  SQLMonarchLanguage,\n  StatementPositionResolversRegistryItem,\n  SuggestionsRegistryItem,\n} from '../standardSql/types';\nimport { initStandardSuggestions } from '../standardSql/standardSuggestionsRegistry';\nimport { initStatementPositionResolvers } from '../standardSql/statementPositionResolversRegistry';\nimport { sqlEditorLog } from '../utils/debugger';\nimport standardSQLLanguageDefinition from '../standardSql/definition';\nimport { getStandardSQLCompletionProvider } from '../standardSql/standardSQLCompletionItemProvider';\n\nconst STANDARD_SQL_LANGUAGE = 'sql';\n\nexport interface LanguageDefinition extends monacoTypes.languages.ILanguageExtensionPoint {\n  loader?: (module: any) => Promise<{\n    language: SQLMonarchLanguage;\n    conf: monacoTypes.languages.LanguageConfiguration;\n  }>;\n  // Provides API for customizing the autocomplete\n  completionProvider?: (m: Monaco, language: SQLMonarchLanguage) => SQLCompletionItemProvider;\n  // Function that returns a formatted query\n  formatter?: (q: string) => string;\n}\n\ninterface SQLEditorProps {\n  query: string;\n  /**\n   * Use for inspecting the query as it changes. I.e. for validation.\n   */\n  onChange?: (q: string, processQuery: boolean) => void;\n  onBlur?: () => void;\n  language?: LanguageDefinition;\n  children?: (props: { formatQuery: () => void }) => React.ReactNode;\n  width?: number;\n  height?: number;\n}\n\ninterface LanguageRegistries {\n  functions: Registry<FunctionsRegistryItem>;\n  operators: Registry<OperatorsRegistryItem>;\n  suggestionKinds: Registry<SuggestionKindRegistryItem>;\n  positionResolvers: Registry<StatementPositionResolversRegistryItem>;\n  macros: Registry<MacrosRegistryItem>;\n}\n\nconst LANGUAGES_CACHE = new Map<string, LanguageRegistries>();\nconst INSTANCE_CACHE = new Map<string, Registry<SuggestionsRegistryItem>>();\n\nexport const SQLEditor: React.FC<SQLEditorProps> = ({\n  children,\n  onBlur,\n  onChange,\n  query,\n  language = { id: STANDARD_SQL_LANGUAGE },\n  width,\n  height,\n}) => {\n  const monacoRef = useRef<monacoTypes.editor.IStandaloneCodeEditor | null>(null);\n  const langUid = useRef<string>();\n  // create unique language id for each SQLEditor instance\n  const id = useMemo(() => {\n    const uid = v4();\n    const id = `${language.id}-${uid}`;\n    langUid.current = id;\n    return id;\n  }, [language.id]);\n\n  useEffect(() => {\n    return () => {\n      if (langUid.current) {\n        INSTANCE_CACHE.delete(langUid.current);\n      }\n      sqlEditorLog(`Removing instance cache ${langUid.current}`, false, INSTANCE_CACHE);\n    };\n  }, []);\n\n  const formatQuery = useCallback(() => {\n    if (monacoRef.current) {\n      monacoRef.current.getAction('editor.action.formatDocument').run();\n    }\n  }, []);\n\n  return (\n    <div style={{ width }}>\n      <CodeEditor\n        height={height || '240px'}\n        // -2px to compensate for borders width\n        width={width ? `${width - 2}px` : undefined}\n        language={id}\n        value={query}\n        onBlur={(v) => {\n          onChange && onChange(v, false);\n          onBlur && onBlur();\n        }}\n        showMiniMap={false}\n        showLineNumbers={true}\n        // Using onEditorDidMount instead of onBeforeEditorMount to support Grafana < 8.2.x\n        onEditorDidMount={(editor, m) => {\n          monacoRef.current = editor;\n          editor.onDidChangeModelContent((e) => {\n            const text = editor.getValue();\n            if (onChange) {\n              onChange(text, false);\n            }\n          });\n\n          editor.addCommand(m.KeyMod.CtrlCmd | m.KeyCode.Enter, () => {\n            const text = editor.getValue();\n            if (onChange) {\n              onChange(text, true);\n            }\n          });\n\n          editor.onKeyUp((e) => {\n            // keyCode 84 is . (DOT)\n            if (e.keyCode === 84) {\n              editor.trigger(TRIGGER_SUGGEST.id, TRIGGER_SUGGEST.id, {});\n            }\n          });\n          registerLanguageAndSuggestions(m, language, id);\n        }}\n      />\n      {children && children({ formatQuery })}\n    </div>\n  );\n};\n\n// There's three ways to define Monaco language:\n// 1. Leave language.id empty or set it to 'sql'. This will load a standard sql language definition, including syntax highlighting and tokenization for\n// common Grafana entities such as macros and template variables\n// 2. Provide a custom language and load it via the async LanguageDefinition.loader callback\n// 3. Specify a language.id that exists in the Monaco language registry. A custom completion item provider can still be provided.\n// If not, the standard SQL completion item provider will be used. See available languages here: https://github.com/microsoft/monaco-editor/tree/main/src/basic-languages\n// If a custom language is specified, its LanguageDefinition will be merged with the LanguageDefinition for standard SQL. This allows the consumer to only\n// override parts of the LanguageDefinition, such as for example the completion item provider.\nconst resolveLanguage = (monaco: Monaco, languageDefinitionProp: LanguageDefinition): LanguageDefinition => {\n  if (languageDefinitionProp?.id !== STANDARD_SQL_LANGUAGE && !languageDefinitionProp.loader) {\n    sqlEditorLog(`Loading language '${languageDefinitionProp?.id}' from Monaco registry`, false);\n    const allLangs = monaco.languages.getLanguages();\n    const custom = allLangs.find(({ id }) => id === languageDefinitionProp?.id);\n    if (!custom) {\n      throw Error(`Unknown Monaco language ${languageDefinitionProp?.id}`);\n    }\n\n    return { completionProvider: getStandardSQLCompletionProvider, ...custom, ...languageDefinitionProp };\n  }\n\n  return {\n    ...standardSQLLanguageDefinition,\n    ...languageDefinitionProp,\n  };\n};\n\nexport const registerLanguageAndSuggestions = async (monaco: Monaco, l: LanguageDefinition, lid: string) => {\n  const languageDefinition = resolveLanguage(monaco, l);\n  if (!languageDefinition.loader) {\n    return;\n  }\n  const { language, conf } = await languageDefinition.loader(monaco);\n  monaco.languages.register({ id: lid });\n  monaco.languages.setMonarchTokensProvider(lid, { ...language });\n  monaco.languages.setLanguageConfiguration(lid, { ...conf });\n\n  if (languageDefinition.formatter) {\n    monaco.languages.registerDocumentFormattingEditProvider(lid, {\n      provideDocumentFormattingEdits: (model) => {\n        const formatted = l.formatter?.(model.getValue());\n        return [\n          {\n            range: model.getFullModelRange(),\n            text: formatted || '',\n          },\n        ];\n      },\n    });\n  }\n\n  if (languageDefinition.completionProvider) {\n    const customProvider = languageDefinition.completionProvider(monaco, language);\n    extendStandardRegistries(l.id, lid, customProvider);\n    const languageSuggestionsRegistries = LANGUAGES_CACHE.get(l.id)!;\n    const instanceSuggestionsRegistry = INSTANCE_CACHE.get(lid)!;\n\n    const completionProvider: monacoTypes.languages.CompletionItemProvider['provideCompletionItems'] = async (\n      model,\n      position,\n      context,\n      token\n    ) => {\n      const currentToken = linkedTokenBuilder(monaco, model, position, lid);\n      const statementPosition = getStatementPosition(currentToken, languageSuggestionsRegistries.positionResolvers);\n      const kind = getSuggestionKinds(statementPosition, languageSuggestionsRegistries.suggestionKinds);\n\n      sqlEditorLog('Statement position', false, statementPosition);\n      sqlEditorLog('Suggestion kinds', false, kind);\n\n      const ctx: PositionContext = {\n        position,\n        currentToken,\n        statementPosition,\n        kind,\n        range: monaco.Range.fromPositions(position),\n      };\n\n      const stdSuggestions = await getStandardSuggestions(monaco, currentToken, kind, ctx, instanceSuggestionsRegistry);\n\n      return {\n        suggestions: stdSuggestions,\n      };\n    };\n\n    monaco.languages.registerCompletionItemProvider(lid, {\n      ...customProvider,\n      provideCompletionItems: completionProvider,\n    });\n  }\n};\n\nfunction extendStandardRegistries(id: string, lid: string, customProvider: SQLCompletionItemProvider) {\n  if (!LANGUAGES_CACHE.has(id)) {\n    initializeLanguageRegistries(id);\n  }\n\n  const languageRegistries = LANGUAGES_CACHE.get(id)!;\n\n  if (!INSTANCE_CACHE.has(lid)) {\n    INSTANCE_CACHE.set(\n      lid,\n      new Registry(\n        initStandardSuggestions(languageRegistries.functions, languageRegistries.operators, languageRegistries.macros)\n      )\n    );\n  }\n\n  const instanceSuggestionsRegistry = INSTANCE_CACHE.get(lid)!;\n\n  if (customProvider.supportedFunctions) {\n    for (const func of customProvider.supportedFunctions()) {\n      const exists = languageRegistries.functions.getIfExists(func.id);\n      if (!exists) {\n        languageRegistries.functions.register(func);\n      }\n    }\n  }\n\n  if (customProvider.supportedOperators) {\n    for (const op of customProvider.supportedOperators()) {\n      const exists = languageRegistries.operators.getIfExists(op.id);\n      if (!exists) {\n        languageRegistries.operators.register({ ...op, name: op.id });\n      }\n    }\n  }\n\n  if (customProvider.supportedMacros) {\n    for (const macro of customProvider.supportedMacros()) {\n      const exists = languageRegistries.macros.getIfExists(macro.id);\n      if (!exists) {\n        languageRegistries.macros.register({ ...macro, name: macro.id });\n      }\n    }\n  }\n\n  if (customProvider.customStatementPlacement) {\n    for (const placement of customProvider.customStatementPlacement()) {\n      const exists = languageRegistries.positionResolvers.getIfExists(placement.id);\n      if (!exists) {\n        languageRegistries.positionResolvers.register({\n          ...placement,\n          id: placement.id as StatementPosition,\n          name: placement.id,\n        });\n        languageRegistries.suggestionKinds.register({\n          id: placement.id as StatementPosition,\n          name: placement.id,\n          kind: [],\n        });\n      } else {\n        // Allow extension to the built-in placement resolvers\n        const origResolve = exists.resolve;\n        exists.resolve = (...args) => {\n          const ext = placement.resolve(...args);\n          if (placement.overrideDefault) {\n            return ext;\n          }\n          const orig = origResolve(...args);\n          return orig || ext;\n        };\n      }\n    }\n  }\n\n  if (customProvider.customSuggestionKinds) {\n    for (const kind of customProvider.customSuggestionKinds()) {\n      kind.applyTo?.forEach((applyTo) => {\n        const exists = languageRegistries.suggestionKinds.getIfExists(applyTo);\n        if (exists) {\n          // avoid duplicates\n          if (exists.kind.indexOf(kind.id as SuggestionKind) === -1) {\n            exists.kind.push(kind.id as SuggestionKind);\n          }\n        }\n      });\n\n      if (kind.overrideDefault) {\n        const stbBehaviour = instanceSuggestionsRegistry.get(kind.id);\n        if (stbBehaviour !== undefined) {\n          stbBehaviour.suggestions = kind.suggestionsResolver;\n          continue;\n        }\n      }\n\n      instanceSuggestionsRegistry.register({\n        id: kind.id as SuggestionKind,\n        name: kind.id,\n        suggestions: kind.suggestionsResolver,\n      });\n    }\n  }\n\n  if (customProvider.schemas) {\n    const stbBehaviour = instanceSuggestionsRegistry.get(SuggestionKind.Schemas);\n    const s = stbBehaviour.suggestions;\n    stbBehaviour.suggestions = async (ctx, m) => {\n      const standardSchemas = await s(ctx, m);\n      if (!customProvider.schemas) {\n        return [...standardSchemas];\n      }\n      const customSchemas = await customProvider.schemas.resolve();\n      const customSchemaCompletionItems = customSchemas.map((x) => ({\n        label: x.name,\n        insertText: `${x.completion ?? x.name}.`,\n        command: TRIGGER_SUGGEST,\n        kind: CompletionItemKind.Module, // it's nice to differentiate schemas from tables\n        sortText: CompletionItemPriority.High,\n      }));\n      return [...standardSchemas, ...customSchemaCompletionItems];\n    };\n  }\n\n  if (customProvider.tables) {\n    const stbBehaviour = instanceSuggestionsRegistry.get(SuggestionKind.Tables);\n    const s = stbBehaviour.suggestions;\n    stbBehaviour.suggestions = async (ctx, m) => {\n      const o = await s(ctx, m);\n      const tableToken = getTableToken(ctx.currentToken);\n      const tableNameParser = customProvider.tables?.parseName ?? defaultTableNameParser;\n\n      const tableIdentifier = tableNameParser(tableToken);\n\n      const oo = ((await customProvider.tables?.resolve?.(tableIdentifier)) ?? []).map((x) => ({\n        label: x.name,\n        // if no custom completion is provided it's safe to move cursor further in the statement\n        insertText: `${x.completion ?? x.name}${x.completion === x.name ? ' $0' : ''}`,\n        insertTextRules: CompletionItemInsertTextRule.InsertAsSnippet,\n        command: TRIGGER_SUGGEST,\n        kind: CompletionItemKind.Field,\n        sortText: CompletionItemPriority.MediumHigh,\n      }));\n      return [...o, ...oo];\n    };\n  }\n\n  if (customProvider.columns) {\n    const stbBehaviour = instanceSuggestionsRegistry.get(SuggestionKind.Columns);\n    const s = stbBehaviour.suggestions;\n    stbBehaviour.suggestions = async (ctx, m) => {\n      const o = await s(ctx, m);\n      const tableToken = getTableToken(ctx.currentToken);\n      let tableIdentifier;\n      const tableNameParser = customProvider.tables?.parseName ?? defaultTableNameParser;\n\n      if (tableToken && tableToken.value) {\n        tableIdentifier = tableNameParser(tableToken);\n      }\n\n      let oo: CustomSuggestion[] = [];\n      if (tableIdentifier) {\n        const columns = await customProvider.columns?.resolve!(tableIdentifier);\n        oo = columns\n          ? columns.map<CustomSuggestion>((x) => ({\n              label: x.name,\n              insertText: x.completion ?? x.name,\n              kind: CompletionItemKind.Field,\n              sortText: CompletionItemPriority.High,\n              detail: x.type,\n              documentation: x.description,\n            }))\n          : [];\n      }\n      return [...o, ...oo];\n    };\n  }\n}\n\n/**\n * Initializes language specific registries that are treated as singletons\n */\nfunction initializeLanguageRegistries(id: string) {\n  if (!LANGUAGES_CACHE.has(id)) {\n    LANGUAGES_CACHE.set(id, {\n      functions: new Registry(),\n      operators: new Registry(),\n      suggestionKinds: new Registry(initSuggestionsKindRegistry),\n      positionResolvers: new Registry(initStatementPositionResolvers),\n      macros: new Registry(),\n    });\n  }\n\n  return LANGUAGES_CACHE.get(id)!;\n}\n","import { monacoTypes } from '@grafana/ui';\nimport { TestQueryModel } from '../../test-utils/types';\n\nexport const singleLineFullQuery: TestQueryModel = {\n  query: `SELECT column1, FROM table1 WHERE column1 = \"value1\" GROUP BY column1 ORDER BY column1 DESC LIMIT 10`,\n  tokens: [\n    [\n      {\n        offset: 0,\n        type: 'keyword.sql',\n        language: 'sql',\n      },\n      {\n        offset: 6,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 7,\n        type: 'identifier.sql',\n        language: 'sql',\n      },\n      {\n        offset: 14,\n        type: 'delimiter.sql',\n        language: 'sql',\n      },\n      {\n        offset: 15,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 16,\n        type: 'keyword.sql',\n        language: 'sql',\n      },\n      {\n        offset: 20,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 21,\n        type: 'identifier.sql',\n        language: 'sql',\n      },\n      {\n        offset: 27,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 28,\n        type: 'keyword.sql',\n        language: 'sql',\n      },\n      {\n        offset: 33,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 34,\n        type: 'identifier.sql',\n        language: 'sql',\n      },\n      {\n        offset: 41,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 42,\n        type: 'operator.sql',\n        language: 'sql',\n      },\n      {\n        offset: 43,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 44,\n        type: 'identifier.quote.sql',\n        language: 'sql',\n      },\n      {\n        offset: 45,\n        type: 'identifier.sql',\n        language: 'sql',\n      },\n      {\n        offset: 51,\n        type: 'identifier.quote.sql',\n        language: 'sql',\n      },\n      {\n        offset: 52,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 53,\n        type: 'keyword.sql',\n        language: 'sql',\n      },\n      {\n        offset: 58,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 59,\n        type: 'keyword.sql',\n        language: 'sql',\n      },\n      {\n        offset: 61,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 62,\n        type: 'identifier.sql',\n        language: 'sql',\n      },\n      {\n        offset: 69,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 70,\n        type: 'keyword.sql',\n        language: 'sql',\n      },\n      {\n        offset: 75,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 76,\n        type: 'keyword.sql',\n        language: 'sql',\n      },\n      {\n        offset: 78,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 79,\n        type: 'identifier.sql',\n        language: 'sql',\n      },\n      {\n        offset: 86,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 87,\n        type: 'keyword.sql',\n        language: 'sql',\n      },\n      {\n        offset: 91,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 92,\n        type: 'keyword.sql',\n        language: 'sql',\n      },\n      {\n        offset: 97,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 98,\n        type: 'number.sql',\n        language: 'sql',\n      },\n      {\n        offset: 100,\n        type: 'delimiter.sql',\n        language: 'sql',\n      },\n    ],\n  ] as monacoTypes.Token[][],\n};\n","import { TestQueryModel } from '../../test-utils/types';\n\nexport const singleLineFullQueryWithAggregation: TestQueryModel = {\n  query: 'SELECT count(column1), FROM table1 WHERE column1 = \"value1\" GROUP BY column1 ORDER BY column1 DESC LIMIT 10;',\n  tokens: [\n    [\n      {\n        offset: 0,\n        type: 'keyword.sql',\n        language: 'sql',\n      },\n      {\n        offset: 6,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 7,\n        type: 'predefined.sql',\n        language: 'sql',\n      },\n      {\n        offset: 12,\n        type: 'delimiter.parenthesis.sql',\n        language: 'sql',\n      },\n      {\n        offset: 13,\n        type: 'identifier.sql',\n        language: 'sql',\n      },\n      {\n        offset: 20,\n        type: 'delimiter.parenthesis.sql',\n        language: 'sql',\n      },\n      {\n        offset: 21,\n        type: 'delimiter.sql',\n        language: 'sql',\n      },\n      {\n        offset: 22,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 23,\n        type: 'keyword.sql',\n        language: 'sql',\n      },\n      {\n        offset: 27,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 28,\n        type: 'identifier.sql',\n        language: 'sql',\n      },\n      {\n        offset: 34,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 35,\n        type: 'keyword.sql',\n        language: 'sql',\n      },\n      {\n        offset: 40,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 41,\n        type: 'identifier.sql',\n        language: 'sql',\n      },\n      {\n        offset: 48,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 49,\n        type: 'operator.sql',\n        language: 'sql',\n      },\n      {\n        offset: 50,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 51,\n        type: 'identifier.quote.sql',\n        language: 'sql',\n      },\n      {\n        offset: 52,\n        type: 'identifier.sql',\n        language: 'sql',\n      },\n      {\n        offset: 58,\n        type: 'identifier.quote.sql',\n        language: 'sql',\n      },\n      {\n        offset: 59,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 60,\n        type: 'keyword.sql',\n        language: 'sql',\n      },\n      {\n        offset: 65,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 66,\n        type: 'keyword.sql',\n        language: 'sql',\n      },\n      {\n        offset: 68,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 69,\n        type: 'identifier.sql',\n        language: 'sql',\n      },\n      {\n        offset: 76,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 77,\n        type: 'keyword.sql',\n        language: 'sql',\n      },\n      {\n        offset: 82,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 83,\n        type: 'keyword.sql',\n        language: 'sql',\n      },\n      {\n        offset: 85,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 86,\n        type: 'identifier.sql',\n        language: 'sql',\n      },\n      {\n        offset: 93,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 94,\n        type: 'keyword.sql',\n        language: 'sql',\n      },\n      {\n        offset: 98,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 99,\n        type: 'keyword.sql',\n        language: 'sql',\n      },\n      {\n        offset: 104,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 105,\n        type: 'number.sql',\n        language: 'sql',\n      },\n      {\n        offset: 107,\n        type: 'delimiter.sql',\n        language: 'sql',\n      },\n    ],\n  ],\n};\n","import { TestQueryModel } from '../../test-utils/types';\n\nexport const multiLineFullQuery: TestQueryModel = {\n  query: `SELECT column1,\n  FROM table1\n\n  WHERE column1 = \"value1\"\n  GROUP BY column1 ORDER BY column1 DESC\n  LIMIT 10;`,\n  tokens: [\n    [\n      {\n        offset: 0,\n        type: 'keyword.sql',\n        language: 'sql',\n      },\n      {\n        offset: 6,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 7,\n        type: 'identifier.sql',\n        language: 'sql',\n      },\n      {\n        offset: 14,\n        type: 'delimiter.sql',\n        language: 'sql',\n      },\n      {\n        offset: 15,\n        type: 'white.sql',\n        language: 'sql',\n      },\n    ],\n    [\n      {\n        offset: 0,\n        type: 'keyword.sql',\n        language: 'sql',\n      },\n      {\n        offset: 4,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 5,\n        type: 'identifier.sql',\n        language: 'sql',\n      },\n      {\n        offset: 11,\n        type: 'white.sql',\n        language: 'sql',\n      },\n    ],\n    [\n      {\n        offset: 0,\n        type: 'white.sql',\n        language: 'sql',\n      },\n    ],\n    [\n      {\n        offset: 0,\n        type: 'keyword.sql',\n        language: 'sql',\n      },\n      {\n        offset: 5,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 6,\n        type: 'identifier.sql',\n        language: 'sql',\n      },\n      {\n        offset: 13,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 14,\n        type: 'operator.sql',\n        language: 'sql',\n      },\n      {\n        offset: 15,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 16,\n        type: 'identifier.quote.sql',\n        language: 'sql',\n      },\n      {\n        offset: 17,\n        type: 'identifier.sql',\n        language: 'sql',\n      },\n      {\n        offset: 23,\n        type: 'identifier.quote.sql',\n        language: 'sql',\n      },\n      {\n        offset: 24,\n        type: 'white.sql',\n        language: 'sql',\n      },\n    ],\n    [\n      {\n        offset: 0,\n        type: 'keyword.sql',\n        language: 'sql',\n      },\n      {\n        offset: 5,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 6,\n        type: 'keyword.sql',\n        language: 'sql',\n      },\n      {\n        offset: 8,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 9,\n        type: 'identifier.sql',\n        language: 'sql',\n      },\n      {\n        offset: 16,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 17,\n        type: 'keyword.sql',\n        language: 'sql',\n      },\n      {\n        offset: 22,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 23,\n        type: 'keyword.sql',\n        language: 'sql',\n      },\n      {\n        offset: 25,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 26,\n        type: 'identifier.sql',\n        language: 'sql',\n      },\n      {\n        offset: 33,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 34,\n        type: 'keyword.sql',\n        language: 'sql',\n      },\n      {\n        offset: 38,\n        type: 'white.sql',\n        language: 'sql',\n      },\n    ],\n    [\n      {\n        offset: 0,\n        type: 'keyword.sql',\n        language: 'sql',\n      },\n      {\n        offset: 5,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 6,\n        type: 'number.sql',\n        language: 'sql',\n      },\n      {\n        offset: 8,\n        type: 'delimiter.sql',\n        language: 'sql',\n      },\n    ],\n  ],\n};\n","import { TestQueryModel } from '../../test-utils/types';\n\nexport const multiLineFullQueryWithAggregation: TestQueryModel = {\n  query: `SELECT count(column1),\n  FROM table1\n\n  WHERE column1 = \"value1\"\n  GROUP BY column1 ORDER BY column1 DESC\n  LIMIT 10;`,\n  tokens: [\n    [\n      {\n        offset: 0,\n        type: 'keyword.sql',\n        language: 'sql',\n      },\n      {\n        offset: 6,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 7,\n        type: 'predefined.sql',\n        language: 'sql',\n      },\n      {\n        offset: 12,\n        type: 'delimiter.parenthesis.sql',\n        language: 'sql',\n      },\n      {\n        offset: 13,\n        type: 'identifier.sql',\n        language: 'sql',\n      },\n      {\n        offset: 20,\n        type: 'delimiter.parenthesis.sql',\n        language: 'sql',\n      },\n      {\n        offset: 21,\n        type: 'delimiter.sql',\n        language: 'sql',\n      },\n      {\n        offset: 22,\n        type: 'white.sql',\n        language: 'sql',\n      },\n    ],\n    [\n      {\n        offset: 0,\n        type: 'keyword.sql',\n        language: 'sql',\n      },\n      {\n        offset: 4,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 5,\n        type: 'identifier.sql',\n        language: 'sql',\n      },\n      {\n        offset: 11,\n        type: 'white.sql',\n        language: 'sql',\n      },\n    ],\n    [\n      {\n        offset: 0,\n        type: 'white.sql',\n        language: 'sql',\n      },\n    ],\n    [\n      {\n        offset: 0,\n        type: 'keyword.sql',\n        language: 'sql',\n      },\n      {\n        offset: 5,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 6,\n        type: 'identifier.sql',\n        language: 'sql',\n      },\n      {\n        offset: 13,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 14,\n        type: 'operator.sql',\n        language: 'sql',\n      },\n      {\n        offset: 15,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 16,\n        type: 'identifier.quote.sql',\n        language: 'sql',\n      },\n      {\n        offset: 17,\n        type: 'identifier.sql',\n        language: 'sql',\n      },\n      {\n        offset: 23,\n        type: 'identifier.quote.sql',\n        language: 'sql',\n      },\n      {\n        offset: 24,\n        type: 'white.sql',\n        language: 'sql',\n      },\n    ],\n    [\n      {\n        offset: 0,\n        type: 'keyword.sql',\n        language: 'sql',\n      },\n      {\n        offset: 5,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 6,\n        type: 'keyword.sql',\n        language: 'sql',\n      },\n      {\n        offset: 8,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 9,\n        type: 'identifier.sql',\n        language: 'sql',\n      },\n      {\n        offset: 16,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 17,\n        type: 'keyword.sql',\n        language: 'sql',\n      },\n      {\n        offset: 22,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 23,\n        type: 'keyword.sql',\n        language: 'sql',\n      },\n      {\n        offset: 25,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 26,\n        type: 'identifier.sql',\n        language: 'sql',\n      },\n      {\n        offset: 33,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 34,\n        type: 'keyword.sql',\n        language: 'sql',\n      },\n      {\n        offset: 38,\n        type: 'white.sql',\n        language: 'sql',\n      },\n    ],\n    [\n      {\n        offset: 0,\n        type: 'keyword.sql',\n        language: 'sql',\n      },\n      {\n        offset: 5,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 6,\n        type: 'number.sql',\n        language: 'sql',\n      },\n      {\n        offset: 8,\n        type: 'delimiter.sql',\n        language: 'sql',\n      },\n    ],\n  ],\n};\n","import { TestQueryModel } from '../../test-utils/types';\n\nexport const singleLineEmptyQuery: TestQueryModel = {\n  query: '',\n  tokens: [],\n};\n","import { TestQueryModel } from '../../test-utils/types';\n\nexport const singleLineTwoQueries: TestQueryModel = {\n  query:\n    'SELECT column1, FROM table1 WHERE column1 = \"value1\" GROUP BY column1 ORDER BY column1 DESC LIMIT 10; SELECT column2, FROM table2 WHERE column2 = \"value2\" GROUP BY column1 ORDER BY column2 DESC LIMIT 10;',\n  tokens: [\n    [\n      {\n        offset: 0,\n        type: 'keyword.sql',\n        language: 'sql',\n      },\n      {\n        offset: 6,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 7,\n        type: 'identifier.sql',\n        language: 'sql',\n      },\n      {\n        offset: 14,\n        type: 'delimiter.sql',\n        language: 'sql',\n      },\n      {\n        offset: 15,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 16,\n        type: 'keyword.sql',\n        language: 'sql',\n      },\n      {\n        offset: 20,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 21,\n        type: 'identifier.sql',\n        language: 'sql',\n      },\n      {\n        offset: 27,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 28,\n        type: 'keyword.sql',\n        language: 'sql',\n      },\n      {\n        offset: 33,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 34,\n        type: 'identifier.sql',\n        language: 'sql',\n      },\n      {\n        offset: 41,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 42,\n        type: 'operator.sql',\n        language: 'sql',\n      },\n      {\n        offset: 43,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 44,\n        type: 'identifier.quote.sql',\n        language: 'sql',\n      },\n      {\n        offset: 45,\n        type: 'identifier.sql',\n        language: 'sql',\n      },\n      {\n        offset: 51,\n        type: 'identifier.quote.sql',\n        language: 'sql',\n      },\n      {\n        offset: 52,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 53,\n        type: 'keyword.sql',\n        language: 'sql',\n      },\n      {\n        offset: 58,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 59,\n        type: 'keyword.sql',\n        language: 'sql',\n      },\n      {\n        offset: 61,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 62,\n        type: 'identifier.sql',\n        language: 'sql',\n      },\n      {\n        offset: 69,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 70,\n        type: 'keyword.sql',\n        language: 'sql',\n      },\n      {\n        offset: 75,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 76,\n        type: 'keyword.sql',\n        language: 'sql',\n      },\n      {\n        offset: 78,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 79,\n        type: 'identifier.sql',\n        language: 'sql',\n      },\n      {\n        offset: 86,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 87,\n        type: 'keyword.sql',\n        language: 'sql',\n      },\n      {\n        offset: 91,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 92,\n        type: 'keyword.sql',\n        language: 'sql',\n      },\n      {\n        offset: 97,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 98,\n        type: 'number.sql',\n        language: 'sql',\n      },\n      {\n        offset: 100,\n        type: 'delimiter.sql',\n        language: 'sql',\n      },\n      {\n        offset: 101,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 102,\n        type: 'keyword.sql',\n        language: 'sql',\n      },\n      {\n        offset: 108,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 109,\n        type: 'identifier.sql',\n        language: 'sql',\n      },\n      {\n        offset: 116,\n        type: 'delimiter.sql',\n        language: 'sql',\n      },\n      {\n        offset: 117,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 118,\n        type: 'keyword.sql',\n        language: 'sql',\n      },\n      {\n        offset: 122,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 123,\n        type: 'identifier.sql',\n        language: 'sql',\n      },\n      {\n        offset: 129,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 130,\n        type: 'keyword.sql',\n        language: 'sql',\n      },\n      {\n        offset: 135,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 136,\n        type: 'identifier.sql',\n        language: 'sql',\n      },\n      {\n        offset: 143,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 144,\n        type: 'operator.sql',\n        language: 'sql',\n      },\n      {\n        offset: 145,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 146,\n        type: 'identifier.quote.sql',\n        language: 'sql',\n      },\n      {\n        offset: 147,\n        type: 'identifier.sql',\n        language: 'sql',\n      },\n      {\n        offset: 153,\n        type: 'identifier.quote.sql',\n        language: 'sql',\n      },\n      {\n        offset: 154,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 155,\n        type: 'keyword.sql',\n        language: 'sql',\n      },\n      {\n        offset: 160,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 161,\n        type: 'keyword.sql',\n        language: 'sql',\n      },\n      {\n        offset: 163,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 164,\n        type: 'identifier.sql',\n        language: 'sql',\n      },\n      {\n        offset: 171,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 172,\n        type: 'keyword.sql',\n        language: 'sql',\n      },\n      {\n        offset: 177,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 178,\n        type: 'keyword.sql',\n        language: 'sql',\n      },\n      {\n        offset: 180,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 181,\n        type: 'identifier.sql',\n        language: 'sql',\n      },\n      {\n        offset: 188,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 189,\n        type: 'keyword.sql',\n        language: 'sql',\n      },\n      {\n        offset: 193,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 194,\n        type: 'keyword.sql',\n        language: 'sql',\n      },\n      {\n        offset: 199,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 200,\n        type: 'number.sql',\n        language: 'sql',\n      },\n      {\n        offset: 202,\n        type: 'delimiter.sql',\n        language: 'sql',\n      },\n    ],\n  ],\n};\n","import { TestQueryModel } from '../../test-utils/types';\n\nexport const singleLineTwoQueriesWithAggregation: TestQueryModel = {\n  query:\n    'SELECT count(column1), FROM table1 WHERE column1 = \"value1\" GROUP BY column1 ORDER BY column1 DESC LIMIT 10; SELECT count(column2), FROM table2 WHERE column2 = \"value2\" GROUP BY column1 ORDER BY column2 DESC LIMIT 10;',\n  tokens: [\n    [\n      {\n        offset: 0,\n        type: 'keyword.sql',\n        language: 'sql',\n      },\n      {\n        offset: 6,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 7,\n        type: 'predefined.sql',\n        language: 'sql',\n      },\n      {\n        offset: 12,\n        type: 'delimiter.parenthesis.sql',\n        language: 'sql',\n      },\n      {\n        offset: 13,\n        type: 'identifier.sql',\n        language: 'sql',\n      },\n      {\n        offset: 20,\n        type: 'delimiter.parenthesis.sql',\n        language: 'sql',\n      },\n      {\n        offset: 21,\n        type: 'delimiter.sql',\n        language: 'sql',\n      },\n      {\n        offset: 22,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 23,\n        type: 'keyword.sql',\n        language: 'sql',\n      },\n      {\n        offset: 27,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 28,\n        type: 'identifier.sql',\n        language: 'sql',\n      },\n      {\n        offset: 34,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 35,\n        type: 'keyword.sql',\n        language: 'sql',\n      },\n      {\n        offset: 40,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 41,\n        type: 'identifier.sql',\n        language: 'sql',\n      },\n      {\n        offset: 48,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 49,\n        type: 'operator.sql',\n        language: 'sql',\n      },\n      {\n        offset: 50,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 51,\n        type: 'identifier.quote.sql',\n        language: 'sql',\n      },\n      {\n        offset: 52,\n        type: 'identifier.sql',\n        language: 'sql',\n      },\n      {\n        offset: 58,\n        type: 'identifier.quote.sql',\n        language: 'sql',\n      },\n      {\n        offset: 59,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 60,\n        type: 'keyword.sql',\n        language: 'sql',\n      },\n      {\n        offset: 65,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 66,\n        type: 'keyword.sql',\n        language: 'sql',\n      },\n      {\n        offset: 68,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 69,\n        type: 'identifier.sql',\n        language: 'sql',\n      },\n      {\n        offset: 76,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 77,\n        type: 'keyword.sql',\n        language: 'sql',\n      },\n      {\n        offset: 82,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 83,\n        type: 'keyword.sql',\n        language: 'sql',\n      },\n      {\n        offset: 85,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 86,\n        type: 'identifier.sql',\n        language: 'sql',\n      },\n      {\n        offset: 93,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 94,\n        type: 'keyword.sql',\n        language: 'sql',\n      },\n      {\n        offset: 98,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 99,\n        type: 'keyword.sql',\n        language: 'sql',\n      },\n      {\n        offset: 104,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 105,\n        type: 'number.sql',\n        language: 'sql',\n      },\n      {\n        offset: 107,\n        type: 'delimiter.sql',\n        language: 'sql',\n      },\n      {\n        offset: 108,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 109,\n        type: 'keyword.sql',\n        language: 'sql',\n      },\n      {\n        offset: 115,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 116,\n        type: 'predefined.sql',\n        language: 'sql',\n      },\n      {\n        offset: 121,\n        type: 'delimiter.parenthesis.sql',\n        language: 'sql',\n      },\n      {\n        offset: 122,\n        type: 'identifier.sql',\n        language: 'sql',\n      },\n      {\n        offset: 129,\n        type: 'delimiter.parenthesis.sql',\n        language: 'sql',\n      },\n      {\n        offset: 130,\n        type: 'delimiter.sql',\n        language: 'sql',\n      },\n      {\n        offset: 131,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 132,\n        type: 'keyword.sql',\n        language: 'sql',\n      },\n      {\n        offset: 136,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 137,\n        type: 'identifier.sql',\n        language: 'sql',\n      },\n      {\n        offset: 143,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 144,\n        type: 'keyword.sql',\n        language: 'sql',\n      },\n      {\n        offset: 149,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 150,\n        type: 'identifier.sql',\n        language: 'sql',\n      },\n      {\n        offset: 157,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 158,\n        type: 'operator.sql',\n        language: 'sql',\n      },\n      {\n        offset: 159,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 160,\n        type: 'identifier.quote.sql',\n        language: 'sql',\n      },\n      {\n        offset: 161,\n        type: 'identifier.sql',\n        language: 'sql',\n      },\n      {\n        offset: 167,\n        type: 'identifier.quote.sql',\n        language: 'sql',\n      },\n      {\n        offset: 168,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 169,\n        type: 'keyword.sql',\n        language: 'sql',\n      },\n      {\n        offset: 174,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 175,\n        type: 'keyword.sql',\n        language: 'sql',\n      },\n      {\n        offset: 177,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 178,\n        type: 'identifier.sql',\n        language: 'sql',\n      },\n      {\n        offset: 185,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 186,\n        type: 'keyword.sql',\n        language: 'sql',\n      },\n      {\n        offset: 191,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 192,\n        type: 'keyword.sql',\n        language: 'sql',\n      },\n      {\n        offset: 194,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 195,\n        type: 'identifier.sql',\n        language: 'sql',\n      },\n      {\n        offset: 202,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 203,\n        type: 'keyword.sql',\n        language: 'sql',\n      },\n      {\n        offset: 207,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 208,\n        type: 'keyword.sql',\n        language: 'sql',\n      },\n      {\n        offset: 213,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 214,\n        type: 'number.sql',\n        language: 'sql',\n      },\n      {\n        offset: 216,\n        type: 'delimiter.sql',\n        language: 'sql',\n      },\n    ],\n  ],\n};\n","import { TestQueryModel } from '../../test-utils/types';\n\nexport const singleLineMultipleColumns: TestQueryModel = {\n  query:\n    'SELECT count(column1), column2 FROM table1 WHERE column1 = \"value1\" GROUP BY column1 ORDER BY column1, avg(column2) DESC LIMIT 10;',\n  tokens: [\n    [\n      {\n        offset: 0,\n        type: 'keyword.sql',\n        language: 'sql',\n      },\n      {\n        offset: 6,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 7,\n        type: 'predefined.sql',\n        language: 'sql',\n      },\n      {\n        offset: 12,\n        type: 'delimiter.parenthesis.sql',\n        language: 'sql',\n      },\n      {\n        offset: 13,\n        type: 'identifier.sql',\n        language: 'sql',\n      },\n      {\n        offset: 20,\n        type: 'delimiter.parenthesis.sql',\n        language: 'sql',\n      },\n      {\n        offset: 21,\n        type: 'delimiter.sql',\n        language: 'sql',\n      },\n      {\n        offset: 22,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 23,\n        type: 'identifier.sql',\n        language: 'sql',\n      },\n      {\n        offset: 30,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 31,\n        type: 'keyword.sql',\n        language: 'sql',\n      },\n      {\n        offset: 35,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 36,\n        type: 'identifier.sql',\n        language: 'sql',\n      },\n      {\n        offset: 42,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 43,\n        type: 'keyword.sql',\n        language: 'sql',\n      },\n      {\n        offset: 48,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 49,\n        type: 'identifier.sql',\n        language: 'sql',\n      },\n      {\n        offset: 56,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 57,\n        type: 'operator.sql',\n        language: 'sql',\n      },\n      {\n        offset: 58,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 59,\n        type: 'identifier.quote.sql',\n        language: 'sql',\n      },\n      {\n        offset: 60,\n        type: 'identifier.sql',\n        language: 'sql',\n      },\n      {\n        offset: 66,\n        type: 'identifier.quote.sql',\n        language: 'sql',\n      },\n      {\n        offset: 67,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 68,\n        type: 'keyword.sql',\n        language: 'sql',\n      },\n      {\n        offset: 73,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 74,\n        type: 'keyword.sql',\n        language: 'sql',\n      },\n      {\n        offset: 76,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 77,\n        type: 'identifier.sql',\n        language: 'sql',\n      },\n      {\n        offset: 84,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 85,\n        type: 'keyword.sql',\n        language: 'sql',\n      },\n      {\n        offset: 90,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 91,\n        type: 'keyword.sql',\n        language: 'sql',\n      },\n      {\n        offset: 93,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 94,\n        type: 'identifier.sql',\n        language: 'sql',\n      },\n      {\n        offset: 101,\n        type: 'delimiter.sql',\n        language: 'sql',\n      },\n      {\n        offset: 102,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 103,\n        type: 'predefined.sql',\n        language: 'sql',\n      },\n      {\n        offset: 106,\n        type: 'delimiter.parenthesis.sql',\n        language: 'sql',\n      },\n      {\n        offset: 107,\n        type: 'identifier.sql',\n        language: 'sql',\n      },\n      {\n        offset: 114,\n        type: 'delimiter.parenthesis.sql',\n        language: 'sql',\n      },\n      {\n        offset: 115,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 116,\n        type: 'keyword.sql',\n        language: 'sql',\n      },\n      {\n        offset: 120,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 121,\n        type: 'keyword.sql',\n        language: 'sql',\n      },\n      {\n        offset: 126,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 127,\n        type: 'number.sql',\n        language: 'sql',\n      },\n      {\n        offset: 129,\n        type: 'delimiter.sql',\n        language: 'sql',\n      },\n    ],\n  ],\n};\n","import { TestQueryModel } from '../../test-utils/types';\n\nexport const multiLineMultipleColumns: TestQueryModel = {\n  query: `SELECT count(column1), column2\n  FROM table1\n\n  WHERE column1 = \"value1\"\n  GROUP BY column1 ORDER BY column1, avg(column2) DESC\n  LIMIT 10;`,\n  tokens: [\n    [\n      {\n        offset: 0,\n        type: 'keyword.sql',\n        language: 'sql',\n      },\n      {\n        offset: 6,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 7,\n        type: 'predefined.sql',\n        language: 'sql',\n      },\n      {\n        offset: 12,\n        type: 'delimiter.parenthesis.sql',\n        language: 'sql',\n      },\n      {\n        offset: 13,\n        type: 'identifier.sql',\n        language: 'sql',\n      },\n      {\n        offset: 20,\n        type: 'delimiter.parenthesis.sql',\n        language: 'sql',\n      },\n      {\n        offset: 21,\n        type: 'delimiter.sql',\n        language: 'sql',\n      },\n      {\n        offset: 22,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 23,\n        type: 'identifier.sql',\n        language: 'sql',\n      },\n      {\n        offset: 30,\n        type: 'white.sql',\n        language: 'sql',\n      },\n    ],\n    [\n      {\n        offset: 0,\n        type: 'keyword.sql',\n        language: 'sql',\n      },\n      {\n        offset: 4,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 5,\n        type: 'identifier.sql',\n        language: 'sql',\n      },\n      {\n        offset: 11,\n        type: 'white.sql',\n        language: 'sql',\n      },\n    ],\n    [\n      {\n        offset: 0,\n        type: 'white.sql',\n        language: 'sql',\n      },\n    ],\n    [\n      {\n        offset: 0,\n        type: 'keyword.sql',\n        language: 'sql',\n      },\n      {\n        offset: 5,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 6,\n        type: 'identifier.sql',\n        language: 'sql',\n      },\n      {\n        offset: 13,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 14,\n        type: 'operator.sql',\n        language: 'sql',\n      },\n      {\n        offset: 15,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 16,\n        type: 'identifier.quote.sql',\n        language: 'sql',\n      },\n      {\n        offset: 17,\n        type: 'identifier.sql',\n        language: 'sql',\n      },\n      {\n        offset: 23,\n        type: 'identifier.quote.sql',\n        language: 'sql',\n      },\n      {\n        offset: 24,\n        type: 'white.sql',\n        language: 'sql',\n      },\n    ],\n    [\n      {\n        offset: 0,\n        type: 'keyword.sql',\n        language: 'sql',\n      },\n      {\n        offset: 5,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 6,\n        type: 'keyword.sql',\n        language: 'sql',\n      },\n      {\n        offset: 8,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 9,\n        type: 'identifier.sql',\n        language: 'sql',\n      },\n      {\n        offset: 16,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 17,\n        type: 'keyword.sql',\n        language: 'sql',\n      },\n      {\n        offset: 22,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 23,\n        type: 'keyword.sql',\n        language: 'sql',\n      },\n      {\n        offset: 25,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 26,\n        type: 'identifier.sql',\n        language: 'sql',\n      },\n      {\n        offset: 33,\n        type: 'delimiter.sql',\n        language: 'sql',\n      },\n      {\n        offset: 34,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 35,\n        type: 'predefined.sql',\n        language: 'sql',\n      },\n      {\n        offset: 38,\n        type: 'delimiter.parenthesis.sql',\n        language: 'sql',\n      },\n      {\n        offset: 39,\n        type: 'identifier.sql',\n        language: 'sql',\n      },\n      {\n        offset: 46,\n        type: 'delimiter.parenthesis.sql',\n        language: 'sql',\n      },\n      {\n        offset: 47,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 48,\n        type: 'keyword.sql',\n        language: 'sql',\n      },\n      {\n        offset: 52,\n        type: 'white.sql',\n        language: 'sql',\n      },\n    ],\n    [\n      {\n        offset: 0,\n        type: 'keyword.sql',\n        language: 'sql',\n      },\n      {\n        offset: 5,\n        type: 'white.sql',\n        language: 'sql',\n      },\n      {\n        offset: 6,\n        type: 'number.sql',\n        language: 'sql',\n      },\n      {\n        offset: 8,\n        type: 'delimiter.sql',\n        language: 'sql',\n      },\n    ],\n  ],\n};\n","import { monacoTypes } from '@grafana/ui';\n\n// Stub for the Monaco instance. Only implements the parts that are used in cloudwatch sql\nconst getMonacoMock: (\n  testData: Map<string, Array<Array<Pick<monacoTypes.Token, 'language' | 'offset' | 'type'>>>>\n) => any = (testData) => ({\n  editor: {\n    tokenize: (value: string, languageId: string) => testData.get(value),\n  },\n  Range: {\n    containsPosition: (range: monacoTypes.IRange, position: monacoTypes.IPosition) => {\n      return (\n        position.lineNumber >= range.startLineNumber &&\n        position.lineNumber <= range.endLineNumber &&\n        position.column >= range.startColumn &&\n        position.column <= range.endColumn\n      );\n    },\n  },\n  languages: {\n    CompletionItemKind: { Snippet: 2, Function: 1, Keyword: 3 },\n    CompletionItemInsertTextRule: { InsertAsSnippet: 2 },\n  },\n});\n\nexport { getMonacoMock };\n","import { monacoTypes } from '@grafana/ui';\n\n// Stub for monacoTypes.editor.ITextModel\nfunction TextModel(value: string) {\n  return {\n    getValue: function (eol?: monacoTypes.editor.EndOfLinePreference, preserveBOM?: boolean): string {\n      return value;\n    },\n    getValueInRange: function (range: monacoTypes.IRange, eol?: monacoTypes.editor.EndOfLinePreference): string {\n      const lines = value.split('\\n');\n      const line = lines[range.startLineNumber - 1];\n      return line.trim().slice(range.startColumn === 0 ? 0 : range.startColumn - 1, range.endColumn - 1);\n    },\n    getLineLength: function (lineNumber: number): number {\n      const lines = value.split('\\n');\n      return lines[lineNumber - 1].trim().length;\n    },\n  };\n}\n\nexport { TextModel };\n","import { Registry } from '@grafana/data';\nimport { monacoTypes } from '@grafana/ui';\nimport { getMonacoMock } from '../mocks/Monaco';\nimport { TextModel } from '../mocks/TextModel';\nimport { getStatementPosition } from '../standardSql/getStatementPosition';\nimport { StatementPositionResolversRegistryItem } from '../standardSql/types';\nimport { CustomStatementPlacement, StatementPosition } from '../types';\nimport { linkedTokenBuilder } from '../utils/linkedTokenBuilder';\nimport { StatementPositionResolverTestCase } from './types';\n\nfunction assertPosition(\n  query: string,\n  position: monacoTypes.IPosition,\n  expected: StatementPosition | string,\n  monacoMock: any,\n  resolversRegistry: Registry<StatementPositionResolversRegistryItem>\n) {\n  const testModel = TextModel(query);\n  const current = linkedTokenBuilder(monacoMock, testModel as monacoTypes.editor.ITextModel, position);\n  const statementPosition = getStatementPosition(current, resolversRegistry);\n\n  expect(statementPosition).toContain(expected);\n}\n\nexport const testStatementPosition = (\n  expected: StatementPosition | string,\n  cases: StatementPositionResolverTestCase[],\n  resolvers: () => CustomStatementPlacement[]\n) => {\n  describe(`${expected}`, () => {\n    let MonacoMock: any;\n    let statementPositionResolversRegistry: Registry<StatementPositionResolversRegistryItem>;\n\n    beforeEach(() => {\n      const mockQueries = new Map<string, Array<Array<Pick<monacoTypes.Token, 'language' | 'offset' | 'type'>>>>();\n      cases.forEach((c) => mockQueries.set(c.query.query, c.query.tokens));\n\n      MonacoMock = getMonacoMock(mockQueries);\n      statementPositionResolversRegistry = new Registry(() => {\n        return resolvers().map((r) => ({\n          id: r.id as StatementPosition,\n          name: r.name || r.id,\n          resolve: r.resolve,\n        }));\n      });\n    });\n\n    // using forEach here rather than test.each as been struggling to get the arguments intepolated in test name string\n    cases.forEach((c) => {\n      test(`${c.query.query}`, () => {\n        assertPosition(\n          c.query.query,\n          { lineNumber: c.position.line, column: c.position.column },\n          expected,\n          MonacoMock,\n          statementPositionResolversRegistry\n        );\n      });\n    });\n  });\n};\n","import * as testData from '../mocks/testData';\nimport { testStatementPosition } from './statementPosition';\nimport { TestQueryModel } from './types';\n\nexport const SQLEditorTestUtils = {\n  testData,\n  testStatementPosition,\n};\n\nexport type { TestQueryModel };\n","import { css, cx } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, ButtonProps, useStyles2 } from '@grafana/ui';\nimport React from 'react';\n\ninterface AccessoryButtonProps extends ButtonProps {}\n\nexport const AccessoryButton: React.FC<AccessoryButtonProps> = ({ className, ...props }) => {\n  const styles = useStyles2(getButtonStyles);\n\n  return <Button {...props} className={cx(className, styles.button)} />;\n};\n\nconst getButtonStyles = (theme: GrafanaTheme2) => ({\n  button: css({\n    paddingLeft: theme.spacing(3 / 2),\n    paddingRight: theme.spacing(3 / 2),\n  }),\n});\n","import { css } from '@emotion/css';\nimport React, { CSSProperties, useCallback } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\ninterface StackProps {\n  direction?: CSSProperties['flexDirection'];\n  alignItems?: CSSProperties['alignItems'];\n  wrap?: boolean;\n  gap?: number;\n  flexGrow?: CSSProperties['flexGrow'];\n}\n\nexport const Stack = ({ children, ...props }: React.PropsWithChildren<StackProps>) => {\n  const styles = useStyles2(useCallback((theme) => getStyles(theme, props), [props]));\n\n  return <div className={styles.root}>{children}</div>;\n};\n\nconst getStyles = (theme: GrafanaTheme2, props: StackProps) => ({\n  root: css({\n    display: 'flex',\n    flexDirection: props.direction ?? 'row',\n    flexWrap: props.wrap ?? true ? 'wrap' : undefined,\n    alignItems: props.alignItems,\n    gap: theme.spacing(props.gap ?? 2),\n    flexGrow: props.flexGrow,\n  }),\n});\n","import React from 'react';\n\nimport { Stack } from './Stack';\n\ninterface EditorFieldGroupProps {}\n\nexport const EditorFieldGroup = ({ children }: React.PropsWithChildren<EditorFieldGroupProps>) => {\n  return <Stack gap={1}>{children}</Stack>;\n};\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\ninterface EditorHeaderProps {}\n\nexport const EditorHeader = ({ children }: React.PropsWithChildren<EditorHeaderProps>) => {\n  const styles = useStyles2(getStyles);\n\n  return <div className={styles.root}>{children}</div>;\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  root: css({\n    display: 'flex',\n    flexWrap: 'wrap',\n    alignItems: 'center',\n    gap: theme.spacing(3),\n    minHeight: theme.spacing(4),\n  }),\n});\n","import { css, cx } from '@emotion/css';\nimport React, { useCallback } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\nexport interface SpaceProps {\n  v?: number;\n  h?: number;\n  layout?: 'block' | 'inline';\n}\n\nexport const Space = (props: SpaceProps) => {\n  const styles = useStyles2(useCallback((theme) => getStyles(theme, props), [props]));\n\n  return <span className={cx(styles.wrapper)} />;\n};\n\nSpace.defaultProps = {\n  v: 0,\n  h: 0,\n  layout: 'block',\n};\n\nconst getStyles = (theme: GrafanaTheme2, props: SpaceProps) => ({\n  wrapper: css([\n    {\n      paddingRight: theme.spacing(props.h ?? 0),\n      paddingBottom: theme.spacing(props.v ?? 0),\n    },\n    props.layout === 'inline' && {\n      display: 'inline-block',\n    },\n    props.layout === 'block' && {\n      display: 'block',\n    },\n  ]),\n});\n","import { css } from '@emotion/css';\nimport React, { ComponentProps, useCallback } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\n\nimport { Space } from './Space';\nimport { Field, Icon, PopoverContent, ReactUtils, Tooltip, useStyles2 } from '@grafana/ui';\n\ninterface EditorFieldProps extends ComponentProps<typeof Field> {\n  label: string;\n  children: React.ReactElement;\n  width?: number | string;\n  optional?: boolean;\n  tooltip?: PopoverContent;\n  tooltipInteractive?: boolean;\n}\n\nexport const EditorField: React.FC<EditorFieldProps> = (props) => {\n  const { label, optional, tooltip, tooltipInteractive, children, width, ...fieldProps } = props;\n\n  const styles = useStyles2(useCallback((theme) => getStyles(theme, width), [width]));\n\n  // Null check for backward compatibility\n  const childInputId = fieldProps?.htmlFor || ReactUtils?.getChildId(children);\n\n  const labelEl = (\n    <>\n      <label className={styles.label} htmlFor={childInputId}>\n        {label}\n        {optional && <span className={styles.optional}> - optional</span>}\n        {tooltip && (\n          <Tooltip placement=\"top\" content={tooltip} theme=\"info\" interactive={tooltipInteractive}>\n            <Icon tabIndex={0} name=\"info-circle\" size=\"sm\" className={styles.icon} />\n          </Tooltip>\n        )}\n      </label>\n      <Space v={0.5} />\n    </>\n  );\n\n  return (\n    <div className={styles.root}>\n      <Field className={styles.field} label={labelEl} {...fieldProps}>\n        {children}\n      </Field>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2, width?: number | string) => {\n  return {\n    root: css({\n      minWidth: theme.spacing(width ?? 0),\n    }),\n    label: css({\n      fontSize: 12,\n      fontWeight: theme.typography.fontWeightMedium,\n    }),\n    optional: css({\n      fontStyle: 'italic',\n      color: theme.colors.text.secondary,\n    }),\n    field: css({\n      marginBottom: 0, // GrafanaUI/Field has a bottom margin which we must remove\n    }),\n    icon: css({\n      color: theme.colors.text.secondary,\n      marginLeft: theme.spacing(1),\n      ':hover': {\n        color: theme.colors.text.primary,\n      },\n    }),\n  };\n};\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\n\nimport { Stack } from './Stack';\nimport { useStyles2 } from '@grafana/ui';\n\ninterface EditorRowProps {}\n\nexport const EditorRow = ({ children }: React.PropsWithChildren<EditorRowProps>) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.root}>\n      <Stack gap={2}>{children}</Stack>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    root: css({\n      padding: theme.spacing(1),\n      backgroundColor: theme.colors.background.secondary,\n      borderRadius: theme.shape.borderRadius(1),\n    }),\n  };\n};\n","import { Button } from '@grafana/ui';\nimport React from 'react';\n\nimport { Stack } from './Stack';\n\ninterface EditorListProps<T> {\n  items: Array<Partial<T>>;\n  renderItem: (\n    item: Partial<T>,\n    onChangeItem: (item: Partial<T>) => void,\n    onDeleteItem: () => void\n  ) => React.ReactElement;\n  onChange: (items: Array<Partial<T>>) => void;\n}\n\nexport const EditorList = React.forwardRef(function EditorList<T>(\n  { items, renderItem, onChange }: EditorListProps<T>,\n  ref: React.Ref<HTMLButtonElement>\n) {\n  const onAddItem = () => {\n    const newItems = [...items, {}];\n\n    onChange(newItems);\n  };\n\n  const onChangeItem = (itemIndex: number, newItem: Partial<T>) => {\n    const newItems = [...items];\n    newItems[itemIndex] = newItem;\n    onChange(newItems);\n  };\n\n  const onDeleteItem = (itemIndex: number) => {\n    const newItems = [...items];\n    newItems.splice(itemIndex, 1);\n    onChange(newItems);\n  };\n  return (\n    <Stack>\n      {items.map((item, index) => (\n        <div key={index}>\n          {renderItem(\n            item,\n            (newItem) => onChangeItem(index, newItem),\n            () => onDeleteItem(index)\n          )}\n        </div>\n      ))}\n      <Button ref={ref} onClick={onAddItem} variant=\"secondary\" size=\"md\" icon=\"plus\" aria-label=\"Add\" type=\"button\" />\n    </Stack>\n  );\n});\n","import React from 'react';\n\nimport { Stack } from './Stack';\n\ninterface EditorRowsProps {}\n\nexport const EditorRows = ({ children }: React.PropsWithChildren<EditorRowsProps>) => {\n  return (\n    <Stack gap={0.5} direction=\"column\">\n      {children}\n    </Stack>\n  );\n};\n","import { css } from '@emotion/css';\nimport { Switch } from '@grafana/ui';\nimport React, { ComponentProps } from 'react';\n\n// Wrapper component around <Switch /> that properly aligns it in <EditorField />\nexport const EditorSwitch: React.FC<ComponentProps<typeof Switch>> = (props) => {\n  const styles = getStyles();\n\n  return (\n    <div className={styles.switch}>\n      <Switch {...props} />\n    </div>\n  );\n};\n\nconst getStyles = () => {\n  return {\n    switch: css({\n      display: 'flex',\n      alignItems: 'center',\n      minHeight: 30,\n    }),\n  };\n};\n","import React from 'react';\n\ninterface FlexItemProps {\n  grow?: number;\n  shrink?: number;\n}\n\nexport const FlexItem: React.FC<FlexItemProps> = ({ grow, shrink }) => {\n  return <div style={{ display: 'block', flexGrow: grow, flexShrink: shrink }} />;\n};\n","import { css, cx } from '@emotion/css';\nimport React, { useState } from 'react';\nimport { GroupBase } from 'react-select';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport {\n  SelectCommonProps,\n  SelectContainerProps,\n  useStyles2,\n  SelectContainer as BaseSelectContainer,\n  Select,\n} from '@grafana/ui';\n\ninterface InlineSelectProps<T> extends SelectCommonProps<T> {\n  label?: string;\n}\n\nexport function InlineSelect<T>({ label: labelProp, ...props }: InlineSelectProps<T>) {\n  const styles = useStyles2(getSelectStyles);\n  const [id] = useState(() => Math.random().toString(16).slice(2));\n  const components = {\n    SelectContainer,\n    ValueContainer,\n    SingleValue: ValueContainer,\n  };\n\n  return (\n    <div className={styles.root}>\n      {labelProp && (\n        <label className={styles.label} htmlFor={id}>\n          {labelProp}\n          {':'}&nbsp;\n        </label>\n      )}\n      <Select openMenuOnFocus inputId={id} {...props} components={components} />\n    </div>\n  );\n}\n\nconst SelectContainer = <Option, isMulti extends boolean, Group extends GroupBase<Option>>(\n  props: SelectContainerProps<Option, isMulti, Group>\n) => {\n  const { children } = props;\n\n  const styles = useStyles2(getSelectStyles);\n\n  return (\n    <BaseSelectContainer {...props} className={cx(props.className, styles.container)}>\n      {children}\n    </BaseSelectContainer>\n  );\n};\n\nconst ValueContainer = <Option, isMulti extends boolean, Group extends GroupBase<Option>>(\n  props: SelectContainerProps<Option, isMulti, Group>\n) => {\n  const { className, children } = props;\n  const styles = useStyles2(getSelectStyles);\n\n  return <div className={cx(className, styles.valueContainer)}>{children}</div>;\n};\n\nconst getSelectStyles = (theme: GrafanaTheme2) => ({\n  root: css({\n    display: 'flex',\n    fontSize: 12,\n    alignItems: 'center',\n  }),\n\n  label: css({\n    color: theme.colors.text.secondary,\n    whiteSpace: 'nowrap',\n  }),\n\n  container: css({\n    background: 'none',\n    borderColor: 'transparent',\n  }),\n\n  valueContainer: css({\n    display: 'flex',\n    alignItems: 'center',\n    flex: 'initial',\n    color: theme.colors.text.secondary,\n    fontSize: 12,\n  }),\n});\n","import { css, cx } from '@emotion/css';\nimport { useStyles2 } from '@grafana/ui';\nimport React, { Children, cloneElement, isValidElement, ReactElement } from 'react';\n\ntype Child = string | undefined | ReactElement<{ className?: string; invalid?: unknown }>;\ninterface InputGroupProps {\n  // we type the children props so we can test them later on\n  children: Child | Child[];\n}\n\nexport const InputGroup = ({ children }: InputGroupProps) => {\n  const styles = useStyles2(getStyles);\n\n  // Find children with an invalid prop, and set a class name to raise their z-index so all\n  // of the invalid border is visible\n  const modifiedChildren = Children.map(children, (child) => {\n    if (isValidElement(child) && child.props.invalid) {\n      return cloneElement(child, { className: cx(child.props.className, styles.invalidChild) });\n    }\n\n    return child;\n  });\n\n  return <div className={styles.root}>{modifiedChildren}</div>;\n};\n\n// The later in the array the higher the priority for showing that element's border\nconst borderPriority = [\n  '' as const, // lowest priority\n  'base' as const,\n  'hovered' as const,\n  'invalid' as const,\n  'focused' as const, // highest priority\n];\n\nconst getStyles = () => ({\n  root: css({\n    display: 'flex',\n\n    // Style the direct children of the component\n    '> *': {\n      '&:not(:first-child)': {\n        // Negative margin hides the double-border on adjacent selects\n        marginLeft: -1,\n      },\n\n      '&:first-child': {\n        borderTopRightRadius: 0,\n        borderBottomRightRadius: 0,\n      },\n\n      '&:last-child': {\n        borderTopLeftRadius: 0,\n        borderBottomLeftRadius: 0,\n      },\n\n      '&:not(:first-child):not(:last-child)': {\n        borderRadius: 0,\n      },\n\n      //\n      position: 'relative',\n      zIndex: borderPriority.indexOf('base'),\n\n      // Adjacent borders are overlapping, so raise children up when hovering etc\n      // so all that child's borders are visible.\n      '&:hover': {\n        zIndex: borderPriority.indexOf('hovered'),\n      },\n      '&:focus-within': {\n        zIndex: borderPriority.indexOf('focused'),\n      },\n    },\n  }),\n\n  invalidChild: css({\n    zIndex: borderPriority.indexOf('invalid'),\n  }),\n});\n","import React from 'react';\nimport { cx, css } from '@emotion/css';\nimport { useTheme2 } from '@grafana/ui';\n\ntype Props = {\n  dataSourceName: string;\n  docsLink: string;\n  hasRequiredFields?: boolean;\n  className?: string;\n};\n\nexport const DataSourceDescription = ({ dataSourceName, docsLink, hasRequiredFields = true, className }: Props) => {\n  const theme = useTheme2();\n\n  const styles = {\n    container: css({\n      p: {\n        margin: 0,\n      },\n      'p + p': {\n        marginTop: theme.spacing(2),\n      },\n    }),\n    text: css({\n      ...theme.typography.body,\n      color: theme.colors.text.secondary,\n      a: css({\n        color: theme.colors.text.link,\n        textDecoration: 'underline',\n        '&:hover': {\n          textDecoration: 'none',\n        },\n      }),\n    }),\n  };\n\n  return (\n    <div className={cx(styles.container, className)}>\n      <p className={styles.text}>\n        Before you can use the {dataSourceName} data source, you must configure it below or in the config file. For\n        detailed instructions,{' '}\n        <a href={docsLink} target=\"_blank\" rel=\"noreferrer\">\n          view the documentation\n        </a>\n        .\n      </p>\n      {hasRequiredFields && (\n        <p className={styles.text}>\n          <i>Fields marked with * are required</i>\n        </p>\n      )}\n    </div>\n  );\n};\n","import React, { useState, ReactNode } from 'react';\nimport { css } from '@emotion/css';\nimport { useTheme2, IconButton, IconName } from '@grafana/ui';\n\nexport type Props = {\n  title: string;\n  description?: ReactNode;\n  isCollapsible?: boolean;\n  isInitiallyOpen?: boolean;\n  kind?: 'section' | 'sub-section';\n  className?: string;\n  children: ReactNode;\n};\n\nexport const GenericConfigSection = ({\n  children,\n  title,\n  description,\n  isCollapsible = false,\n  isInitiallyOpen = true,\n  kind = 'section',\n  className,\n}: Props) => {\n  const { colors, typography, spacing } = useTheme2();\n  const [isOpen, setIsOpen] = useState(isCollapsible ? isInitiallyOpen : true);\n  const iconName: IconName = isOpen ? 'angle-up' : 'angle-down';\n  const isSubSection = kind === 'sub-section';\n  const collapsibleButtonAriaLabel = `${isOpen ? 'Collapse' : 'Expand'} section ${title}`;\n\n  const styles = {\n    header: css({\n      display: 'flex',\n      justifyContent: 'space-between',\n      alignItems: 'center',\n    }),\n    title: css({\n      margin: 0,\n    }),\n    subtitle: css({\n      margin: 0,\n      fontWeight: typography.fontWeightRegular,\n    }),\n    descriptionText: css({\n      marginTop: spacing(isSubSection ? 0.25 : 0.5),\n      marginBottom: 0,\n      ...typography.bodySmall,\n      color: colors.text.secondary,\n    }),\n    content: css({\n      marginTop: spacing(2),\n    }),\n  };\n\n  return (\n    <div className={className}>\n      <div className={styles.header}>\n        {kind === 'section' ? <h3 className={styles.title}>{title}</h3> : <h6 className={styles.subtitle}>{title}</h6>}\n        {isCollapsible && (\n          <IconButton\n            name={iconName}\n            onClick={() => setIsOpen(!isOpen)}\n            type=\"button\"\n            size=\"xl\"\n            aria-label={collapsibleButtonAriaLabel}\n          />\n        )}\n      </div>\n      {description && <p className={styles.descriptionText}>{description}</p>}\n      {isOpen && <div className={styles.content}>{children}</div>}\n    </div>\n  );\n};\n","import React from 'react';\nimport { GenericConfigSection, Props as GenericConfigSectionProps } from './GenericConfigSection';\n\ntype Props = Omit<GenericConfigSectionProps, 'kind'>;\n\nexport const ConfigSection = ({ children, ...props }: Props) => {\n  return (\n    <GenericConfigSection {...props} kind=\"section\">\n      {children}\n    </GenericConfigSection>\n  );\n};\n","import React from 'react';\nimport { GenericConfigSection, Props as GenericConfigSectionProps } from './GenericConfigSection';\n\ntype Props = Omit<GenericConfigSectionProps, 'kind'>;\n\nexport const ConfigSubSection = ({ children, ...props }: Props) => {\n  return (\n    <GenericConfigSection {...props} kind=\"sub-section\">\n      {children}\n    </GenericConfigSection>\n  );\n};\n","/**\n * Copy & paste from https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/SecretInput/SecretInput.tsx\n * Available starting from @grafana/ui 9.2\n * Needed, because Auth component is also used in Grafana 8, which doesn't have SecretInput\n */\n\nimport * as React from 'react';\nimport { HorizontalGroup, Input, Button } from '@grafana/ui';\n\nexport type Props = React.ComponentProps<typeof Input> & {\n  /** TRUE if the secret was already configured. (It is needed as often the backend doesn't send back the actual secret, only the information that it was configured) */\n  isConfigured: boolean;\n  /** Called when the user clicks on the \"Reset\" button in order to clear the secret */\n  onReset: () => void;\n};\n\nexport const CONFIGURED_TEXT = 'configured';\nexport const RESET_BUTTON_TEXT = 'Reset';\n\nexport const SecretInput = ({ isConfigured, onReset, ...props }: Props) => (\n  <HorizontalGroup>\n    {!isConfigured && <Input {...props} type=\"password\" />}\n    {isConfigured && <Input {...props} type=\"text\" disabled={true} value={CONFIGURED_TEXT} />}\n    {isConfigured && (\n      <Button onClick={onReset} variant=\"secondary\">\n        {RESET_BUTTON_TEXT}\n      </Button>\n    )}\n  </HorizontalGroup>\n);\n","/**\n * Copy & paste from https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/SecretTextArea/SecretTextArea.tsx\n * Available starting from @grafana/ui 9.2\n * Needed, because Auth component is also used in Grafana 8, which doesn't have SecretTextarea\n */\n\nimport { css, cx } from '@emotion/css';\nimport * as React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2, Button, TextArea, HorizontalGroup } from '@grafana/ui';\n\nexport type Props = React.ComponentProps<typeof TextArea> & {\n  /** TRUE if the secret was already configured. (It is needed as often the backend doesn't send back the actual secret, only the information that it was configured) */\n  isConfigured: boolean;\n  /** Called when the user clicks on the \"Reset\" button in order to clear the secret */\n  onReset: () => void;\n};\n\nexport const CONFIGURED_TEXT = 'configured';\nexport const RESET_BUTTON_TEXT = 'Reset';\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    configuredStyle: css`\n      min-height: ${theme.spacing(theme.components.height.md)};\n      padding-top: ${theme.spacing(0.5) /** Needed to mimic vertically centered text in an input box */};\n      resize: none;\n    `,\n  };\n};\n\n/**\n * Text area that does not disclose an already configured value but lets the user reset the current value and enter a new one.\n * Typically useful for asymmetric cryptography keys.\n */\nexport const SecretTextArea = ({ isConfigured, onReset, ...props }: Props) => {\n  const styles = useStyles2(getStyles);\n  return (\n    <HorizontalGroup>\n      {!isConfigured && <TextArea {...props} />}\n      {isConfigured && (\n        <TextArea {...props} rows={1} disabled={true} value={CONFIGURED_TEXT} className={cx(styles.configuredStyle)} />\n      )}\n      {isConfigured && (\n        <Button onClick={onReset} variant=\"secondary\">\n          {RESET_BUTTON_TEXT}\n        </Button>\n      )}\n    </HorizontalGroup>\n  );\n};\n","import { css } from '@emotion/css';\n\nexport const useCommonStyles = () => {\n  return {\n    inlineFieldNoMarginRight: css({\n      marginRight: 0,\n    }),\n    // This is dirty hack to make configured secret input grow\n    inlineFieldWithSecret: css({\n      '[class$=\"layoutChildrenWrapper\"]:first-child': {\n        flexGrow: 1,\n      },\n    }),\n  };\n};\n","import React from 'react';\nimport { cx, css } from '@emotion/css';\nimport { InlineField, Input, PopoverContent } from '@grafana/ui';\nimport { SecretInput } from '../common';\nimport { useCommonStyles } from '../styles';\n\nexport type Props = {\n  user?: string;\n  passwordConfigured: boolean;\n  userTooltip?: PopoverContent;\n  passwordTooltip?: PopoverContent;\n  onUserChange: (user: string) => void;\n  onPasswordChange: (password: string) => void;\n  onPasswordReset: () => void;\n  readOnly: boolean;\n};\n\nexport const BasicAuth: React.FC<Props> = ({\n  user,\n  passwordConfigured,\n  userTooltip = 'The username of the data source account',\n  passwordTooltip = 'The password of the data source account',\n  onUserChange,\n  onPasswordChange,\n  onPasswordReset,\n  readOnly,\n}) => {\n  const commonStyles = useCommonStyles();\n  const styles = {\n    lastInlineField: css({\n      marginBottom: 0,\n    }),\n  };\n  return (\n    <>\n      <InlineField\n        className={commonStyles.inlineFieldNoMarginRight}\n        label=\"User\"\n        labelWidth={24}\n        tooltip={userTooltip}\n        required\n        htmlFor=\"basic-auth-user-input\"\n        interactive\n        grow\n        disabled={readOnly}\n      >\n        <Input\n          id=\"basic-auth-user-input\"\n          placeholder=\"User\"\n          value={user}\n          onChange={(e) => onUserChange(e.currentTarget.value)}\n          required\n        />\n      </InlineField>\n      <InlineField\n        className={cx(\n          commonStyles.inlineFieldNoMarginRight,\n          commonStyles.inlineFieldWithSecret,\n          styles.lastInlineField\n        )}\n        label=\"Password\"\n        labelWidth={24}\n        tooltip={passwordTooltip}\n        required\n        htmlFor=\"basic-auth-password-input\"\n        interactive\n        grow\n        disabled={readOnly}\n      >\n        <SecretInput\n          id=\"basic-auth-password-input\"\n          isConfigured={passwordConfigured}\n          onReset={readOnly ? () => {} : onPasswordReset}\n          placeholder=\"Password\"\n          onChange={(e) => onPasswordChange(e.currentTarget.value)}\n          required\n        />\n      </InlineField>\n    </>\n  );\n};\n","import { ReactElement } from 'react';\n\nexport enum AuthMethod {\n  NoAuth = 'NoAuth',\n  BasicAuth = 'BasicAuth',\n  OAuthForward = 'OAuthForward',\n  CrossSiteCredentials = 'CrossSiteCredentials',\n}\n\nexport interface DefaultAuthMethod {\n  label?: string;\n  description?: string;\n};\n\nexport type CustomMethodId = `custom-${string}`;\n\nexport type CustomMethod = {\n  id: CustomMethodId;\n  label: string;\n  description: string;\n  component: ReactElement;\n};\n\nexport type Header = {\n  name: string;\n  configured: boolean;\n};\n\nexport type HeaderWithValue = Header & { value: string };\n\nexport type LocalHeader = HeaderWithValue & { id: string };\n","import React, { ReactElement, useMemo, useState } from 'react';\nimport { css } from '@emotion/css';\nimport { useTheme2, Select } from '@grafana/ui';\nimport { SelectableValue } from '@grafana/data';\nimport { BasicAuth, Props as BasicAuthProps } from './BasicAuth';\nimport { ConfigSubSection } from '../../ConfigSection';\nimport { AuthMethod, CustomMethod, CustomMethodId , DefaultAuthMethod } from '../types';\n\nconst defaultOptions: Record<AuthMethod, SelectableValue<AuthMethod>> = {\n  [AuthMethod.BasicAuth]: {\n    label: 'Basic authentication',\n    value: AuthMethod.BasicAuth,\n    description: 'Authenticate with your data source username and password',\n  },\n  [AuthMethod.CrossSiteCredentials]: {\n    label: 'Enable cross-site access control requests',\n    value: AuthMethod.CrossSiteCredentials,\n    description:\n      'Allow cross-site Access-Control requests with your existing credentials and cookies. This enables the server to authenticate the user and perform authorized requests on their behalf on other domains.',\n  },\n  [AuthMethod.OAuthForward]: {\n    label: 'Forward OAuth Identity',\n    value: AuthMethod.OAuthForward,\n    description:\n      'Forward the OAuth access token (and if available: the OIDC ID token) of the user querying to the data source',\n  },\n  [AuthMethod.NoAuth]: {\n    label: 'No Authentication',\n    value: AuthMethod.NoAuth,\n    description: 'Data source is available without authentication',\n  },\n};\n\nexport type Props = {\n  selectedMethod: AuthMethod | CustomMethodId;\n  mostCommonMethod?: AuthMethod | CustomMethodId;\n  visibleMethods?: Array<AuthMethod | CustomMethodId>;\n  extendedDefaultOptions?: Partial<Record<AuthMethod, DefaultAuthMethod>>;\n  customMethods?: CustomMethod[];\n  onAuthMethodSelect: (authType: AuthMethod | CustomMethodId) => void;\n  basicAuth?: Omit<BasicAuthProps, 'readOnly'>;\n  readOnly: boolean;\n};\n\nexport const AuthMethodSettings: React.FC<Props> = ({\n  selectedMethod,\n  mostCommonMethod,\n  visibleMethods: visibleMethodsFromProps,\n  extendedDefaultOptions,\n  customMethods,\n  onAuthMethodSelect,\n  basicAuth,\n  readOnly,\n}) => {\n  const [authMethodChanged, setAuthMethodChanged] = useState(false);\n  const { colors, spacing } = useTheme2();\n  const visibleMethods: Array<AuthMethod | CustomMethodId> = useMemo(\n    () =>\n      visibleMethodsFromProps ?? [\n        AuthMethod.BasicAuth,\n        AuthMethod.OAuthForward,\n        AuthMethod.NoAuth,\n        ...(customMethods?.map((m) => m.id) ?? []),\n      ],\n    [customMethods, visibleMethodsFromProps]\n  );\n  const hasSelect = visibleMethods.length > 1;\n\n  const preparedOptions = useMemo(() => {\n    const customOptions =\n      customMethods?.reduce<Record<CustomMethodId, SelectableValue<CustomMethodId>>>((acc, method) => {\n        acc[method.id] = {\n          label: method.label,\n          value: method.id,\n          description: method.description,\n        };\n        return acc;\n      }, {}) ?? {};\n\n    const preparedDefaultOptions = {} as Record<AuthMethod, SelectableValue<AuthMethod>>;\n    let k: keyof typeof AuthMethod;\n    for (k in defaultOptions) {\n      if (extendedDefaultOptions && extendedDefaultOptions[k]) {\n        preparedDefaultOptions[k] = {\n          ...defaultOptions[k],\n          ...extendedDefaultOptions[k],\n        }\n      } else {\n        preparedDefaultOptions[k] = defaultOptions[k];\n      }\n    }\n\n    const allOptions: Record<AuthMethod | CustomMethodId, SelectableValue<AuthMethod | CustomMethodId>> = {\n      ...customOptions,\n      ...preparedDefaultOptions,\n    };\n\n    return visibleMethods\n      .filter((method) => Boolean(allOptions[method]))\n      .map((method) => {\n        const option = allOptions[method];\n        if (method === mostCommonMethod && hasSelect) {\n          return {\n            ...option,\n            label: `${option.label} (most common)`,\n          };\n        }\n        return option;\n      });\n  }, [visibleMethods, customMethods, extendedDefaultOptions, mostCommonMethod, hasSelect]);\n\n  let selected = selectedMethod;\n  if (!hasSelect) {\n    selected = visibleMethods[0];\n  } else if (selectedMethod === AuthMethod.NoAuth && mostCommonMethod && !authMethodChanged) {\n    selected = mostCommonMethod;\n  }\n\n  let AuthFieldsComponent: ReactElement | null = null;\n  if (selected === AuthMethod.BasicAuth && basicAuth) {\n    AuthFieldsComponent = <BasicAuth {...basicAuth} readOnly={readOnly} />;\n  } else if (selected.startsWith('custom-')) {\n    AuthFieldsComponent = customMethods?.find((m) => m.id === selected)?.component ?? null;\n  }\n\n  const title = hasSelect ? 'Authentication methods' : preparedOptions[0].label ?? '';\n\n  const description = hasSelect\n    ? 'Choose an authentication method to access the data source'\n    : preparedOptions[0].description ?? '';\n\n  const styles = {\n    authMethods: css({\n      marginTop: spacing(2.5),\n      ...(hasSelect && {\n        padding: spacing(2),\n        border: `1px solid ${colors.border.weak}`,\n      }),\n    }),\n    selectedMethodFields: css({\n      marginTop: spacing(1.5),\n    }),\n  };\n\n  return (\n    <ConfigSubSection title={title} description={description}>\n      <div className={styles.authMethods}>\n        {hasSelect && (\n          <Select\n            options={preparedOptions}\n            value={selected}\n            onChange={(option) => {\n              setAuthMethodChanged(true);\n              onAuthMethodSelect(option.value!);\n            }}\n            disabled={readOnly}\n          />\n        )}\n        {AuthFieldsComponent && <div className={styles.selectedMethodFields}>{AuthFieldsComponent}</div>}\n      </div>\n    </ConfigSubSection>\n  );\n};\n","import React from 'react';\nimport { css } from '@emotion/css';\nimport { Checkbox, Tooltip, Icon, useTheme2 } from '@grafana/ui';\n\nexport type Props = {\n  enabled: boolean;\n  label: string;\n  tooltipText: string;\n  onToggle: (enabled: boolean) => void;\n  readOnly: boolean;\n};\n\nexport const TLSSettingsSection: React.FC<Props> = ({ children, enabled, label, tooltipText, onToggle, readOnly }) => {\n  const { colors, spacing } = useTheme2();\n  const styles = {\n    container: css({\n      marginTop: 3,\n    }),\n    checkboxContainer: css({\n      display: 'flex',\n      alignItems: 'center',\n    }),\n    infoIcon: css({\n      marginTop: -2,\n      marginLeft: 5,\n      color: colors.text.secondary,\n    }),\n    content: css({\n      margin: spacing(1, 0, 2, 3),\n    }),\n  };\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.checkboxContainer}>\n        <Checkbox value={enabled} label={label} onChange={() => onToggle(!enabled)} disabled={readOnly} />\n        <Tooltip placement=\"top\" content={tooltipText} interactive>\n          <Icon name=\"info-circle\" className={styles.infoIcon} size=\"sm\" />\n        </Tooltip>\n      </div>\n      {enabled && children && <div className={styles.content}>{children}</div>}\n    </div>\n  );\n};\n","import React from 'react';\nimport { cx } from '@emotion/css';\nimport { InlineField } from '@grafana/ui';\nimport { SecretTextArea } from '../common';\nimport { TLSSettingsSection } from './TLSSettingsSection';\nimport { useCommonStyles } from '../styles';\n\nexport type Props = {\n  enabled: boolean;\n  onToggle: (enabled: boolean) => void;\n  certificateConfigured: boolean;\n  onCertificateChange: (certificate: string) => void;\n  onCertificateReset: () => void;\n  tooltips?: {\n    certificateLabel?: string;\n  };\n  readOnly: boolean;\n};\n\nexport const SelfSignedCertificate: React.FC<Props> = ({\n  enabled,\n  certificateConfigured,\n  onToggle,\n  onCertificateChange,\n  onCertificateReset,\n  tooltips,\n  readOnly,\n}) => {\n  const commonStyles = useCommonStyles();\n\n  return (\n    <TLSSettingsSection\n      enabled={enabled}\n      label=\"Add self-signed certificate\"\n      tooltipText=\"Add your own Certificate Authority (CA) certificate on top of one generated by the certificate authorities for additional security measures\"\n      onToggle={(newEnabled) => onToggle(newEnabled)}\n      readOnly={readOnly}\n    >\n      <InlineField\n        label=\"CA Certificate\"\n        labelWidth={24}\n        tooltip={tooltips?.certificateLabel ?? 'Your self-signed certificate'}\n        required\n        htmlFor=\"self-signed-certificate-input\"\n        interactive\n        grow\n        className={cx(commonStyles.inlineFieldNoMarginRight, commonStyles.inlineFieldWithSecret)}\n        disabled={readOnly}\n      >\n        <SecretTextArea\n          id=\"self-signed-certificate-input\"\n          isConfigured={certificateConfigured}\n          onChange={(e) => onCertificateChange(e.currentTarget.value)}\n          onReset={readOnly ? () => {} : onCertificateReset}\n          placeholder=\"Begins with --- BEGIN CERTIFICATE ---\"\n          rows={6}\n          required\n        />\n      </InlineField>\n    </TLSSettingsSection>\n  );\n};\n","import React from 'react';\nimport { cx } from '@emotion/css';\nimport { InlineField, Input } from '@grafana/ui';\nimport { SecretTextArea } from '../common';\nimport { TLSSettingsSection } from './TLSSettingsSection';\nimport { useCommonStyles } from '../styles';\n\nexport type Props = {\n  enabled: boolean;\n  onToggle: (enabled: boolean) => void;\n  serverName: string;\n  clientCertificateConfigured: boolean;\n  clientKeyConfigured: boolean;\n  onServerNameChange: (serverName: string) => void;\n  onClientCertificateChange: (clientCertificate: string) => void;\n  onClientKeyChange: (clientKey: string) => void;\n  onClientCertificateReset: () => void;\n  onClientKeyReset: () => void;\n  tooltips?: {\n    serverNameLabel?: string;\n    certificateLabel?: string;\n    keyLabel?: string;\n  };\n  readOnly: boolean;\n};\n\nexport const TLSClientAuth: React.FC<Props> = ({\n  enabled,\n  serverName,\n  clientCertificateConfigured,\n  clientKeyConfigured,\n  onToggle,\n  onServerNameChange,\n  onClientCertificateChange,\n  onClientKeyChange,\n  onClientCertificateReset,\n  onClientKeyReset,\n  tooltips,\n  readOnly,\n}) => {\n  const commonStyles = useCommonStyles();\n\n  return (\n    <TLSSettingsSection\n      enabled={enabled}\n      label=\"TLS Client Authentication\"\n      tooltipText=\"Validate using TLS client authentication, in which the server authenticates the client\"\n      onToggle={(newEnabled) => onToggle(newEnabled)}\n      readOnly={readOnly}\n    >\n      <InlineField\n        label=\"ServerName\"\n        labelWidth={24}\n        tooltip={tooltips?.serverNameLabel ?? 'A Servername is used to verify the hostname on the returned certificate'}\n        required\n        htmlFor=\"client-auth-servername-input\"\n        interactive\n        grow\n        className={commonStyles.inlineFieldNoMarginRight}\n        disabled={readOnly}\n      >\n        <Input\n          id=\"client-auth-servername-input\"\n          placeholder=\"domain.example.com\"\n          value={serverName}\n          onChange={(e) => onServerNameChange(e.currentTarget.value)}\n          required\n        />\n      </InlineField>\n      <InlineField\n        label=\"Client Certificate\"\n        labelWidth={24}\n        tooltip={\n          tooltips?.certificateLabel ??\n          'The client certificate can be generated from a Certificate Authority or be self-signed'\n        }\n        required\n        htmlFor=\"client-auth-client-certificate-input\"\n        interactive\n        grow\n        className={cx(commonStyles.inlineFieldNoMarginRight, commonStyles.inlineFieldWithSecret)}\n        disabled={readOnly}\n      >\n        <SecretTextArea\n          id=\"client-auth-client-certificate-input\"\n          isConfigured={clientCertificateConfigured}\n          onChange={(e) => onClientCertificateChange(e.currentTarget.value)}\n          onReset={readOnly ? () => {} : onClientCertificateReset}\n          placeholder=\"Begins with --- BEGIN CERTIFICATE ---\"\n          rows={6}\n          required\n        />\n      </InlineField>\n      <InlineField\n        label=\"Client Key\"\n        labelWidth={24}\n        tooltip={tooltips?.keyLabel ?? 'The client key can be generated from a Certificate Authority or be self-signed'}\n        required\n        htmlFor=\"client-auth-client-key-input\"\n        interactive\n        grow\n        className={cx(commonStyles.inlineFieldNoMarginRight, commonStyles.inlineFieldWithSecret)}\n        disabled={readOnly}\n      >\n        <SecretTextArea\n          id=\"client-auth-client-key-input\"\n          isConfigured={clientKeyConfigured}\n          onChange={(e) => onClientKeyChange(e.currentTarget.value)}\n          onReset={readOnly ? () => {} : onClientKeyReset}\n          placeholder={`Begins with --- RSA PRIVATE KEY CERTIFICATE ---`}\n          rows={6}\n          required\n        />\n      </InlineField>\n    </TLSSettingsSection>\n  );\n};\n","import React from 'react';\nimport { TLSSettingsSection } from './TLSSettingsSection';\n\nexport type Props = {\n  enabled: boolean;\n  onToggle: (enabled: boolean) => void;\n  readOnly: boolean;\n};\n\nexport const SkipTLSVerification: React.FC<Props> = ({ enabled, onToggle, readOnly }) => {\n  return (\n    <TLSSettingsSection\n      enabled={enabled}\n      label=\"Skip TLS certificate validation\"\n      tooltipText=\"Skipping TLS certificate validation is not recommended unless absolutely necessary or for testing\"\n      onToggle={(newEnabled) => onToggle(newEnabled)}\n      readOnly={readOnly}\n    />\n  );\n};\n","import React from 'react';\nimport { css } from '@emotion/css';\nimport { useTheme2 } from '@grafana/ui';\nimport { SelfSignedCertificate, Props as SelfSignedCertificateProps } from './SelfSignedCertificate';\nimport { TLSClientAuth as TLSClientAuthComponent, Props as TLSClientAuthProps } from './TLSClientAuth';\nimport { SkipTLSVerification, Props as SkipTLSVerificationProps } from './SkipTLSVerification';\nimport { ConfigSubSection } from '../../ConfigSection';\n\nexport type Props = {\n  selfSignedCertificate: Omit<SelfSignedCertificateProps, 'readOnly'>;\n  TLSClientAuth: Omit<TLSClientAuthProps, 'readOnly'>;\n  skipTLSVerification: Omit<SkipTLSVerificationProps, 'readOnly'>;\n  readOnly: boolean;\n};\n\nexport const TLSSettings: React.FC<Props> = ({\n  selfSignedCertificate,\n  TLSClientAuth,\n  skipTLSVerification,\n  readOnly,\n}) => {\n  const { spacing } = useTheme2();\n\n  const styles = {\n    container: css({\n      marginTop: spacing(3),\n    }),\n  };\n\n  return (\n    <ConfigSubSection\n      className={styles.container}\n      title=\"TLS settings\"\n      description=\"Additional security measures that can be applied on top of authentication\"\n    >\n      <SelfSignedCertificate {...selfSignedCertificate} readOnly={readOnly} />\n      <TLSClientAuthComponent {...TLSClientAuth} readOnly={readOnly} />\n      <SkipTLSVerification {...skipTLSVerification} readOnly={readOnly} />\n    </ConfigSubSection>\n  );\n};\n","import React from 'react';\nimport { css, cx } from '@emotion/css';\nimport { InlineFieldRow, InlineField, Input, IconButton, useTheme2 } from '@grafana/ui';\nimport { SecretInput } from '../common';\nimport type { LocalHeader } from '../types';\nimport { useCommonStyles } from '../styles';\n\nexport type Props = {\n  header: LocalHeader;\n  onChange: (header: LocalHeader) => void;\n  onBlur: () => void;\n  onDelete: () => void;\n  readOnly: boolean;\n};\n\nexport const CustomHeader: React.FC<Props> = ({ header, onChange, onBlur, onDelete, readOnly }) => {\n  const { spacing } = useTheme2();\n  const commonStyles = useCommonStyles();\n  const styles = {\n    container: css({\n      alignItems: 'center',\n    }),\n    input: css({\n      minWidth: '100%',\n    }),\n    headerNameField: css({\n      width: '40%',\n      marginRight: 0,\n      paddingRight: spacing(1),\n    }),\n    headerValueField: css({\n      width: '45%',\n      marginRight: 0,\n    }),\n    removeHeaderBtn: css({\n      margin: `0 0 3px 10px`,\n    }),\n  };\n\n  return (\n    <>\n      <InlineFieldRow className={styles.container}>\n        <InlineField\n          label=\"Header\"\n          labelWidth={9}\n          grow\n          className={styles.headerNameField}\n          htmlFor={`custom-header-${header.id}-name-input`}\n          disabled={readOnly}\n        >\n          <Input\n            id={`custom-header-${header.id}-name-input`}\n            placeholder=\"X-Custom-Header\"\n            value={header.name}\n            width={12}\n            onChange={(e) => onChange({ ...header, name: e.currentTarget.value })}\n            onBlur={onBlur}\n            className={styles.input}\n          />\n        </InlineField>\n        <InlineField\n          label=\"Value\"\n          labelWidth={9}\n          grow\n          className={cx(commonStyles.inlineFieldWithSecret, styles.headerValueField)}\n          htmlFor={`custom-header-${header.id}-value-input`}\n          disabled={readOnly}\n        >\n          <SecretInput\n            id={`custom-header-${header.id}-value-input`}\n            isConfigured={header.configured}\n            placeholder=\"Header value\"\n            value={header.value}\n            width={12}\n            onChange={(e) => onChange({ ...header, value: e.currentTarget.value })}\n            onReset={readOnly ? () => {} : () => onChange({ ...header, configured: false, value: '' })}\n            onBlur={onBlur}\n            className={styles.input}\n          />\n        </InlineField>\n        <IconButton\n          name=\"trash-alt\"\n          tooltip=\"Remove header\"\n          tooltipPlacement=\"top\"\n          className={styles.removeHeaderBtn}\n          onClick={onDelete}\n          type=\"button\"\n          disabled={readOnly}\n        />\n      </InlineFieldRow>\n    </>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport { css } from '@emotion/css';\nimport { Button, useTheme2 } from '@grafana/ui';\nimport { CustomHeader } from './CustomHeader';\nimport { ConfigSubSection } from '../../ConfigSection';\nimport type { Header, HeaderWithValue, LocalHeader } from '../types';\n\nexport type Props = {\n  headers: Header[];\n  onChange: (headers: HeaderWithValue[]) => void;\n  readOnly: boolean;\n};\n\nexport const CustomHeaders: React.FC<Props> = ({ headers: headersFromProps, onChange, readOnly }) => {\n  const { spacing } = useTheme2();\n\n  const [headers, setHeaders] = useState<LocalHeader[]>(\n    headersFromProps.map((header) => ({\n      ...header,\n      id: uniqueId(),\n      value: '',\n    }))\n  );\n\n  useEffect(() => {\n    setHeaders((headers) => {\n      let changed = false;\n      const newHeaders = headers.map<LocalHeader>((header) => {\n        const configured = headersFromProps.find((h) => h.name === header.name)?.configured;\n        if (typeof configured !== 'undefined' && header.configured !== configured) {\n          changed = true;\n          return { ...header, configured };\n        }\n        return header;\n      });\n\n      if (changed) {\n        return newHeaders;\n      }\n\n      return headers;\n    });\n  }, [headersFromProps]);\n\n  const onHeaderAdd = () => {\n    setHeaders([...headers, { id: uniqueId(), name: '', value: '', configured: false }]);\n  };\n\n  const onHeaderChange = (id: string, header: LocalHeader) => {\n    setHeaders(headers.map((h) => (h.id === id ? { ...header } : h)));\n  };\n\n  const onHeaderDelete = (id: string) => {\n    const index = headers.findIndex((h) => h.id === id);\n    if (index === -1) {\n      return;\n    }\n    const newHeaders = [...headers];\n    newHeaders.splice(index, 1);\n    setHeaders(newHeaders);\n    onChange(\n      newHeaders.map(({ name, value, configured }) => ({\n        name,\n        value,\n        configured,\n      }))\n    );\n  };\n\n  const onBlur = () => {\n    onChange(\n      headers.map(({ name, value, configured }) => ({\n        name,\n        value,\n        configured,\n      }))\n    );\n  };\n\n  const styles = {\n    container: css({\n      marginTop: spacing(3),\n    }),\n    addHeaderButton: css({\n      marginTop: spacing(1.5),\n    }),\n  };\n\n  return (\n    <div className={styles.container}>\n      <ConfigSubSection\n        title=\"HTTP headers\"\n        description=\"Pass along additional context and metadata about the request/response\"\n        isCollapsible\n        isInitiallyOpen={headers.length > 0}\n      >\n        <div>\n          {headers.map((header) => (\n            <CustomHeader\n              key={header.id}\n              header={header}\n              onChange={(header) => onHeaderChange(header.id, header)}\n              onDelete={() => onHeaderDelete(header.id)}\n              onBlur={onBlur}\n              readOnly={readOnly}\n            />\n          ))}\n        </div>\n        <div className={styles.addHeaderButton}>\n          <Button icon=\"plus\" variant=\"secondary\" fill=\"outline\" onClick={onHeaderAdd} disabled={readOnly}>\n            {headers.length === 0 ? 'Add header' : 'Add another header'}\n          </Button>\n        </div>\n      </ConfigSubSection>\n    </div>\n  );\n};\n\nfunction uniqueId(): string {\n  return Math.random().toString(16).slice(2);\n}\n","import React from 'react';\nimport { css } from '@emotion/css';\nimport { AuthMethod, DefaultAuthMethod, CustomMethod, CustomMethodId } from './types';\nimport { AuthMethodSettings } from './auth-method/AuthMethodSettings';\nimport { TLSSettings, Props as TLSSettingsProps } from './tls/TLSSettings';\nimport { Props as BasicAuthProps } from './auth-method/BasicAuth';\nimport { CustomHeaders, Props as CustomHeadersProps } from './custom-headers/CustomHeaders';\nimport { ConfigSection } from '../ConfigSection';\n\nexport type Props = {\n  selectedMethod: AuthMethod | CustomMethodId;\n  mostCommonMethod?: AuthMethod | CustomMethodId;\n  visibleMethods?: Array<AuthMethod | CustomMethodId>;\n  extendedDefaultOptions?: Partial<Record<AuthMethod, DefaultAuthMethod>>;\n  customMethods?: CustomMethod[];\n  onAuthMethodSelect: (authType: AuthMethod | CustomMethodId) => void;\n  basicAuth?: Omit<BasicAuthProps, 'readOnly'>;\n  TLS?: Omit<TLSSettingsProps, 'readOnly'>;\n  customHeaders?: Omit<CustomHeadersProps, 'readOnly'>;\n  readOnly?: boolean;\n};\n\nexport const Auth: React.FC<Props> = ({\n  selectedMethod,\n  mostCommonMethod,\n  visibleMethods,\n  extendedDefaultOptions,\n  customMethods,\n  onAuthMethodSelect,\n  basicAuth,\n  TLS,\n  customHeaders,\n  readOnly = false,\n}) => {\n  const styles = {\n    container: css({\n      maxWidth: 578,\n    }),\n  };\n\n  return (\n    <div className={styles.container}>\n      <ConfigSection title=\"Authentication\">\n        <AuthMethodSettings\n          selectedMethod={selectedMethod}\n          mostCommonMethod={mostCommonMethod}\n          customMethods={customMethods}\n          visibleMethods={visibleMethods}\n          extendedDefaultOptions={extendedDefaultOptions}\n          onAuthMethodSelect={onAuthMethodSelect}\n          basicAuth={basicAuth}\n          readOnly={readOnly}\n        />\n        {TLS && <TLSSettings {...TLS} readOnly={readOnly} />}\n        {customHeaders && <CustomHeaders {...customHeaders} readOnly={readOnly} />}\n      </ConfigSection>\n    </div>\n  );\n};\n","import { Props as AuthProps } from './Auth';\nimport { AuthMethod, Header, CustomMethodId } from './types';\nimport { Config, OnChangeHandler } from '../types';\n\nconst headerNamePrefix = 'httpHeaderName';\nconst headerValuePrefix = 'httpHeaderValue';\n\nexport function convertLegacyAuthProps<C extends Config = Config>({\n  config,\n  onChange,\n}: {\n  config: C;\n  onChange: OnChangeHandler<C>;\n}): AuthProps {\n  const props: AuthProps = {\n    selectedMethod: getSelectedMethod<C>(config),\n    onAuthMethodSelect: getOnAuthMethodSelectHandler<C>(config, onChange),\n    basicAuth: getBasicAuthProps<C>(config, onChange),\n    TLS: getTLSProps<C>(config, onChange),\n    customHeaders: getCustomHeaders<C>(config, onChange),\n    readOnly: config.readOnly,\n  };\n\n  return props;\n}\n\nexport function getSelectedMethod<C extends Config = Config>(config: C): AuthMethod {\n  if (config.basicAuth) {\n    return AuthMethod.BasicAuth;\n  }\n  if (config.withCredentials) {\n    return AuthMethod.CrossSiteCredentials;\n  }\n  if (config.jsonData.oauthPassThru) {\n    return AuthMethod.OAuthForward;\n  }\n  return AuthMethod.NoAuth;\n}\n\nexport function getOnAuthMethodSelectHandler<C extends Config = Config>(\n  config: C,\n  onChange: OnChangeHandler<C>\n): (method: AuthMethod | CustomMethodId) => void {\n  return (method: AuthMethod | CustomMethodId) => {\n    onChange({\n      ...config,\n      basicAuth: method === AuthMethod.BasicAuth,\n      withCredentials: method === AuthMethod.CrossSiteCredentials,\n      jsonData: {\n        ...config.jsonData,\n        oauthPassThru: method === AuthMethod.OAuthForward,\n      },\n    });\n  };\n}\n\nexport function getBasicAuthProps<C extends Config = Config>(\n  config: C,\n  onChange: OnChangeHandler<C>\n): AuthProps['basicAuth'] {\n  return {\n    user: config.basicAuthUser,\n    passwordConfigured: config.secureJsonFields.basicAuthPassword,\n    onUserChange: (user: string) => onChange({ ...config, basicAuthUser: user }),\n    onPasswordChange: (password: string) =>\n      onChange({\n        ...config,\n        secureJsonData: {\n          ...config.secureJsonData,\n          basicAuthPassword: password,\n        },\n      }),\n    onPasswordReset: () =>\n      onChange({\n        ...config,\n        secureJsonData: { ...config.secureJsonData, basicAuthPassword: '' },\n        secureJsonFields: {\n          ...config.secureJsonFields,\n          basicAuthPassword: false,\n        },\n      }),\n  };\n}\n\nexport function getTLSProps<C extends Config = Config>(config: C, onChange: OnChangeHandler<C>): AuthProps['TLS'] {\n  return {\n    selfSignedCertificate: {\n      enabled: Boolean(config.jsonData.tlsAuthWithCACert),\n      certificateConfigured: config.secureJsonFields.tlsCACert,\n      onToggle: (enabled) =>\n        onChange({\n          ...config,\n          jsonData: { ...config.jsonData, tlsAuthWithCACert: enabled },\n        }),\n      onCertificateChange: (certificate) =>\n        onChange({\n          ...config,\n          secureJsonData: { ...config.secureJsonData, tlsCACert: certificate },\n        }),\n      onCertificateReset: () =>\n        onChange({\n          ...config,\n          secureJsonData: { ...config.secureJsonData, tlsCACert: '' },\n          secureJsonFields: { ...config.secureJsonFields, tlsCACert: false },\n        }),\n    },\n    TLSClientAuth: {\n      enabled: config.jsonData.tlsAuth,\n      serverName: config.jsonData.serverName,\n      clientCertificateConfigured: config.secureJsonFields.tlsClientCert,\n      clientKeyConfigured: config.secureJsonFields.tlsClientKey,\n      onToggle: (enabled) =>\n        onChange({\n          ...config,\n          jsonData: { ...config.jsonData, tlsAuth: enabled },\n        }),\n      onServerNameChange: (serverName) =>\n        onChange({\n          ...config,\n          jsonData: { ...config.jsonData, serverName },\n        }),\n      onClientCertificateChange: (clientCertificate) =>\n        onChange({\n          ...config,\n          secureJsonData: {\n            ...config.secureJsonData,\n            tlsClientCert: clientCertificate,\n          },\n        }),\n      onClientCertificateReset: () =>\n        onChange({\n          ...config,\n          secureJsonData: {\n            ...config.secureJsonData,\n            tlsClientCert: '',\n          },\n          secureJsonFields: {\n            ...config.secureJsonFields,\n            tlsClientCert: false,\n          },\n        }),\n      onClientKeyChange: (clientKey) =>\n        onChange({\n          ...config,\n          secureJsonData: {\n            ...config.secureJsonData,\n            tlsClientKey: clientKey,\n          },\n        }),\n      onClientKeyReset: () =>\n        onChange({\n          ...config,\n          secureJsonData: {\n            ...config.secureJsonData,\n            tlsClientKey: '',\n          },\n          secureJsonFields: {\n            ...config.secureJsonFields,\n            tlsClientKey: false,\n          },\n        }),\n    },\n    skipTLSVerification: {\n      enabled: config.jsonData.tlsSkipVerify,\n      onToggle: (enabled) =>\n        onChange({\n          ...config,\n          jsonData: { ...config.jsonData, tlsSkipVerify: enabled },\n        }),\n    },\n  };\n}\n\nexport function getCustomHeaders<C extends Config = Config>(\n  config: C,\n  onChange: OnChangeHandler<C>\n): AuthProps['customHeaders'] {\n  const headers: Header[] = Object.keys(config.jsonData)\n    .filter((key) => key.startsWith(headerNamePrefix))\n    .sort()\n    .map((key) => {\n      const index = key.slice(headerNamePrefix.length);\n      return {\n        name: config.jsonData[key],\n        configured: config.secureJsonFields[`${headerValuePrefix}${index}`] ?? false,\n      };\n    });\n\n  return {\n    headers,\n    onChange: (headers) => {\n      const newJsonData = Object.fromEntries(\n        Object.entries(config.jsonData).filter(([key]) => !key.startsWith(headerNamePrefix))\n      );\n      const newSecureJsonData = Object.fromEntries(\n        Object.entries(config.secureJsonData || {}).filter(([key]) => !key.startsWith(headerValuePrefix))\n      );\n      const newSecureJsonFields = Object.fromEntries(\n        Object.entries(config.secureJsonFields).filter(([key]) => !key.startsWith(headerValuePrefix))\n      );\n\n      headers.forEach((header, index) => {\n        newJsonData[`${headerNamePrefix}${index + 1}`] = header.name;\n        if (header.configured) {\n          newSecureJsonFields[`${headerValuePrefix}${index + 1}`] = true;\n        } else {\n          newSecureJsonData[`${headerValuePrefix}${index + 1}`] = header.value;\n        }\n      });\n\n      onChange({\n        ...config,\n        jsonData: newJsonData,\n        secureJsonData: newSecureJsonData,\n        secureJsonFields: newSecureJsonFields,\n      });\n    },\n  };\n}\n","import React, { ReactNode } from 'react';\nimport { css, cx } from '@emotion/css';\nimport { InlineField, Input, PopoverContent } from '@grafana/ui';\nimport { ConfigSection } from '../ConfigSection';\nimport { Config, OnChangeHandler } from '../types';\n\nexport type Props<C extends Config = Config> = {\n  config: C;\n  onChange: OnChangeHandler<C>;\n  description?: ReactNode;\n  urlPlaceholder?: string;\n  urlTooltip?: PopoverContent;\n  urlLabel?: string;\n  className?: string;\n};\n\nexport const ConnectionSettings: <C extends Config = Config>(props: Props<C>) => JSX.Element = ({\n  config,\n  onChange,\n  description,\n  urlPlaceholder,\n  urlTooltip,\n  urlLabel,\n  className,\n}) => {\n  const isValidUrl = /^(ftp|http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-\\/]))?$/.test(\n    config.url\n  );\n\n  const styles = {\n    container: css({\n      maxWidth: 578,\n    }),\n  };\n\n  return (\n    <>\n      <ConfigSection title=\"Connection\" description={description} className={cx(styles.container, className)}>\n        <InlineField\n          htmlFor=\"connection-url\"\n          label={urlLabel || 'URL'}\n          labelWidth={24}\n          tooltip={\n            urlTooltip || (\n              <>\n                Specify a complete HTTP URL\n                <br />\n                (for example https://example.com:8080)\n              </>\n            )\n          }\n          grow\n          disabled={config.readOnly}\n          required\n          invalid={!isValidUrl && !config.readOnly}\n          error={isValidUrl ? '' : 'Please enter a valid URL'}\n          interactive\n        >\n          <Input\n            id=\"connection-url\"\n            aria-label=\"Data source connection URL\"\n            onChange={(event) =>\n              onChange({\n                ...config,\n                url: event.currentTarget.value,\n              })\n            }\n            value={config.url || ''}\n            placeholder={urlPlaceholder || 'URL'}\n          />\n        </InlineField>\n      </ConfigSection>\n    </>\n  );\n};\n","import React from 'react';\nimport { css, cx } from '@emotion/css';\nimport { InlineField, Input, TagsInput } from '@grafana/ui';\nimport { ConfigSubSection } from '../ConfigSection';\nimport { Config, OnChangeHandler } from '../types';\n\nexport type Props<C extends Config = Config> = {\n  config: C;\n  onChange: OnChangeHandler<C>;\n  className?: string;\n};\n\nexport const AdvancedHttpSettings: <C extends Config = Config>(props: Props<C>) => JSX.Element = ({\n  config,\n  onChange,\n  className,\n}) => {\n  const onCookiesChange = (cookies: string[]) => {\n    onChange({\n      ...config,\n      jsonData: {\n        ...config.jsonData,\n        keepCookies: cookies,\n      },\n    });\n  };\n\n  const onTimeoutChange = (event: React.FormEvent<HTMLInputElement>) => {\n    onChange({\n      ...config,\n      jsonData: {\n        ...config.jsonData,\n        timeout: parseInt(event.currentTarget.value, 10),\n      },\n    });\n  };\n\n  const styles = {\n    container: css({\n      maxWidth: 578,\n    }),\n  };\n\n  return (\n    <ConfigSubSection title=\"Advanced HTTP settings\" className={cx(styles.container, className)}>\n      <InlineField\n        htmlFor=\"advanced-http-cookies\"\n        label=\"Allowed cookies\"\n        labelWidth={24}\n        tooltip=\"Grafana proxy deletes forwarded cookies by default. Specify cookies by name that should be forwarded to the data source.\"\n        disabled={config.readOnly}\n        grow\n      >\n        <TagsInput\n          id=\"advanced-http-cookies\"\n          placeholder=\"New cookie (hit enter to add)\"\n          tags={config.jsonData.keepCookies}\n          onChange={onCookiesChange}\n        />\n      </InlineField>\n\n      <InlineField\n        htmlFor=\"advanced-http-timeout\"\n        label=\"Timeout\"\n        labelWidth={24}\n        tooltip=\"HTTP request timeout in seconds\"\n        disabled={config.readOnly}\n        grow\n      >\n        <Input\n          id=\"advanced-http-timeout\"\n          type=\"number\"\n          min={0}\n          placeholder=\"Timeout in seconds\"\n          aria-label=\"Timeout in seconds\"\n          value={config.jsonData.timeout}\n          onChange={onTimeoutChange}\n        />\n      </InlineField>\n    </ConfigSubSection>\n  );\n};\n"],"names":["pipe","filter","map","scan","getBackendSrv","LiveChannelScope","getGrafanaLiveSrv","isLiveChannelMessageEvent","takeWhile","logDebug","OperatorType","MacroType","TokenType","StatementPosition","SuggestionKind","CompletionItemPriority","CompletionItemKind","CompletionItemInsertTextRule","EditorMode","__spreadValues","__spreadProps","getTemplateSrv","m","attachDebugger","createLogger","useRef","useMemo","v4","id","useEffect","useCallback","React","CodeEditor","Registry","_a","__objRest","useStyles2","Button","cx","css","getStyles","ReactUtils","Tooltip","Icon","Field","EditorList","Switch","useState","Select","BaseSelectContainer","Children","isValidElement","cloneElement","useTheme2","IconButton","CONFIGURED_TEXT","RESET_BUTTON_TEXT","HorizontalGroup","Input","TextArea","InlineField","AuthMethod","Checkbox","TLSClientAuth","TLSClientAuthComponent","InlineFieldRow","headers","header","TagsInput"],"mappings":"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"}