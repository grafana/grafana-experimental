{"version":3,"file":"SQLEditor.js","sources":["../../../../src/sql-editor/components/SQLEditor.tsx"],"sourcesContent":["import { CodeEditor, Monaco, monacoTypes } from '@grafana/ui';\nimport React, { useCallback, useEffect, useMemo, useRef } from 'react';\nimport { getStatementPosition } from '../standardSql/getStatementPosition';\nimport { getStandardSuggestions } from '../standardSql/getStandardSuggestions';\nimport { initSuggestionsKindRegistry, SuggestionKindRegistryItem } from '../standardSql/suggestionsKindRegistry';\nimport {\n  CompletionItemInsertTextRule,\n  CompletionItemKind,\n  CompletionItemPriority,\n  CustomSuggestion,\n  PositionContext,\n  SQLCompletionItemProvider,\n  StatementPosition,\n  SuggestionKind,\n} from '../types';\nimport { getSuggestionKinds } from '../utils/getSuggestionKind';\nimport { linkedTokenBuilder } from '../utils/linkedTokenBuilder';\nimport { defaultTableNameParser, getTableToken } from '../utils/tokenUtils';\nimport { TRIGGER_SUGGEST } from '../utils/commands';\nimport { v4 } from 'uuid';\nimport { Registry } from '@grafana/data';\nimport {\n  FunctionsRegistryItem,\n  MacrosRegistryItem,\n  OperatorsRegistryItem,\n  SQLMonarchLanguage,\n  StatementPositionResolversRegistryItem,\n  SuggestionsRegistryItem,\n} from '../standardSql/types';\nimport { initStandardSuggestions } from '../standardSql/standardSuggestionsRegistry';\nimport { initStatementPositionResolvers } from '../standardSql/statementPositionResolversRegistry';\nimport { sqlEditorLog } from '../utils/debugger';\nimport standardSQLLanguageDefinition from '../standardSql/definition';\nimport { getStandardSQLCompletionProvider } from '../standardSql/standardSQLCompletionItemProvider';\n\nconst STANDARD_SQL_LANGUAGE = 'sql';\n\nexport interface LanguageDefinition extends monacoTypes.languages.ILanguageExtensionPoint {\n  loader?: (module: any) => Promise<{\n    language: SQLMonarchLanguage;\n    conf: monacoTypes.languages.LanguageConfiguration;\n  }>;\n  // Provides API for customizing the autocomplete\n  completionProvider?: (m: Monaco, language: SQLMonarchLanguage) => SQLCompletionItemProvider;\n  // Function that returns a formatted query\n  formatter?: (q: string) => string;\n}\n\ninterface SQLEditorProps {\n  query: string;\n  /**\n   * Use for inspecting the query as it changes. I.e. for validation.\n   */\n  onChange?: (q: string, processQuery: boolean) => void;\n  onBlur?: () => void;\n  language?: LanguageDefinition;\n  children?: (props: { formatQuery: () => void }) => React.ReactNode;\n  width?: number;\n  height?: number;\n}\n\ninterface LanguageRegistries {\n  functions: Registry<FunctionsRegistryItem>;\n  operators: Registry<OperatorsRegistryItem>;\n  suggestionKinds: Registry<SuggestionKindRegistryItem>;\n  positionResolvers: Registry<StatementPositionResolversRegistryItem>;\n  macros: Registry<MacrosRegistryItem>;\n}\n\nconst LANGUAGES_CACHE = new Map<string, LanguageRegistries>();\nconst INSTANCE_CACHE = new Map<string, Registry<SuggestionsRegistryItem>>();\n\nexport const SQLEditor: React.FC<SQLEditorProps> = ({\n  children,\n  onBlur,\n  onChange,\n  query,\n  language = { id: STANDARD_SQL_LANGUAGE },\n  width,\n  height,\n}) => {\n  const monacoRef = useRef<monacoTypes.editor.IStandaloneCodeEditor | null>(null);\n  const langUid = useRef<string>();\n  // create unique language id for each SQLEditor instance\n  const id = useMemo(() => {\n    const uid = v4();\n    const id = `${language.id}-${uid}`;\n    langUid.current = id;\n    return id;\n  }, [language.id]);\n\n  useEffect(() => {\n    return () => {\n      if (langUid.current) {\n        INSTANCE_CACHE.delete(langUid.current);\n      }\n      sqlEditorLog(`Removing instance cache ${langUid.current}`, false, INSTANCE_CACHE);\n    };\n  }, []);\n\n  const formatQuery = useCallback(() => {\n    if (monacoRef.current) {\n      monacoRef.current.getAction('editor.action.formatDocument').run();\n    }\n  }, []);\n\n  return (\n    <div style={{ width }}>\n      <CodeEditor\n        height={height || '240px'}\n        // -2px to compensate for borders width\n        width={width ? `${width - 2}px` : undefined}\n        language={id}\n        value={query}\n        onBlur={(v) => {\n          onChange && onChange(v, false);\n          onBlur && onBlur();\n        }}\n        showMiniMap={false}\n        showLineNumbers={true}\n        // Using onEditorDidMount instead of onBeforeEditorMount to support Grafana < 8.2.x\n        onEditorDidMount={(editor, m) => {\n          monacoRef.current = editor;\n          editor.onDidChangeModelContent((e) => {\n            const text = editor.getValue();\n            if (onChange) {\n              onChange(text, false);\n            }\n          });\n\n          editor.addCommand(m.KeyMod.CtrlCmd | m.KeyCode.Enter, () => {\n            const text = editor.getValue();\n            if (onChange) {\n              onChange(text, true);\n            }\n          });\n\n          editor.onKeyUp((e) => {\n            // keyCode 84 is . (DOT)\n            if (e.keyCode === 84) {\n              editor.trigger(TRIGGER_SUGGEST.id, TRIGGER_SUGGEST.id, {});\n            }\n          });\n          registerLanguageAndSuggestions(m, language, id);\n        }}\n      />\n      {children && children({ formatQuery })}\n    </div>\n  );\n};\n\n// There's three ways to define Monaco language:\n// 1. Leave language.id empty or set it to 'sql'. This will load a standard sql language definition, including syntax highlighting and tokenization for\n// common Grafana entities such as macros and template variables\n// 2. Provide a custom language and load it via the async LanguageDefinition.loader callback\n// 3. Specify a language.id that exists in the Monaco language registry. A custom completion item provider can still be provided.\n// If not, the standard SQL completion item provider will be used. See available languages here: https://github.com/microsoft/monaco-editor/tree/main/src/basic-languages\n// If a custom language is specified, its LanguageDefinition will be merged with the LanguageDefinition for standard SQL. This allows the consumer to only\n// override parts of the LanguageDefinition, such as for example the completion item provider.\nconst resolveLanguage = (monaco: Monaco, languageDefinitionProp: LanguageDefinition): LanguageDefinition => {\n  if (languageDefinitionProp?.id !== STANDARD_SQL_LANGUAGE && !languageDefinitionProp.loader) {\n    sqlEditorLog(`Loading language '${languageDefinitionProp?.id}' from Monaco registry`, false);\n    const allLangs = monaco.languages.getLanguages();\n    const custom = allLangs.find(({ id }) => id === languageDefinitionProp?.id);\n    if (!custom) {\n      throw Error(`Unknown Monaco language ${languageDefinitionProp?.id}`);\n    }\n\n    return { completionProvider: getStandardSQLCompletionProvider, ...custom, ...languageDefinitionProp };\n  }\n\n  return {\n    ...standardSQLLanguageDefinition,\n    ...languageDefinitionProp,\n  };\n};\n\nexport const registerLanguageAndSuggestions = async (monaco: Monaco, l: LanguageDefinition, lid: string) => {\n  const languageDefinition = resolveLanguage(monaco, l);\n  if (!languageDefinition.loader) {\n    return;\n  }\n  const { language, conf } = await languageDefinition.loader(monaco);\n  monaco.languages.register({ id: lid });\n  monaco.languages.setMonarchTokensProvider(lid, { ...language });\n  monaco.languages.setLanguageConfiguration(lid, { ...conf });\n\n  if (languageDefinition.formatter) {\n    monaco.languages.registerDocumentFormattingEditProvider(lid, {\n      provideDocumentFormattingEdits: (model) => {\n        const formatted = l.formatter?.(model.getValue());\n        return [\n          {\n            range: model.getFullModelRange(),\n            text: formatted || '',\n          },\n        ];\n      },\n    });\n  }\n\n  if (languageDefinition.completionProvider) {\n    const customProvider = languageDefinition.completionProvider(monaco, language);\n    extendStandardRegistries(l.id, lid, customProvider);\n    const languageSuggestionsRegistries = LANGUAGES_CACHE.get(l.id)!;\n    const instanceSuggestionsRegistry = INSTANCE_CACHE.get(lid)!;\n\n    const completionProvider: monacoTypes.languages.CompletionItemProvider['provideCompletionItems'] = async (\n      model,\n      position,\n      context,\n      token\n    ) => {\n      const currentToken = linkedTokenBuilder(monaco, model, position, lid);\n      const statementPosition = getStatementPosition(currentToken, languageSuggestionsRegistries.positionResolvers);\n      const kind = getSuggestionKinds(statementPosition, languageSuggestionsRegistries.suggestionKinds);\n\n      sqlEditorLog('Statement position', false, statementPosition);\n      sqlEditorLog('Suggestion kinds', false, kind);\n\n      const ctx: PositionContext = {\n        position,\n        currentToken,\n        statementPosition,\n        kind,\n        range: monaco.Range.fromPositions(position),\n      };\n\n      const stdSuggestions = await getStandardSuggestions(monaco, currentToken, kind, ctx, instanceSuggestionsRegistry);\n\n      return {\n        suggestions: stdSuggestions,\n      };\n    };\n\n    monaco.languages.registerCompletionItemProvider(lid, {\n      ...customProvider,\n      provideCompletionItems: completionProvider,\n    });\n  }\n};\n\nfunction extendStandardRegistries(id: string, lid: string, customProvider: SQLCompletionItemProvider) {\n  if (!LANGUAGES_CACHE.has(id)) {\n    initializeLanguageRegistries(id);\n  }\n\n  const languageRegistries = LANGUAGES_CACHE.get(id)!;\n\n  if (!INSTANCE_CACHE.has(lid)) {\n    INSTANCE_CACHE.set(\n      lid,\n      new Registry(\n        initStandardSuggestions(languageRegistries.functions, languageRegistries.operators, languageRegistries.macros)\n      )\n    );\n  }\n\n  const instanceSuggestionsRegistry = INSTANCE_CACHE.get(lid)!;\n\n  if (customProvider.supportedFunctions) {\n    for (const func of customProvider.supportedFunctions()) {\n      const exists = languageRegistries.functions.getIfExists(func.id);\n      if (!exists) {\n        languageRegistries.functions.register(func);\n      }\n    }\n  }\n\n  if (customProvider.supportedOperators) {\n    for (const op of customProvider.supportedOperators()) {\n      const exists = languageRegistries.operators.getIfExists(op.id);\n      if (!exists) {\n        languageRegistries.operators.register({ ...op, name: op.id });\n      }\n    }\n  }\n\n  if (customProvider.supportedMacros) {\n    for (const macro of customProvider.supportedMacros()) {\n      const exists = languageRegistries.macros.getIfExists(macro.id);\n      if (!exists) {\n        languageRegistries.macros.register({ ...macro, name: macro.id });\n      }\n    }\n  }\n\n  if (customProvider.customStatementPlacement) {\n    for (const placement of customProvider.customStatementPlacement()) {\n      const exists = languageRegistries.positionResolvers.getIfExists(placement.id);\n      if (!exists) {\n        languageRegistries.positionResolvers.register({\n          ...placement,\n          id: placement.id as StatementPosition,\n          name: placement.id,\n        });\n        languageRegistries.suggestionKinds.register({\n          id: placement.id as StatementPosition,\n          name: placement.id,\n          kind: [],\n        });\n      } else {\n        // Allow extension to the built-in placement resolvers\n        const origResolve = exists.resolve;\n        exists.resolve = (...args) => {\n          const ext = placement.resolve(...args);\n          if (placement.overrideDefault) {\n            return ext;\n          }\n          const orig = origResolve(...args);\n          return orig || ext;\n        };\n      }\n    }\n  }\n\n  if (customProvider.customSuggestionKinds) {\n    for (const kind of customProvider.customSuggestionKinds()) {\n      kind.applyTo?.forEach((applyTo) => {\n        const exists = languageRegistries.suggestionKinds.getIfExists(applyTo);\n        if (exists) {\n          // avoid duplicates\n          if (exists.kind.indexOf(kind.id as SuggestionKind) === -1) {\n            exists.kind.push(kind.id as SuggestionKind);\n          }\n        }\n      });\n\n      if (kind.overrideDefault) {\n        const stbBehaviour = instanceSuggestionsRegistry.get(kind.id);\n        if (stbBehaviour !== undefined) {\n          stbBehaviour.suggestions = kind.suggestionsResolver;\n          continue;\n        }\n      }\n\n      instanceSuggestionsRegistry.register({\n        id: kind.id as SuggestionKind,\n        name: kind.id,\n        suggestions: kind.suggestionsResolver,\n      });\n    }\n  }\n\n  if (customProvider.schemas) {\n    const stbBehaviour = instanceSuggestionsRegistry.get(SuggestionKind.Schemas);\n    const s = stbBehaviour.suggestions;\n    stbBehaviour.suggestions = async (ctx, m) => {\n      const standardSchemas = await s(ctx, m);\n      if (!customProvider.schemas) {\n        return [...standardSchemas];\n      }\n      const customSchemas = await customProvider.schemas.resolve();\n      const customSchemaCompletionItems = customSchemas.map((x) => ({\n        label: x.name,\n        insertText: `${x.completion ?? x.name}.`,\n        command: TRIGGER_SUGGEST,\n        kind: CompletionItemKind.Module, // it's nice to differentiate schemas from tables\n        sortText: CompletionItemPriority.High,\n      }));\n      return [...standardSchemas, ...customSchemaCompletionItems];\n    };\n  }\n\n  if (customProvider.tables) {\n    const stbBehaviour = instanceSuggestionsRegistry.get(SuggestionKind.Tables);\n    const s = stbBehaviour.suggestions;\n    stbBehaviour.suggestions = async (ctx, m) => {\n      const o = await s(ctx, m);\n      const tableToken = getTableToken(ctx.currentToken);\n      const tableNameParser = customProvider.tables?.parseName ?? defaultTableNameParser;\n\n      const tableIdentifier = tableNameParser(tableToken);\n\n      const oo = ((await customProvider.tables?.resolve?.(tableIdentifier)) ?? []).map((x) => ({\n        label: x.name,\n        // if no custom completion is provided it's safe to move cursor further in the statement\n        insertText: `${x.completion ?? x.name}${x.completion === x.name ? ' $0' : ''}`,\n        insertTextRules: CompletionItemInsertTextRule.InsertAsSnippet,\n        command: TRIGGER_SUGGEST,\n        kind: CompletionItemKind.Field,\n        sortText: CompletionItemPriority.MediumHigh,\n      }));\n      return [...o, ...oo];\n    };\n  }\n\n  if (customProvider.columns) {\n    const stbBehaviour = instanceSuggestionsRegistry.get(SuggestionKind.Columns);\n    const s = stbBehaviour.suggestions;\n    stbBehaviour.suggestions = async (ctx, m) => {\n      const o = await s(ctx, m);\n      const tableToken = getTableToken(ctx.currentToken);\n      let tableIdentifier;\n      const tableNameParser = customProvider.tables?.parseName ?? defaultTableNameParser;\n\n      if (tableToken && tableToken.value) {\n        tableIdentifier = tableNameParser(tableToken);\n      }\n\n      let oo: CustomSuggestion[] = [];\n      if (tableIdentifier) {\n        const columns = await customProvider.columns?.resolve!(tableIdentifier);\n        oo = columns\n          ? columns.map<CustomSuggestion>((x) => ({\n              label: x.name,\n              insertText: x.completion ?? x.name,\n              kind: CompletionItemKind.Field,\n              sortText: CompletionItemPriority.High,\n              detail: x.type,\n              documentation: x.description,\n            }))\n          : [];\n      }\n      return [...o, ...oo];\n    };\n  }\n}\n\n/**\n * Initializes language specific registries that are treated as singletons\n */\nfunction initializeLanguageRegistries(id: string) {\n  if (!LANGUAGES_CACHE.has(id)) {\n    LANGUAGES_CACHE.set(id, {\n      functions: new Registry(),\n      operators: new Registry(),\n      suggestionKinds: new Registry(initSuggestionsKindRegistry),\n      positionResolvers: new Registry(initStatementPositionResolvers),\n      macros: new Registry(),\n    });\n  }\n\n  return LANGUAGES_CACHE.get(id)!;\n}\n"],"names":["id","React","_a"],"mappings":"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"}