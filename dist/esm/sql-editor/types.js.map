{"version":3,"file":"types.js","sources":["../../../src/sql-editor/types.ts"],"sourcesContent":["import { Monaco, monacoTypes } from '@grafana/ui';\nimport { SQLMonarchLanguage, StatementPositionResolver, SuggestionsResolver } from './standardSql/types';\nimport { LinkedToken } from './utils/LinkedToken';\n\n/**\n * Provides a context for suggestions resolver\n * @alpha\n */\nexport interface PositionContext {\n  position: monacoTypes.IPosition;\n  kind: SuggestionKind[];\n  statementPosition: StatementPosition[];\n  currentToken: LinkedToken | null;\n  range: monacoTypes.IRange;\n}\n\nexport type CustomSuggestion = Partial<monacoTypes.languages.CompletionItem> & { label: string };\n\nexport interface CustomSuggestionKind {\n  id: string;\n  suggestionsResolver: SuggestionsResolver;\n  applyTo?: Array<StatementPosition | string>;\n  overrideDefault?: boolean;\n}\n\nexport interface CustomStatementPlacement {\n  id: string;\n  name?: string;\n  resolve: StatementPositionResolver;\n  overrideDefault?: boolean;\n}\nexport type StatementPlacementProvider = () => CustomStatementPlacement[];\nexport type SuggestionKindProvider = () => CustomSuggestionKind[];\n\nexport interface ColumnDefinition {\n  name: string;\n  type?: string;\n  description?: string;\n  // Text used for automplete. If not provided name is used.\n  completion?: string;\n}\n\nexport interface SchemaDefinition {\n  name: string;\n  // Text used for autocomplete. If not provided name is used.\n  completion?: string;\n}\n\nexport interface TableDefinition {\n  name: string;\n  // Text used for automplete. If not provided name is used.\n  completion?: string;\n}\n\nexport interface Operator {\n  id: string;\n  operator: string;\n  type: OperatorType;\n  description?: string;\n}\n\nexport interface TableIdentifier {\n  table?: string;\n  schema?: string;\n}\n\nexport interface SQLCompletionItemProvider\n  extends Omit<monacoTypes.languages.CompletionItemProvider, 'provideCompletionItems'> {\n  /**\n   * Allows dialect specific functions to be added to the completion list.\n   * @alpha\n   */\n  supportedFunctions?: () => Array<{\n    id: string;\n    name: string;\n    description?: string;\n  }>;\n\n  /**\n   * Allows dialect specific operators to be added to the completion list.\n   * @alpha\n   */\n  supportedOperators?: () => Array<{\n    id: string;\n    operator: string;\n    type: OperatorType;\n    description?: string;\n  }>;\n\n  supportedMacros?: () => Array<{\n    id: string;\n    text: string;\n    type: MacroType;\n    args: string[];\n    description?: string;\n  }>;\n\n  /**\n   * Allows custom suggestion kinds to be defined and correlate them with <Custom>StatementPosition.\n   * @alpha\n   */\n  customSuggestionKinds?: SuggestionKindProvider;\n\n  /**\n   * Allows custom statement placement definition.\n   * @alpha\n   */\n  customStatementPlacement?: StatementPlacementProvider;\n\n  /**\n   * Allows providing a custom function for resolving schemas.\n   * It's up to the consumer to decide whether the schemas are resolved via API calls or preloaded in the query editor(i.e. full db schema is preloades loaded).\n   * @alpha\n   */\n  schemas?: {\n    resolve: () => Promise<SchemaDefinition[]>;\n  };\n\n  /**\n   * Allows providing a custom function for resolving db tables.\n   * It's up to the consumer to decide whether the columns are resolved via API calls or preloaded in the query editor(i.e. full db schema is preloades loaded).\n   * @alpha\n   */\n  tables?: {\n    resolve: (TableIdentifier: TableIdentifier | null) => Promise<TableDefinition[]>;\n    // Allows providing a custom function for calculating the table name from the query. If not specified a default implemnentation is used.\n    parseName?: (token: LinkedToken | null | undefined) => TableIdentifier;\n  };\n  /**\n   * Allows providing a custom function for resolving table.\n   * It's up to the consumer to decide whether the columns are resolved via API calls or preloaded in the query editor(i.e. full db schema is preloades loaded).\n   * @alpha\n   */\n  columns?: {\n    resolve: (identifier?: TableIdentifier) => Promise<ColumnDefinition[]>;\n  };\n\n  /**\n   * TODO: Not sure whether or not we need this. Would like to avoid this kind of flexibility.\n   * @alpha\n   */\n  provideCompletionItems?: (\n    model: monacoTypes.editor.ITextModel,\n    position: monacoTypes.Position,\n    context: monacoTypes.languages.CompletionContext,\n    token: monacoTypes.CancellationToken,\n    positionContext: PositionContext // Decorates original provideCompletionItems function with our custom statement position context\n  ) => monacoTypes.languages.CompletionList;\n}\n\nexport type LanguageCompletionProvider = (m: Monaco, l?: SQLMonarchLanguage) => SQLCompletionItemProvider;\n\nexport enum OperatorType {\n  Comparison,\n  Logical,\n}\n\nexport enum MacroType {\n  Value,\n  Filter,\n  Group,\n  Column,\n  Table,\n}\n\nexport enum TokenType {\n  Parenthesis = 'delimiter.parenthesis.sql',\n  Whitespace = 'white.sql',\n  Keyword = 'keyword.sql',\n  Delimiter = 'delimiter.sql',\n  Operator = 'operator.sql',\n  Identifier = 'identifier.sql',\n  IdentifierQuote = 'identifier.quote.sql',\n  Type = 'type.sql',\n  Function = 'predefined.sql',\n  Number = 'number.sql',\n  String = 'string.sql',\n  Variable = 'variable.sql',\n}\n\nexport enum StatementPosition {\n  Unknown = 'unknown',\n  SelectKeyword = 'selectKeyword',\n  WithKeyword = 'withKeyword',\n  AfterSelectKeyword = 'afterSelectKeyword',\n  AfterSelectArguments = 'afterSelectArguments',\n  AfterSelectFuncFirstArgument = 'afterSelectFuncFirstArgument',\n  SelectAlias = 'selectAlias',\n  AfterFromKeyword = 'afterFromKeyword',\n  AfterTable = 'afterTable',\n  SchemaFuncFirstArgument = 'schemaFuncFirstArgument',\n  SchemaFuncExtraArgument = 'schemaFuncExtraArgument',\n  FromKeyword = 'fromKeyword',\n  AfterFrom = 'afterFrom',\n  WhereKeyword = 'whereKeyword',\n  WhereComparisonOperator = 'whereComparisonOperator',\n  WhereValue = 'whereValue',\n  AfterWhereFunctionArgument = 'afterWhereFunctionArgument',\n  AfterGroupByFunctionArgument = 'afterGroupByFunctionArgument',\n  AfterWhereValue = 'afterWhereValue',\n  AfterGroupByKeywords = 'afterGroupByKeywords',\n  AfterGroupBy = 'afterGroupBy',\n  AfterOrderByKeywords = 'afterOrderByKeywords',\n  AfterOrderByFunction = 'afterOrderByFunction',\n  AfterOrderByDirection = 'afterOrderByDirection',\n  AfterIsOperator = 'afterIsOperator',\n  AfterIsNotOperator = 'afterIsNotOperator',\n  AfterSchema = 'afterSchema',\n}\n\nexport enum SuggestionKind {\n  Schemas = 'schemas',\n  Tables = 'tables',\n  Columns = 'columns',\n  SelectKeyword = 'selectKeyword',\n  WithKeyword = 'withKeyword',\n  FunctionsWithArguments = 'functionsWithArguments',\n  FromKeyword = 'fromKeyword',\n  WhereKeyword = 'whereKeyword',\n  GroupByKeywords = 'groupByKeywords',\n  OrderByKeywords = 'orderByKeywords',\n  FunctionsWithoutArguments = 'functionsWithoutArguments',\n  LimitKeyword = 'limitKeyword',\n  SortOrderDirectionKeyword = 'sortOrderDirectionKeyword',\n  ComparisonOperators = 'comparisonOperators',\n  LogicalOperators = 'logicalOperators',\n  SelectMacro = 'selectMacro',\n  TableMacro = 'tableMacro',\n  FilterMacro = 'filterMacro',\n  GroupMacro = 'groupMacro',\n  BoolValues = 'boolValues',\n  NullValue = 'nullValue',\n  NotKeyword = 'notKeyword',\n  TemplateVariables = 'templateVariables',\n  StarWildCard = 'starWildCard',\n}\n\n// TODO: export from grafana/ui\nexport enum CompletionItemPriority {\n  High = 'a',\n  MediumHigh = 'd',\n  Medium = 'g',\n  MediumLow = 'k',\n  Low = 'q',\n}\n\nexport enum CompletionItemKind {\n  Method = 0,\n  Function = 1,\n  Constructor = 2,\n  Field = 3,\n  Variable = 4,\n  Class = 5,\n  Struct = 6,\n  Interface = 7,\n  Module = 8,\n  Property = 9,\n  Event = 10,\n  Operator = 11,\n  Unit = 12,\n  Value = 13,\n  Constant = 14,\n  Enum = 15,\n  EnumMember = 16,\n  Keyword = 17,\n  Text = 18,\n  Color = 19,\n  File = 20,\n  Reference = 21,\n  Customcolor = 22,\n  Folder = 23,\n  TypeParameter = 24,\n  User = 25,\n  Issue = 26,\n  Snippet = 27,\n}\n\nexport enum CompletionItemInsertTextRule {\n  KeepWhitespace = 1,\n  InsertAsSnippet = 4,\n}\n\nexport enum EditorMode {\n  Builder = 'builder',\n  Code = 'code',\n}\n"],"names":["OperatorType","MacroType","TokenType","StatementPosition","SuggestionKind","CompletionItemPriority","CompletionItemKind","CompletionItemInsertTextRule","EditorMode"],"mappings":"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"}