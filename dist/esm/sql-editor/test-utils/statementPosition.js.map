{"version":3,"file":"statementPosition.js","sources":["../../../../src/sql-editor/test-utils/statementPosition.ts"],"sourcesContent":["import { Registry } from '@grafana/data';\nimport { monacoTypes } from '@grafana/ui';\nimport { getMonacoMock } from '../mocks/Monaco';\nimport { TextModel } from '../mocks/TextModel';\nimport { getStatementPosition } from '../standardSql/getStatementPosition';\nimport { StatementPositionResolversRegistryItem } from '../standardSql/types';\nimport { CustomStatementPlacement, StatementPosition } from '../types';\nimport { linkedTokenBuilder } from '../utils/linkedTokenBuilder';\nimport { StatementPositionResolverTestCase } from './types';\n\nfunction assertPosition(\n  query: string,\n  position: monacoTypes.IPosition,\n  expected: StatementPosition | string,\n  monacoMock: any,\n  resolversRegistry: Registry<StatementPositionResolversRegistryItem>\n) {\n  const testModel = TextModel(query);\n  const current = linkedTokenBuilder(monacoMock, testModel as monacoTypes.editor.ITextModel, position);\n  const statementPosition = getStatementPosition(current, resolversRegistry);\n\n  expect(statementPosition).toContain(expected);\n}\n\nexport const testStatementPosition = (\n  expected: StatementPosition | string,\n  cases: StatementPositionResolverTestCase[],\n  resolvers: () => CustomStatementPlacement[]\n) => {\n  describe(`${expected}`, () => {\n    let MonacoMock: any;\n    let statementPositionResolversRegistry: Registry<StatementPositionResolversRegistryItem>;\n\n    beforeEach(() => {\n      const mockQueries = new Map<string, Array<Array<Pick<monacoTypes.Token, 'language' | 'offset' | 'type'>>>>();\n      cases.forEach((c) => mockQueries.set(c.query.query, c.query.tokens));\n\n      MonacoMock = getMonacoMock(mockQueries);\n      statementPositionResolversRegistry = new Registry(() => {\n        return resolvers().map((r) => ({\n          id: r.id as StatementPosition,\n          name: r.name || r.id,\n          resolve: r.resolve,\n        }));\n      });\n    });\n\n    // using forEach here rather than test.each as been struggling to get the arguments intepolated in test name string\n    cases.forEach((c) => {\n      test(`${c.query.query}`, () => {\n        assertPosition(\n          c.query.query,\n          { lineNumber: c.position.line, column: c.position.column },\n          expected,\n          MonacoMock,\n          statementPositionResolversRegistry\n        );\n      });\n    });\n  });\n};\n"],"names":[],"mappings":";;;;;;AAUA,SAAS,cACP,CAAA,KAAA,EACA,QACA,EAAA,QAAA,EACA,YACA,iBACA,EAAA;AACA,EAAM,MAAA,SAAA,GAAY,UAAU,KAAK,CAAA,CAAA;AACjC,EAAA,MAAM,OAAU,GAAA,kBAAA,CAAmB,UAAY,EAAA,SAAA,EAA4C,QAAQ,CAAA,CAAA;AACnG,EAAM,MAAA,iBAAA,GAAoB,oBAAqB,CAAA,OAAA,EAAS,iBAAiB,CAAA,CAAA;AAEzE,EAAO,MAAA,CAAA,iBAAiB,CAAE,CAAA,SAAA,CAAU,QAAQ,CAAA,CAAA;AAC9C,CAAA;AAEO,MAAM,qBAAwB,GAAA,CACnC,QACA,EAAA,KAAA,EACA,SACG,KAAA;AACH,EAAS,QAAA,CAAA,CAAA,EAAG,YAAY,MAAM;AAC5B,IAAI,IAAA,UAAA,CAAA;AACJ,IAAI,IAAA,kCAAA,CAAA;AAEJ,IAAA,UAAA,CAAW,MAAM;AACf,MAAM,MAAA,WAAA,uBAAkB,GAAmF,EAAA,CAAA;AAC3G,MAAM,KAAA,CAAA,OAAA,CAAQ,CAAC,CAAA,KAAM,WAAY,CAAA,GAAA,CAAI,CAAE,CAAA,KAAA,CAAM,KAAO,EAAA,CAAA,CAAE,KAAM,CAAA,MAAM,CAAC,CAAA,CAAA;AAEnE,MAAA,UAAA,GAAa,cAAc,WAAW,CAAA,CAAA;AACtC,MAAqC,kCAAA,GAAA,IAAI,SAAS,MAAM;AACtD,QAAA,OAAO,SAAU,EAAA,CAAE,GAAI,CAAA,CAAC,CAAO,MAAA;AAAA,UAC7B,IAAI,CAAE,CAAA,EAAA;AAAA,UACN,IAAA,EAAM,CAAE,CAAA,IAAA,IAAQ,CAAE,CAAA,EAAA;AAAA,UAClB,SAAS,CAAE,CAAA,OAAA;AAAA,SACX,CAAA,CAAA,CAAA;AAAA,OACH,CAAA,CAAA;AAAA,KACF,CAAA,CAAA;AAGD,IAAM,KAAA,CAAA,OAAA,CAAQ,CAAC,CAAM,KAAA;AACnB,MAAA,IAAA,CAAK,CAAG,EAAA,CAAA,CAAE,KAAM,CAAA,KAAA,CAAA,CAAA,EAAS,MAAM;AAC7B,QAAA,cAAA;AAAA,UACE,EAAE,KAAM,CAAA,KAAA;AAAA,UACR,EAAE,YAAY,CAAE,CAAA,QAAA,CAAS,MAAM,MAAQ,EAAA,CAAA,CAAE,SAAS,MAAO,EAAA;AAAA,UACzD,QAAA;AAAA,UACA,UAAA;AAAA,UACA,kCAAA;AAAA,SACF,CAAA;AAAA,OACD,CAAA,CAAA;AAAA,KACF,CAAA,CAAA;AAAA,GACF,CAAA,CAAA;AACH;;;;"}