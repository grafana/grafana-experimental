{"version":3,"file":"standardSQLCompletionItemProvider.js","sources":["../../../../src/sql-editor/standardSql/standardSQLCompletionItemProvider.ts"],"sourcesContent":["import { Monaco } from '@grafana/ui';\nimport { Operator, OperatorType, SQLCompletionItemProvider } from '../types';\nimport { MACROS } from './macros';\nimport { SQLMonarchLanguage } from './types';\n\nexport function getStandardSQLCompletionProvider(\n  monaco: Monaco,\n  language: SQLMonarchLanguage\n): SQLCompletionItemProvider {\n  const provider: SQLCompletionItemProvider = { triggerCharacters: ['.', ' ', '$', ',', '(', \"'\"] };\n  if (language && Array.isArray(language.builtinFunctions)) {\n    provider.supportedFunctions = () => language.builtinFunctions!.map((f) => ({ id: f, name: f }));\n  }\n\n  const operators: Operator[] = [];\n  if (language?.comparisonOperators?.length) {\n    operators.push(\n      ...language.comparisonOperators.map((f) => ({\n        id: f.toLocaleLowerCase(),\n        operator: f,\n        type: OperatorType.Comparison,\n      }))\n    );\n  }\n\n  // some languages in the monaco language registry don't specify logical operators, only operators. if so, suggest them instead\n  language.logicalOperators = language.logicalOperators ?? language.operators;\n  if (language?.logicalOperators?.length) {\n    operators.push(\n      ...language.logicalOperators.map((f) => ({ id: f.toLocaleLowerCase(), operator: f, type: OperatorType.Logical }))\n    );\n  }\n\n  provider.supportedOperators = () => operators;\n\n  provider.supportedMacros = () => MACROS;\n\n  return provider;\n}\n"],"names":[],"mappings":";;;AAKgB,SAAA,gCAAA,CACd,QACA,QAC2B,EAAA;AAR7B,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,CAAA;AASE,EAAM,MAAA,QAAA,GAAsC,EAAE,iBAAA,EAAmB,CAAC,GAAA,EAAK,KAAK,GAAK,EAAA,GAAA,EAAK,GAAK,EAAA,GAAG,CAAE,EAAA,CAAA;AAChG,EAAA,IAAI,QAAY,IAAA,KAAA,CAAM,OAAQ,CAAA,QAAA,CAAS,gBAAgB,CAAG,EAAA;AACxD,IAAA,QAAA,CAAS,kBAAqB,GAAA,MAAM,QAAS,CAAA,gBAAA,CAAkB,GAAI,CAAA,CAAC,CAAO,MAAA,EAAE,EAAI,EAAA,CAAA,EAAG,IAAM,EAAA,CAAA,EAAI,CAAA,CAAA,CAAA;AAAA,GAChG;AAEA,EAAA,MAAM,YAAwB,EAAC,CAAA;AAC/B,EAAI,IAAA,CAAA,EAAA,GAAA,QAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,QAAA,CAAU,mBAAV,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAA+B,MAAQ,EAAA;AACzC,IAAU,SAAA,CAAA,IAAA;AAAA,MACR,GAAG,QAAA,CAAS,mBAAoB,CAAA,GAAA,CAAI,CAAC,CAAO,MAAA;AAAA,QAC1C,EAAA,EAAI,EAAE,iBAAkB,EAAA;AAAA,QACxB,QAAU,EAAA,CAAA;AAAA,QACV,MAAM,YAAa,CAAA,UAAA;AAAA,OACnB,CAAA,CAAA;AAAA,KACJ,CAAA;AAAA,GACF;AAGA,EAAA,QAAA,CAAS,gBAAmB,GAAA,CAAA,EAAA,GAAA,QAAA,CAAS,gBAAT,KAAA,IAAA,GAAA,EAAA,GAA6B,QAAS,CAAA,SAAA,CAAA;AAClE,EAAI,IAAA,CAAA,EAAA,GAAA,QAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,QAAA,CAAU,gBAAV,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAA4B,MAAQ,EAAA;AACtC,IAAU,SAAA,CAAA,IAAA;AAAA,MACR,GAAG,QAAS,CAAA,gBAAA,CAAiB,GAAI,CAAA,CAAC,OAAO,EAAE,EAAA,EAAI,CAAE,CAAA,iBAAA,IAAqB,QAAU,EAAA,CAAA,EAAG,IAAM,EAAA,YAAA,CAAa,SAAU,CAAA,CAAA;AAAA,KAClH,CAAA;AAAA,GACF;AAEA,EAAA,QAAA,CAAS,qBAAqB,MAAM,SAAA,CAAA;AAEpC,EAAA,QAAA,CAAS,kBAAkB,MAAM,MAAA,CAAA;AAEjC,EAAO,OAAA,QAAA,CAAA;AACT;;;;"}