{"version":3,"file":"statementPositionResolversRegistry.js","sources":["../../../../src/sql-editor/standardSql/statementPositionResolversRegistry.ts"],"sourcesContent":["import { StatementPosition, TokenType } from '../types';\nimport { AND, AS, ASC, BY, DESC, FROM, GROUP, ORDER, SELECT, WHERE, WITH } from './language';\nimport { StatementPositionResolversRegistryItem } from './types';\n\nexport function initStatementPositionResolvers(): StatementPositionResolversRegistryItem[] {\n  return [\n    {\n      id: StatementPosition.SelectKeyword,\n      name: StatementPosition.SelectKeyword,\n      resolve: (currentToken, previousKeyword, previousNonWhiteSpace, previousIsSlash) =>\n        Boolean(\n          currentToken === null ||\n            (currentToken.isWhiteSpace() && currentToken.previous === null) ||\n            currentToken.is(TokenType.Keyword, SELECT) ||\n            (currentToken.is(TokenType.Keyword, SELECT) && currentToken.previous === null) ||\n            previousIsSlash ||\n            (currentToken.isIdentifier() && (previousIsSlash || currentToken?.previous === null)) ||\n            (currentToken.isIdentifier() && SELECT.startsWith(currentToken.value.toLowerCase()))\n        ),\n    },\n    {\n      id: StatementPosition.WithKeyword,\n      name: StatementPosition.WithKeyword,\n      resolve: (currentToken, previousKeyword, previousNonWhiteSpace, previousIsSlash) =>\n        Boolean(\n          currentToken === null ||\n            (currentToken.isWhiteSpace() && currentToken.previous === null) ||\n            (currentToken.is(TokenType.Keyword, WITH) && currentToken.previous === null) ||\n            (currentToken.isIdentifier() && WITH.toLowerCase().startsWith(currentToken.value.toLowerCase()))\n        ),\n    },\n    {\n      id: StatementPosition.AfterSelectKeyword,\n      name: StatementPosition.AfterSelectKeyword,\n      resolve: (currentToken, previousKeyword, previousNonWhiteSpace, previousIsSlash) =>\n        Boolean(previousNonWhiteSpace?.value.toLowerCase() === SELECT),\n    },\n    {\n      id: StatementPosition.AfterSelectArguments,\n      name: StatementPosition.AfterSelectArguments,\n      resolve: (currentToken, previousKeyword, previousNonWhiteSpace, previousIsSlash) => {\n        return Boolean(previousKeyword?.value.toLowerCase() === SELECT && previousNonWhiteSpace?.value === ',');\n      },\n    },\n    {\n      id: StatementPosition.AfterSelectFuncFirstArgument,\n      name: StatementPosition.AfterSelectFuncFirstArgument,\n      resolve: (currentToken, previousKeyword, previousNonWhiteSpace, previousIsSlash) => {\n        return Boolean(\n          (previousKeyword?.value.toLowerCase() === SELECT || previousKeyword?.value.toLowerCase() === AS) &&\n            (previousNonWhiteSpace?.is(TokenType.Parenthesis, '(') || currentToken?.is(TokenType.Parenthesis, '()'))\n        );\n      },\n    },\n    {\n      id: StatementPosition.AfterWhereFunctionArgument,\n      name: StatementPosition.AfterWhereFunctionArgument,\n      resolve: (currentToken, previousKeyword, previousNonWhiteSpace, previousIsSlash) => {\n        return Boolean(\n          previousKeyword?.is(TokenType.Keyword, WHERE) &&\n            (previousNonWhiteSpace?.is(TokenType.Parenthesis, '(') || currentToken?.is(TokenType.Parenthesis, '()'))\n        );\n      },\n    },\n    {\n      id: StatementPosition.AfterGroupBy,\n      name: StatementPosition.AfterGroupBy,\n      resolve: (currentToken, previousKeyword, previousNonWhiteSpace, previousIsSlash) =>\n        Boolean(\n          previousKeyword?.is(TokenType.Keyword, BY) &&\n            previousKeyword?.getPreviousKeyword()?.is(TokenType.Keyword, GROUP) &&\n            (previousNonWhiteSpace?.isIdentifier() ||\n              previousNonWhiteSpace?.isDoubleQuotedString() ||\n              previousNonWhiteSpace?.is(TokenType.Parenthesis, ')') ||\n              previousNonWhiteSpace?.is(TokenType.Parenthesis, '()'))\n        ),\n    },\n    {\n      id: StatementPosition.SelectAlias,\n      name: StatementPosition.SelectAlias,\n      resolve: (currentToken, previousKeyword, previousNonWhiteSpace, previousIsSlash) => {\n        if (previousNonWhiteSpace?.value === ',' && previousKeyword?.value.toLowerCase() === AS) {\n          return true;\n        }\n\n        return false;\n      },\n    },\n\n    {\n      id: StatementPosition.FromKeyword,\n      name: StatementPosition.FromKeyword,\n      resolve: (currentToken, previousKeyword, previousNonWhiteSpace, previousIsSlash) => {\n        // cloudwatch specific commented out\n        // Boolean(previousKeyword?.value === SELECT && previousNonWhiteSpace?.isParenthesis()),\n        return Boolean(\n          (previousKeyword?.value.toLowerCase() === SELECT && previousNonWhiteSpace?.value !== ',') ||\n            ((currentToken?.isKeyword() || currentToken?.isIdentifier()) &&\n              FROM.toLowerCase().startsWith(currentToken.value.toLowerCase()))\n        );\n      },\n    },\n    {\n      id: StatementPosition.AfterFromKeyword,\n      name: StatementPosition.AfterFromKeyword,\n      resolve: (currentToken, previousKeyword, previousNonWhiteSpace, previousIsSlash) =>\n        Boolean(!currentToken?.value.includes('.') && previousNonWhiteSpace?.value.toLowerCase() === FROM),\n    },\n    {\n      id: StatementPosition.AfterSchema,\n      name: StatementPosition.AfterSchema,\n      resolve: (currentToken, previousKeyword, previousNonWhiteSpace, previousIsSlash) => {\n        // depending on whether the schema was the last token in the query or not, current token might be whitespace or dot. if whitespace, just use the previous token\n        if (currentToken?.isWhiteSpace() && currentToken?.next) {\n          currentToken = currentToken?.previous;\n          previousNonWhiteSpace = currentToken!.getPreviousNonWhiteSpaceToken();\n        }\n        return Boolean(\n          currentToken?.isIdentifier() &&\n            currentToken?.value.endsWith('.') &&\n            previousNonWhiteSpace?.value.toLowerCase() === FROM\n        );\n      },\n    },\n    {\n      id: StatementPosition.AfterFrom,\n      name: StatementPosition.AfterFrom,\n      resolve: (currentToken, previousKeyword, previousNonWhiteSpace, previousIsSlash) =>\n        Boolean(\n          (previousKeyword?.value.toLowerCase() === FROM && previousNonWhiteSpace?.isDoubleQuotedString()) ||\n            (previousKeyword?.value.toLowerCase() === FROM && previousNonWhiteSpace?.isIdentifier()) ||\n            (previousKeyword?.value.toLowerCase() === FROM && previousNonWhiteSpace?.isVariable())\n          //  cloudwatch specific\n          // (previousKeyword?.value === SCHEMA && previousNonWhiteSpace?.is(TokenType.Parenthesis, ')'))\n        ),\n    },\n    {\n      id: StatementPosition.AfterTable,\n      name: StatementPosition.AfterTable,\n      resolve: (currentToken, previousKeyword, previousNonWhiteSpace, previousIsSlash) => {\n        return Boolean(\n          previousKeyword?.value.toLowerCase() === FROM &&\n            (previousNonWhiteSpace?.isVariable() ||\n              (previousNonWhiteSpace?.value !== '' && previousNonWhiteSpace?.value.toLowerCase() !== FROM))\n        );\n      },\n    },\n    {\n      id: StatementPosition.WhereKeyword,\n      name: StatementPosition.WhereKeyword,\n      resolve: (currentToken, previousKeyword, previousNonWhiteSpace, previousIsSlash) =>\n        Boolean(\n          previousKeyword?.value.toLowerCase() === WHERE &&\n            (previousNonWhiteSpace?.isKeyword() ||\n              previousNonWhiteSpace?.is(TokenType.Parenthesis, '(') ||\n              previousNonWhiteSpace?.is(TokenType.Operator, AND))\n        ),\n    },\n    {\n      id: StatementPosition.WhereComparisonOperator,\n      name: StatementPosition.WhereComparisonOperator,\n      resolve: (currentToken, previousKeyword, previousNonWhiteSpace, previousIsSlash) =>\n        Boolean(\n          previousKeyword?.value.toLowerCase() === WHERE &&\n            !previousNonWhiteSpace?.getPreviousNonWhiteSpaceToken()?.isOperator() &&\n            !currentToken?.is(TokenType.Delimiter, '.') &&\n            !currentToken?.isParenthesis() &&\n            (previousNonWhiteSpace?.isIdentifier() || previousNonWhiteSpace?.isDoubleQuotedString())\n        ),\n    },\n    {\n      id: StatementPosition.WhereValue,\n      name: StatementPosition.WhereValue,\n      resolve: (currentToken, previousKeyword, previousNonWhiteSpace, previousIsSlash) =>\n        Boolean(previousKeyword?.value.toLowerCase() === WHERE && previousNonWhiteSpace?.isOperator()),\n    },\n    {\n      id: StatementPosition.AfterWhereValue,\n      name: StatementPosition.AfterWhereValue,\n      resolve: (currentToken, previousKeyword, previousNonWhiteSpace, previousIsSlash) => {\n        return Boolean(\n          previousKeyword?.value.toLowerCase() === WHERE &&\n            (previousNonWhiteSpace?.is(TokenType.Operator, 'and') ||\n              previousNonWhiteSpace?.is(TokenType.Operator, 'or') ||\n              previousNonWhiteSpace?.isString() ||\n              previousNonWhiteSpace?.isNumber() ||\n              previousNonWhiteSpace?.is(TokenType.Parenthesis, ')') ||\n              previousNonWhiteSpace?.is(TokenType.Parenthesis, '()') ||\n              previousNonWhiteSpace?.isTemplateVariable() ||\n              (previousNonWhiteSpace?.is(TokenType.IdentifierQuote) &&\n                previousNonWhiteSpace.getPreviousNonWhiteSpaceToken()?.is(TokenType.Identifier) &&\n                previousNonWhiteSpace\n                  ?.getPreviousNonWhiteSpaceToken()\n                  ?.getPreviousNonWhiteSpaceToken()\n                  ?.is(TokenType.IdentifierQuote)))\n        );\n      },\n    },\n    {\n      id: StatementPosition.AfterGroupByKeywords,\n      name: StatementPosition.AfterGroupByKeywords,\n      resolve: (currentToken, previousKeyword, previousNonWhiteSpace, previousIsSlash) =>\n        Boolean(\n          previousKeyword?.is(TokenType.Keyword, BY) &&\n            previousKeyword?.getPreviousKeyword()?.is(TokenType.Keyword, GROUP) &&\n            (previousNonWhiteSpace?.is(TokenType.Keyword, BY) || previousNonWhiteSpace?.is(TokenType.Delimiter, ','))\n        ),\n    },\n    {\n      id: StatementPosition.AfterGroupByFunctionArgument,\n      name: StatementPosition.AfterGroupByFunctionArgument,\n      resolve: (currentToken, previousKeyword, previousNonWhiteSpace, previousIsSlash) => {\n        return Boolean(\n          previousKeyword?.is(TokenType.Keyword, BY) &&\n            previousKeyword?.getPreviousKeyword()?.is(TokenType.Keyword, GROUP) &&\n            (previousNonWhiteSpace?.is(TokenType.Parenthesis, '(') || currentToken?.is(TokenType.Parenthesis, '()'))\n        );\n      },\n    },\n    {\n      id: StatementPosition.AfterOrderByKeywords,\n      name: StatementPosition.AfterOrderByKeywords,\n      resolve: (currentToken, previousKeyword, previousNonWhiteSpace, previousIsSlash) =>\n        Boolean(\n          previousNonWhiteSpace?.is(TokenType.Keyword, BY) &&\n            previousNonWhiteSpace?.getPreviousKeyword()?.is(TokenType.Keyword, ORDER)\n        ),\n    },\n    {\n      id: StatementPosition.AfterOrderByFunction,\n      name: StatementPosition.AfterOrderByFunction,\n      resolve: (currentToken, previousKeyword, previousNonWhiteSpace, previousIsSlash) =>\n        Boolean(\n          previousKeyword?.is(TokenType.Keyword, BY) &&\n            previousKeyword?.getPreviousKeyword()?.is(TokenType.Keyword, ORDER) &&\n            previousNonWhiteSpace?.is(TokenType.Parenthesis) &&\n            previousNonWhiteSpace?.getPreviousNonWhiteSpaceToken()?.is(TokenType.Function)\n        ),\n    },\n    {\n      id: StatementPosition.AfterOrderByDirection,\n      name: StatementPosition.AfterOrderByDirection,\n      resolve: (currentToken, previousKeyword, previousNonWhiteSpace, previousIsSlash) =>\n        Boolean(previousKeyword?.is(TokenType.Keyword, DESC) || previousKeyword?.is(TokenType.Keyword, ASC)),\n    },\n    {\n      id: StatementPosition.AfterIsOperator,\n      name: StatementPosition.AfterIsOperator,\n      resolve: (currentToken, previousKeyword, previousNonWhiteSpace, previousIsSlash) => {\n        return Boolean(previousNonWhiteSpace?.is(TokenType.Operator, 'IS'));\n      },\n    },\n    {\n      id: StatementPosition.AfterIsNotOperator,\n      name: StatementPosition.AfterIsNotOperator,\n      resolve: (currentToken, previousKeyword, previousNonWhiteSpace, previousIsSlash) => {\n        return Boolean(\n          previousNonWhiteSpace?.is(TokenType.Operator, 'NOT') &&\n            previousNonWhiteSpace.getPreviousNonWhiteSpaceToken()?.is(TokenType.Operator, 'IS')\n        );\n      },\n    },\n  ];\n}\n"],"names":[],"mappings":"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"}