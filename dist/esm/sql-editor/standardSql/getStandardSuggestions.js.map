{"version":3,"file":"getStandardSuggestions.js","sources":["../../../../src/sql-editor/standardSql/getStandardSuggestions.ts"],"sourcesContent":["import { Registry } from '@grafana/data';\nimport { Monaco, monacoTypes } from '@grafana/ui';\nimport { PositionContext, SuggestionKind } from '../types';\nimport { LinkedToken } from '../utils/LinkedToken';\nimport { toCompletionItem } from '../utils/toCompletionItem';\nimport { SuggestionsRegistryItem } from './types';\n\n// Given standard and custom registered suggestions and kinds of suggestion expected, return a list of completion items\nexport const getStandardSuggestions = async (\n  monaco: Monaco,\n  currentToken: LinkedToken | null,\n  suggestionKinds: SuggestionKind[],\n  positionContext: PositionContext,\n  suggestionsRegistry: Registry<SuggestionsRegistryItem>\n): Promise<monacoTypes.languages.CompletionItem[]> => {\n  let suggestions: monacoTypes.languages.CompletionItem[] = [];\n  const invalidRangeToken =\n    currentToken?.isWhiteSpace() ||\n    currentToken?.isParenthesis() ||\n    (currentToken?.isIdentifier() && currentToken.value.endsWith('.'));\n  const range =\n    invalidRangeToken || !currentToken?.range\n      ? monaco.Range.fromPositions(positionContext.position)\n      : currentToken?.range;\n\n  // iterating over Set to deduplicate\n  for (const suggestion of [...new Set(suggestionKinds)]) {\n    const registeredSuggestions = suggestionsRegistry.getIfExists(suggestion);\n    if (registeredSuggestions) {\n      const su = await registeredSuggestions.suggestions({ ...positionContext, range }, monaco);\n      suggestions = [...suggestions, ...su.map((s) => toCompletionItem(s.label, range, { kind: s.kind, ...s }))];\n    }\n  }\n  return Promise.resolve(suggestions);\n};\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAQO,MAAM,yBAAyB,OACpC,MAAA,EACA,YACA,EAAA,eAAA,EACA,iBACA,mBACoD,KAAA;AACpD,EAAA,IAAI,cAAsD,EAAC,CAAA;AAC3D,EAAM,MAAA,iBAAA,GAAA,CACJ,YAAc,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,YAAA,CAAA,YAAA,EAAA,MACd,YAAc,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,YAAA,CAAA,aAAA,EAAA,CAAA,IAAA,CACb,6CAAc,YAAkB,EAAA,KAAA,YAAA,CAAa,KAAM,CAAA,QAAA,CAAS,GAAG,CAAA,CAAA;AAClE,EAAM,MAAA,KAAA,GACJ,iBAAqB,IAAA,EAAC,YAAc,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,YAAA,CAAA,KAAA,CAAA,GAChC,MAAO,CAAA,KAAA,CAAM,aAAc,CAAA,eAAA,CAAgB,QAAQ,CAAA,GACnD,YAAc,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,YAAA,CAAA,KAAA,CAAA;AAGpB,EAAA,KAAA,MAAW,cAAc,CAAC,GAAG,IAAI,GAAI,CAAA,eAAe,CAAC,CAAG,EAAA;AACtD,IAAM,MAAA,qBAAA,GAAwB,mBAAoB,CAAA,WAAA,CAAY,UAAU,CAAA,CAAA;AACxE,IAAA,IAAI,qBAAuB,EAAA;AACzB,MAAM,MAAA,EAAA,GAAK,MAAM,qBAAsB,CAAA,WAAA,CAAY,iCAAK,eAAL,CAAA,EAAA,EAAsB,KAAM,EAAA,CAAA,EAAG,MAAM,CAAA,CAAA;AACxF,MAAA,WAAA,GAAc,CAAC,GAAG,WAAA,EAAa,GAAG,EAAG,CAAA,GAAA,CAAI,CAAC,CAAM,KAAA,gBAAA,CAAiB,CAAE,CAAA,KAAA,EAAO,OAAO,cAAE,CAAA,EAAA,IAAA,EAAM,EAAE,IAAS,EAAA,EAAA,CAAA,CAAG,CAAC,CAAC,CAAA,CAAA;AAAA,KAC3G;AAAA,GACF;AACA,EAAO,OAAA,OAAA,CAAQ,QAAQ,WAAW,CAAA,CAAA;AACpC;;;;"}