{"version":3,"file":"standardSuggestionsRegistry.js","sources":["../../../../src/sql-editor/standardSql/standardSuggestionsRegistry.ts"],"sourcesContent":["import { Registry } from '@grafana/data';\nimport { getTemplateSrv } from '@grafana/runtime';\nimport { TRIGGER_SUGGEST } from '../utils/commands';\nimport {\n  CompletionItemInsertTextRule,\n  CompletionItemKind,\n  CompletionItemPriority,\n  MacroType,\n  OperatorType,\n  SuggestionKind,\n} from '../types';\nimport { ASC, DESC } from './language';\nimport { FunctionsRegistryItem, MacrosRegistryItem, OperatorsRegistryItem, SuggestionsRegistryItem } from './types';\n\n/**\n * This registry glues particular SuggestionKind with an async function that provides completion items for it.\n * To add a new suggestion kind, SQLEditor should be configured with a provider that implements customSuggestionKinds.\n */\n\nexport const initStandardSuggestions =\n  (\n    functions: Registry<FunctionsRegistryItem>,\n    operators: Registry<OperatorsRegistryItem>,\n    macros: Registry<MacrosRegistryItem>\n  ) =>\n  (): SuggestionsRegistryItem[] =>\n    [\n      {\n        id: SuggestionKind.SelectKeyword,\n        name: SuggestionKind.SelectKeyword,\n        suggestions: (_, m) =>\n          Promise.resolve([\n            {\n              label: `SELECT <column>`,\n              insertText: `SELECT $0`,\n              insertTextRules: CompletionItemInsertTextRule.InsertAsSnippet,\n              kind: CompletionItemKind.Snippet,\n              command: TRIGGER_SUGGEST,\n              sortText: CompletionItemPriority.Medium,\n            },\n            {\n              label: `SELECT <column> FROM <table>`,\n              insertText: `SELECT $2 FROM $1`,\n              insertTextRules: CompletionItemInsertTextRule.InsertAsSnippet,\n              kind: CompletionItemKind.Snippet,\n              command: TRIGGER_SUGGEST,\n              sortText: CompletionItemPriority.Medium,\n            },\n          ]),\n      },\n      {\n        id: SuggestionKind.TemplateVariables,\n        name: SuggestionKind.TemplateVariables,\n        suggestions: (_, m) => {\n          const templateSrv = getTemplateSrv();\n          if (!templateSrv) {\n            return Promise.resolve([]);\n          }\n\n          return Promise.resolve(\n            templateSrv.getVariables().map((variable) => {\n              const label = `\\$${variable.name}`;\n              const val = templateSrv.replace(label);\n              return {\n                label,\n                detail: `(Template Variable) ${val}`,\n                kind: CompletionItemKind.Snippet,\n                documentation: `(Template Variable) ${val}`,\n                insertText: `\\\\$${variable.name} `,\n                insertTextRules: CompletionItemInsertTextRule.InsertAsSnippet,\n                command: TRIGGER_SUGGEST,\n                sortText: CompletionItemPriority.Low,\n              };\n            })\n          );\n        },\n      },\n      {\n        id: SuggestionKind.SelectMacro,\n        name: SuggestionKind.SelectMacro,\n        suggestions: (_, m) =>\n          Promise.resolve([\n            ...macros\n              .list()\n              .filter((m) => m.type === MacroType.Value || m.type === MacroType.Column)\n              .map(createMacroSuggestionItem),\n          ]),\n      },\n      {\n        id: SuggestionKind.TableMacro,\n        name: SuggestionKind.TableMacro,\n        suggestions: (_, m) =>\n          Promise.resolve([\n            ...macros\n              .list()\n              .filter((m) => m.type === MacroType.Table)\n              .map(createMacroSuggestionItem),\n          ]),\n      },\n      {\n        id: SuggestionKind.GroupMacro,\n        name: SuggestionKind.GroupMacro,\n        suggestions: (_, m) =>\n          Promise.resolve([\n            ...macros\n              .list()\n              .filter((m) => m.type === MacroType.Group)\n              .map(createMacroSuggestionItem),\n          ]),\n      },\n      {\n        id: SuggestionKind.FilterMacro,\n        name: SuggestionKind.FilterMacro,\n        suggestions: (_, m) =>\n          Promise.resolve([\n            ...macros\n              .list()\n              .filter((m) => m.type === MacroType.Filter)\n              .map(createMacroSuggestionItem),\n          ]),\n      },\n      {\n        id: SuggestionKind.WithKeyword,\n        name: SuggestionKind.WithKeyword,\n        suggestions: (_, m) =>\n          Promise.resolve([\n            {\n              label: `WITH <alias> AS ( ... )`,\n              insertText: `WITH $1  AS ( $2 )`,\n              insertTextRules: CompletionItemInsertTextRule.InsertAsSnippet,\n              kind: CompletionItemKind.Snippet,\n              command: TRIGGER_SUGGEST,\n              sortText: CompletionItemPriority.Medium,\n            },\n          ]),\n      },\n      {\n        id: SuggestionKind.StarWildCard,\n        name: SuggestionKind.StarWildCard,\n        suggestions: (_, m) =>\n          Promise.resolve([\n            {\n              label: '*',\n              insertText: `* $0`,\n              insertTextRules: CompletionItemInsertTextRule.InsertAsSnippet,\n              kind: CompletionItemKind.Field,\n              command: TRIGGER_SUGGEST,\n              sortText: CompletionItemPriority.High,\n            },\n          ]),\n      },\n      {\n        id: SuggestionKind.FunctionsWithArguments,\n        name: SuggestionKind.FunctionsWithArguments,\n        suggestions: (_, m) =>\n          Promise.resolve([\n            ...functions.list().map((f) => ({\n              label: f.name,\n              insertText: `${f.name}($0)`,\n              documentation: f.description,\n              insertTextRules: CompletionItemInsertTextRule.InsertAsSnippet,\n              kind: CompletionItemKind.Function,\n              command: TRIGGER_SUGGEST,\n              sortText: CompletionItemPriority.MediumLow,\n            })),\n          ]),\n      },\n      {\n        id: SuggestionKind.FunctionsWithoutArguments,\n        name: SuggestionKind.FunctionsWithoutArguments,\n        suggestions: (_, m) =>\n          Promise.resolve([\n            ...functions.list().map((f) => ({\n              label: f.name,\n              insertText: `${f.name}()`,\n              documentation: f.description,\n              insertTextRules: CompletionItemInsertTextRule.InsertAsSnippet,\n              kind: CompletionItemKind.Function,\n              command: TRIGGER_SUGGEST,\n              sortText: CompletionItemPriority.MediumHigh,\n            })),\n          ]),\n      },\n      {\n        id: SuggestionKind.FromKeyword,\n        name: SuggestionKind.FromKeyword,\n        suggestions: (_, m) =>\n          Promise.resolve([\n            {\n              label: 'FROM',\n              insertText: `FROM $0`,\n              command: TRIGGER_SUGGEST,\n              insertTextRules: CompletionItemInsertTextRule.InsertAsSnippet,\n              kind: CompletionItemKind.Keyword,\n            },\n          ]),\n      },\n      {\n        id: SuggestionKind.Schemas,\n        name: SuggestionKind.Schemas,\n        suggestions: (_, m) => Promise.resolve([]),\n      },\n      {\n        id: SuggestionKind.Tables,\n        name: SuggestionKind.Tables,\n        suggestions: (_, m) => Promise.resolve([]),\n      },\n      {\n        id: SuggestionKind.Columns,\n        name: SuggestionKind.Columns,\n        suggestions: (_, m) => Promise.resolve([]),\n      },\n      {\n        id: SuggestionKind.LogicalOperators,\n        name: SuggestionKind.LogicalOperators,\n        suggestions: (_, m) =>\n          Promise.resolve(\n            operators\n              .list()\n              .filter((o) => o.type === OperatorType.Logical)\n              .map((o) => ({\n                label: o.operator,\n                insertText: `${o.operator} `,\n                documentation: o.description,\n                command: TRIGGER_SUGGEST,\n                sortText: CompletionItemPriority.MediumHigh,\n                kind: CompletionItemKind.Operator,\n              }))\n          ),\n      },\n      {\n        id: SuggestionKind.WhereKeyword,\n        name: SuggestionKind.WhereKeyword,\n        suggestions: (_, m) =>\n          Promise.resolve([\n            {\n              label: 'WHERE',\n              insertText: `WHERE `,\n              command: TRIGGER_SUGGEST,\n              sortText: CompletionItemPriority.MediumHigh,\n              kind: CompletionItemKind.Keyword,\n            },\n          ]),\n      },\n      {\n        id: SuggestionKind.ComparisonOperators,\n        name: SuggestionKind.ComparisonOperators,\n        suggestions: (_, m) =>\n          Promise.resolve([\n            ...operators\n              .list()\n              .filter((o) => o.type === OperatorType.Comparison)\n              .map((o) => ({\n                label: o.operator,\n                insertText: `${o.operator} `,\n                documentation: o.description,\n                command: TRIGGER_SUGGEST,\n                sortText: CompletionItemPriority.MediumHigh,\n                kind: CompletionItemKind.Operator,\n              })),\n            {\n              label: 'IN (...)',\n              insertText: `IN ( $0 )`,\n              command: TRIGGER_SUGGEST,\n              sortText: CompletionItemPriority.Medium,\n              kind: CompletionItemKind.Operator,\n              insertTextRules: CompletionItemInsertTextRule.InsertAsSnippet,\n            },\n            {\n              label: 'NOT IN (...)',\n              insertText: `NOT IN ( $0 )`,\n              command: TRIGGER_SUGGEST,\n              sortText: CompletionItemPriority.Medium,\n              kind: CompletionItemKind.Operator,\n              insertTextRules: CompletionItemInsertTextRule.InsertAsSnippet,\n            },\n            {\n              label: 'IS',\n              insertText: `IS`,\n              command: TRIGGER_SUGGEST,\n              sortText: CompletionItemPriority.Medium,\n              kind: CompletionItemKind.Operator,\n            },\n            {\n              label: 'IS NOT',\n              insertText: `IS NOT`,\n              command: TRIGGER_SUGGEST,\n              sortText: CompletionItemPriority.Medium,\n              kind: CompletionItemKind.Operator,\n            },\n          ]),\n      },\n      {\n        id: SuggestionKind.GroupByKeywords,\n        name: SuggestionKind.GroupByKeywords,\n        suggestions: (_, m) =>\n          Promise.resolve([\n            {\n              label: 'GROUP BY',\n              insertText: `GROUP BY `,\n              command: TRIGGER_SUGGEST,\n              sortText: CompletionItemPriority.MediumHigh,\n              kind: CompletionItemKind.Keyword,\n            },\n          ]),\n      },\n      {\n        id: SuggestionKind.OrderByKeywords,\n        name: SuggestionKind.OrderByKeywords,\n        suggestions: (_, m) =>\n          Promise.resolve([\n            {\n              label: 'ORDER BY',\n              insertText: `ORDER BY `,\n              command: TRIGGER_SUGGEST,\n              sortText: CompletionItemPriority.Medium,\n              kind: CompletionItemKind.Keyword,\n            },\n            {\n              label: 'ORDER BY(ascending)',\n              insertText: `ORDER BY $1 ASC `,\n              command: TRIGGER_SUGGEST,\n              sortText: CompletionItemPriority.MediumLow,\n              kind: CompletionItemKind.Snippet,\n              insertTextRules: CompletionItemInsertTextRule.InsertAsSnippet,\n            },\n            {\n              label: 'ORDER BY(descending)',\n              insertText: `ORDER BY $1 DESC`,\n              command: TRIGGER_SUGGEST,\n              sortText: CompletionItemPriority.MediumLow,\n              kind: CompletionItemKind.Snippet,\n              insertTextRules: CompletionItemInsertTextRule.InsertAsSnippet,\n            },\n          ]),\n      },\n      {\n        id: SuggestionKind.LimitKeyword,\n        name: SuggestionKind.LimitKeyword,\n        suggestions: (_, m) =>\n          Promise.resolve([\n            {\n              label: 'LIMIT',\n              insertText: `LIMIT `,\n              command: TRIGGER_SUGGEST,\n              sortText: CompletionItemPriority.MediumLow,\n              kind: CompletionItemKind.Keyword,\n            },\n          ]),\n      },\n      {\n        id: SuggestionKind.SortOrderDirectionKeyword,\n        name: SuggestionKind.SortOrderDirectionKeyword,\n        suggestions: (_, m) =>\n          Promise.resolve(\n            [ASC, DESC].map((o) => ({\n              label: o,\n              insertText: `${o} `,\n              command: TRIGGER_SUGGEST,\n              kind: CompletionItemKind.Keyword,\n            }))\n          ),\n      },\n      {\n        id: SuggestionKind.NotKeyword,\n        name: SuggestionKind.NotKeyword,\n        suggestions: () =>\n          Promise.resolve([\n            {\n              label: 'NOT',\n              insertText: 'NOT',\n              command: TRIGGER_SUGGEST,\n              kind: CompletionItemKind.Keyword,\n              sortText: CompletionItemPriority.High,\n            },\n          ]),\n      },\n      {\n        id: SuggestionKind.BoolValues,\n        name: SuggestionKind.BoolValues,\n        suggestions: () =>\n          Promise.resolve(\n            ['TRUE', 'FALSE'].map((o) => ({\n              label: o,\n              insertText: `${o}`,\n              command: TRIGGER_SUGGEST,\n              kind: CompletionItemKind.Keyword,\n              sortText: CompletionItemPriority.Medium,\n            }))\n          ),\n      },\n      {\n        id: SuggestionKind.NullValue,\n        name: SuggestionKind.NullValue,\n        suggestions: () =>\n          Promise.resolve(\n            ['NULL'].map((o) => ({\n              label: o,\n              insertText: `${o}`,\n              command: TRIGGER_SUGGEST,\n              kind: CompletionItemKind.Keyword,\n              sortText: CompletionItemPriority.Low,\n            }))\n          ),\n      },\n    ];\n\nfunction createMacroSuggestionItem(m: MacrosRegistryItem) {\n  return {\n    label: m.name,\n    insertText: `${'\\\\' + m.text}${argsString(m.args)} `,\n    insertTextRules: CompletionItemInsertTextRule.InsertAsSnippet,\n    kind: CompletionItemKind.Snippet,\n    documentation: m.description,\n    command: TRIGGER_SUGGEST,\n  };\n}\n\nfunction argsString(args?: string[]): string {\n  if (!args) {\n    return '()';\n  }\n  return '('.concat(args.map((t, i) => `\\${${i}:${t}}`).join(', ')).concat(')');\n}\n"],"names":["m"],"mappings":"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"}