{"version":3,"file":"macros.js","sources":["../../../../src/sql-editor/standardSql/macros.ts"],"sourcesContent":["import { MacroType } from '../types';\nimport { MacrosRegistryItem } from './types';\n\nconst COLUMN = 'column',\n  RELATIVE_TIME_STRING = \"'5m'\";\n\nexport const MACROS: MacrosRegistryItem[] = [\n  {\n    id: '$__timeFilter(dateColumn)',\n    name: '$__timeFilter(dateColumn)',\n    text: '$__timeFilter',\n    args: [COLUMN],\n    type: MacroType.Filter,\n    description:\n      'Will be replaced by a time range filter using the specified column name. For example, dateColumn BETWEEN FROM_UNIXTIME(1494410783) AND FROM_UNIXTIME(1494410983)',\n  },\n  {\n    id: '$__timeFrom()',\n    name: '$__timeFrom()',\n    text: '$__timeFrom',\n    args: [],\n    type: MacroType.Filter,\n    description:\n      'Will be replaced by the start of the currently active time selection. For example, FROM_UNIXTIME(1494410783)',\n  },\n  {\n    id: '$__timeTo()',\n    name: '$__timeTo()',\n    text: '$__timeTo',\n    args: [],\n    type: MacroType.Filter,\n    description:\n      'Will be replaced by the end of the currently active time selection. For example, FROM_UNIXTIME(1494410983)',\n  },\n  {\n    id: \"$__timeGroup(dateColumn, '5m')\",\n    name: \"$__timeGroup(dateColumn, '5m')\",\n    text: '$__timeGroup',\n    args: [COLUMN, RELATIVE_TIME_STRING],\n    type: MacroType.Value,\n    description:\n      'Will be replaced by an expression usable in GROUP BY clause. For example, *cast(cast(UNIX_TIMESTAMP(dateColumn)/(300) as signed)*300 as signed),*',\n  },\n  {\n    id: '$__table',\n    name: '$__table',\n    text: '$__table',\n    args: [],\n    type: MacroType.Table,\n    description: 'Will be replaced by the query table.',\n  },\n  {\n    id: '$__column',\n    name: '$__column',\n    text: '$__column',\n    args: [],\n    type: MacroType.Column,\n    description: 'Will be replaced by the query column.',\n  },\n];\n\n/*\n  {\n    id: \"$__timeGroupAlias(dateColumn, '5m', fill)\",\n    name: \"$__timeGroupAlias(dateColumn, '5m', fill)\",\n    text: \"$__timeGroup\",\n    args: [COLUMN, RELATIVE_TIME_STRING , FILL_TYPE],\n    type: MacroType.Group,\n    description:\n      \"Will be replaced by an expression usable in GROUP BY clause. For example, *cast(cast(UNIX_TIMESTAMP(dateColumn)/(300) as signed)*300 as signed),* with an added column alias\",\n  },\n  {\n    id: \"$__unixEpochFilter(dateColumn)\",\n    name: \"$__unixEpochFilter(dateColumn)\",\n    text: \"$__unixEpochFilter\",\n    args: [COLUMN],\n    type: MacroType.Filter,\n    description:\n      \"Will be replaced by a time range filter using the specified column name with times represented as Unix timestamp. For example, dateColumn > 1494410783 AND dateColumn < 1494497183\",\n  },\n  {\n    id: \"$__unixEpochFrom()\",\n    name: \"$__unixEpochFrom()\",\n    text: \"$__unixEpochFrom\",\n    args: [],\n    type: MacroType.Value,\n    description:\n      \"Will be replaced by the start of the currently active time selection as Unix timestamp. For example, 1494410783\",\n  },\n  {\n    id: \"$__unixEpochTo()\",\n    name: \"$__unixEpochTo()\",\n    text: \"$__unixEpochTo\",\n    args: [],\n    type: MacroType.Value,\n    description:\n      \"Will be replaced by the end of the currently active time selection as Unix timestamp. For example, 1494410783\",\n  },\n  {\n    id: \"$__unixEpochNanoFilter(dateColumn)\",\n    name: \"$__unixEpochNanoFilter(dateColumn)\",\n    text: \"$__unixEpochNanoFilter\",\n    args: [COLUMN],\n    type: MacroType.Filter,\n    description:\n      \"Will be replaced by a time range filter using the specified column name with times represented as nanosecond timestamp. For example, dateColumn > 1494410783152415214 AND dateColumn < 1494497183142514872\",\n  },\n  {\n    id: \"$__unixEpochNanoFrom()\",\n    name: \"$__unixEpochNanoFrom()\",\n    text: \"$__unixEpochNanoFrom\",\n    args: [],\n    type: MacroType.Value,\n    description:\n      \"Will be replaced by the start of the currently active time selection as nanosecond timestamp. For example, 1494410783152415214\",\n  },\n  {\n    id: \"$__unixEpochNanoTo()\",\n    name: \"$__unixEpochNanoTo()\",\n    text: \"$__unixEpochNanoTo\",\n    args: [],\n    type: MacroType.Value,\n    description:\n      \"Will be replaced by the end of the currently active time selection as nanosecond timestamp. For example, 1494410783152415214\",\n  },\n  {\n    id: \"$__unixEpochGroup(dateColumn, '5m')\",\n    name: \"$__unixEpochGroup(dateColumn, '5m')\",\n    text: \"$__unixEpochGroup\",\n    args: [COLUMN, RELATIVE_TIME_STRING],\n    type: MacroType.Group,\n    description:\n      \"Will be replaced by an expression usable in GROUP BY clause. For values stored as unix timestamp.\",\n  },\n  {\n    id: \"$__unixEpochGroup(dateColumn, '5m', fill)\",\n    name: \"$__unixEpochGroup(dateColumn, '5m', fill)\",\n    text: \"$__unixEpochGroup\",\n    args: [COLUMN, RELATIVE_TIME_STRING, FILL_TYPE],\n    type: MacroType.Group,\n    description:\n      \"Will be replaced by an expression usable in GROUP BY clause. For values stored as unix timestamp. Missing values can be filled with 0, NULL or previous\",\n  },\n  {\n    id: \"$__timeEpoch(dateColumn, )\",\n    name: \"$__timeEpoch(dateColumn)\",\n    text: \"$__timeEpoch\",\n    args: [COLUMN],\n    type: MacroType.Value,\n    description:\n      \"Will be replaced by an expression to convert to a UNIX timestamp and rename the column to time_sec. For example, UNIX_TIMESTAMP(dateColumn) as time_sec\",\n  },\n  {\n    id: \"$__time(dateColumn)\",\n    name: \"$__time(dateColumn)\",\n    text: \"$__time\",\n    args: [COLUMN],\n    type: MacroType.Value,\n    description:\n      \"Will be replaced by an expression to convert to a UNIX timestamp and rename the column to time_sec. For example, UNIX_TIMESTAMP(dateColumn) as time_sec\",\n  },\n  {\n    id: \"$__timeGroup(dateColumn, '5m', fill)\",\n    name: \"$__timeGroup(dateColumn, '5m', fill)\",\n    text: \"$__timeGroup\",\n    args: [COLUMN, RELATIVE_TIME_STRING, FILL_TYPE],\n    type: MacroType.Value,\n    description:\n      \"Will be replaced by an expression usable in GROUP BY clause. For example, *cast(cast(UNIX_TIMESTAMP(dateColumn)/(300) as signed)*300 as signed),* missing values can be filled with 0, NULL or previous\",\n  },\n  */\n"],"names":[],"mappings":";;AAGA,MAAM,MAAA,GAAS,UACb,oBAAuB,GAAA,MAAA,CAAA;AAElB,MAAM,MAA+B,GAAA;AAAA,EAC1C;AAAA,IACE,EAAI,EAAA,2BAAA;AAAA,IACJ,IAAM,EAAA,2BAAA;AAAA,IACN,IAAM,EAAA,eAAA;AAAA,IACN,IAAA,EAAM,CAAC,MAAM,CAAA;AAAA,IACb,MAAM,SAAU,CAAA,MAAA;AAAA,IAChB,WACE,EAAA,kKAAA;AAAA,GACJ;AAAA,EACA;AAAA,IACE,EAAI,EAAA,eAAA;AAAA,IACJ,IAAM,EAAA,eAAA;AAAA,IACN,IAAM,EAAA,aAAA;AAAA,IACN,MAAM,EAAC;AAAA,IACP,MAAM,SAAU,CAAA,MAAA;AAAA,IAChB,WACE,EAAA,8GAAA;AAAA,GACJ;AAAA,EACA;AAAA,IACE,EAAI,EAAA,aAAA;AAAA,IACJ,IAAM,EAAA,aAAA;AAAA,IACN,IAAM,EAAA,WAAA;AAAA,IACN,MAAM,EAAC;AAAA,IACP,MAAM,SAAU,CAAA,MAAA;AAAA,IAChB,WACE,EAAA,4GAAA;AAAA,GACJ;AAAA,EACA;AAAA,IACE,EAAI,EAAA,gCAAA;AAAA,IACJ,IAAM,EAAA,gCAAA;AAAA,IACN,IAAM,EAAA,cAAA;AAAA,IACN,IAAA,EAAM,CAAC,MAAA,EAAQ,oBAAoB,CAAA;AAAA,IACnC,MAAM,SAAU,CAAA,KAAA;AAAA,IAChB,WACE,EAAA,mJAAA;AAAA,GACJ;AAAA,EACA;AAAA,IACE,EAAI,EAAA,UAAA;AAAA,IACJ,IAAM,EAAA,UAAA;AAAA,IACN,IAAM,EAAA,UAAA;AAAA,IACN,MAAM,EAAC;AAAA,IACP,MAAM,SAAU,CAAA,KAAA;AAAA,IAChB,WAAa,EAAA,sCAAA;AAAA,GACf;AAAA,EACA;AAAA,IACE,EAAI,EAAA,WAAA;AAAA,IACJ,IAAM,EAAA,WAAA;AAAA,IACN,IAAM,EAAA,WAAA;AAAA,IACN,MAAM,EAAC;AAAA,IACP,MAAM,SAAU,CAAA,MAAA;AAAA,IAChB,WAAa,EAAA,uCAAA;AAAA,GACf;AACF;;;;"}