{"version":3,"file":"ConnectionSettings.js","sources":["../../../../src/ConfigEditor/Connection/ConnectionSettings.tsx"],"sourcesContent":["import React, { ReactNode } from 'react';\nimport { css, cx } from '@emotion/css';\nimport { InlineField, Input, PopoverContent } from '@grafana/ui';\nimport { ConfigSection } from '../ConfigSection';\nimport { Config, OnChangeHandler } from '../types';\n\nexport type Props<C extends Config = Config> = {\n  config: C;\n  onChange: OnChangeHandler<C>;\n  description?: ReactNode;\n  urlPlaceholder?: string;\n  urlTooltip?: PopoverContent;\n  urlLabel?: string;\n  className?: string;\n};\n\nexport const ConnectionSettings: <C extends Config = Config>(props: Props<C>) => JSX.Element = ({\n  config,\n  onChange,\n  description,\n  urlPlaceholder,\n  urlTooltip,\n  urlLabel,\n  className,\n}) => {\n  const isValidUrl = /^(ftp|http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-\\/]))?$/.test(\n    config.url\n  );\n\n  const styles = {\n    container: css({\n      maxWidth: 578,\n    }),\n  };\n\n  return (\n    <>\n      <ConfigSection title=\"Connection\" description={description} className={cx(styles.container, className)}>\n        <InlineField\n          htmlFor=\"connection-url\"\n          label={urlLabel || 'URL'}\n          labelWidth={24}\n          tooltip={\n            urlTooltip || (\n              <>\n                Specify a complete HTTP URL\n                <br />\n                (for example https://example.com:8080)\n              </>\n            )\n          }\n          grow\n          disabled={config.readOnly}\n          required\n          invalid={!isValidUrl && !config.readOnly}\n          error={isValidUrl ? '' : 'Please enter a valid URL'}\n          interactive\n        >\n          <Input\n            id=\"connection-url\"\n            aria-label=\"Data source connection URL\"\n            onChange={(event) =>\n              onChange({\n                ...config,\n                url: event.currentTarget.value,\n              })\n            }\n            value={config.url || ''}\n            placeholder={urlPlaceholder || 'URL'}\n          />\n        </InlineField>\n      </ConfigSection>\n    </>\n  );\n};\n"],"names":["React"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAgBO,MAAM,qBAAkF,CAAC;AAAA,EAC9F,MAAA;AAAA,EACA,QAAA;AAAA,EACA,WAAA;AAAA,EACA,cAAA;AAAA,EACA,UAAA;AAAA,EACA,QAAA;AAAA,EACA,SAAA;AACF,CAAM,KAAA;AACJ,EAAA,MAAM,aAAa,qFAAsF,CAAA,IAAA;AAAA,IACvG,MAAO,CAAA,GAAA;AAAA,GACT,CAAA;AAEA,EAAA,MAAM,MAAS,GAAA;AAAA,IACb,WAAW,GAAI,CAAA;AAAA,MACb,QAAU,EAAA,GAAA;AAAA,KACX,CAAA;AAAA,GACH,CAAA;AAEA,EACE,uBAAAA,cAAA,CAAA,aAAA,CAAAA,cAAA,CAAA,QAAA,EAAA,IAAA,kBACGA,cAAA,CAAA,aAAA,CAAA,aAAA,EAAA,EAAc,KAAM,EAAA,YAAA,EAAa,WAA0B,EAAA,SAAA,EAAW,EAAG,CAAA,MAAA,CAAO,SAAW,EAAA,SAAS,CACnG,EAAA,kBAAAA,cAAA,CAAA,aAAA;AAAA,IAAC,WAAA;AAAA,IAAA;AAAA,MACC,OAAQ,EAAA,gBAAA;AAAA,MACR,OAAO,QAAY,IAAA,KAAA;AAAA,MACnB,UAAY,EAAA,EAAA;AAAA,MACZ,SACE,UACE,oBAAAA,cAAA,CAAA,aAAA,CAAAA,cAAA,CAAA,QAAA,EAAA,IAAA,EAAE,+CAECA,cAAA,CAAA,aAAA,CAAA,IAAA,EAAA,IAAG,GAAE,wCAER,CAAA;AAAA,MAGJ,IAAI,EAAA,IAAA;AAAA,MACJ,UAAU,MAAO,CAAA,QAAA;AAAA,MACjB,QAAQ,EAAA,IAAA;AAAA,MACR,OAAS,EAAA,CAAC,UAAc,IAAA,CAAC,MAAO,CAAA,QAAA;AAAA,MAChC,KAAA,EAAO,aAAa,EAAK,GAAA,0BAAA;AAAA,MACzB,WAAW,EAAA,IAAA;AAAA,KAAA;AAAA,oBAEXA,cAAA,CAAA,aAAA;AAAA,MAAC,KAAA;AAAA,MAAA;AAAA,QACC,EAAG,EAAA,gBAAA;AAAA,QACH,YAAW,EAAA,4BAAA;AAAA,QACX,QAAU,EAAA,CAAC,KACT,KAAA,QAAA,CAAS,iCACJ,MADI,CAAA,EAAA;AAAA,UAEP,GAAA,EAAK,MAAM,aAAc,CAAA,KAAA;AAAA,SAC1B,CAAA,CAAA;AAAA,QAEH,KAAA,EAAO,OAAO,GAAO,IAAA,EAAA;AAAA,QACrB,aAAa,cAAkB,IAAA,KAAA;AAAA,OAAA;AAAA,KACjC;AAAA,GAEJ,CACF,CAAA,CAAA;AAEJ;;;;"}