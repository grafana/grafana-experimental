{"version":3,"file":"TLSClientAuth.js","sources":["../../../../../src/ConfigEditor/Auth/tls/TLSClientAuth.tsx"],"sourcesContent":["import React from 'react';\nimport { cx } from '@emotion/css';\nimport { InlineField, Input } from '@grafana/ui';\nimport { SecretTextArea } from '../common';\nimport { TLSSettingsSection } from './TLSSettingsSection';\nimport { useCommonStyles } from '../styles';\n\nexport type Props = {\n  enabled: boolean;\n  onToggle: (enabled: boolean) => void;\n  serverName: string;\n  clientCertificateConfigured: boolean;\n  clientKeyConfigured: boolean;\n  onServerNameChange: (serverName: string) => void;\n  onClientCertificateChange: (clientCertificate: string) => void;\n  onClientKeyChange: (clientKey: string) => void;\n  onClientCertificateReset: () => void;\n  onClientKeyReset: () => void;\n  tooltips?: {\n    serverNameLabel?: string;\n    certificateLabel?: string;\n    keyLabel?: string;\n  };\n  readOnly: boolean;\n};\n\nexport const TLSClientAuth: React.FC<Props> = ({\n  enabled,\n  serverName,\n  clientCertificateConfigured,\n  clientKeyConfigured,\n  onToggle,\n  onServerNameChange,\n  onClientCertificateChange,\n  onClientKeyChange,\n  onClientCertificateReset,\n  onClientKeyReset,\n  tooltips,\n  readOnly,\n}) => {\n  const commonStyles = useCommonStyles();\n\n  return (\n    <TLSSettingsSection\n      enabled={enabled}\n      label=\"TLS Client Authentication\"\n      tooltipText=\"Validate using TLS client authentication, in which the server authenticates the client\"\n      onToggle={(newEnabled) => onToggle(newEnabled)}\n      readOnly={readOnly}\n    >\n      <InlineField\n        label=\"ServerName\"\n        labelWidth={24}\n        tooltip={tooltips?.serverNameLabel ?? 'A Servername is used to verify the hostname on the returned certificate'}\n        required\n        htmlFor=\"client-auth-servername-input\"\n        interactive\n        grow\n        className={commonStyles.inlineFieldNoMarginRight}\n        disabled={readOnly}\n      >\n        <Input\n          id=\"client-auth-servername-input\"\n          placeholder=\"domain.example.com\"\n          value={serverName}\n          onChange={(e) => onServerNameChange(e.currentTarget.value)}\n          required\n        />\n      </InlineField>\n      <InlineField\n        label=\"Client Certificate\"\n        labelWidth={24}\n        tooltip={\n          tooltips?.certificateLabel ??\n          'The client certificate can be generated from a Certificate Authority or be self-signed'\n        }\n        required\n        htmlFor=\"client-auth-client-certificate-input\"\n        interactive\n        grow\n        className={cx(commonStyles.inlineFieldNoMarginRight, commonStyles.inlineFieldWithSecret)}\n        disabled={readOnly}\n      >\n        <SecretTextArea\n          id=\"client-auth-client-certificate-input\"\n          isConfigured={clientCertificateConfigured}\n          onChange={(e) => onClientCertificateChange(e.currentTarget.value)}\n          onReset={readOnly ? () => {} : onClientCertificateReset}\n          placeholder=\"Begins with --- BEGIN CERTIFICATE ---\"\n          rows={6}\n          required\n        />\n      </InlineField>\n      <InlineField\n        label=\"Client Key\"\n        labelWidth={24}\n        tooltip={tooltips?.keyLabel ?? 'The client key can be generated from a Certificate Authority or be self-signed'}\n        required\n        htmlFor=\"client-auth-client-key-input\"\n        interactive\n        grow\n        className={cx(commonStyles.inlineFieldNoMarginRight, commonStyles.inlineFieldWithSecret)}\n        disabled={readOnly}\n      >\n        <SecretTextArea\n          id=\"client-auth-client-key-input\"\n          isConfigured={clientKeyConfigured}\n          onChange={(e) => onClientKeyChange(e.currentTarget.value)}\n          onReset={readOnly ? () => {} : onClientKeyReset}\n          placeholder={`Begins with --- RSA PRIVATE KEY CERTIFICATE ---`}\n          rows={6}\n          required\n        />\n      </InlineField>\n    </TLSSettingsSection>\n  );\n};\n"],"names":["React"],"mappings":"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"}