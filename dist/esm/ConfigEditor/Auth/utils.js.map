{"version":3,"file":"utils.js","sources":["../../../../src/ConfigEditor/Auth/utils.ts"],"sourcesContent":["import { Props as AuthProps } from './Auth';\nimport { AuthMethod, Header, CustomMethodId } from './types';\nimport { Config, OnChangeHandler } from '../types';\n\nconst headerNamePrefix = 'httpHeaderName';\nconst headerValuePrefix = 'httpHeaderValue';\n\nexport function convertLegacyAuthProps<C extends Config = Config>({\n  config,\n  onChange,\n}: {\n  config: C;\n  onChange: OnChangeHandler<C>;\n}): AuthProps {\n  const props: AuthProps = {\n    selectedMethod: getSelectedMethod<C>(config),\n    onAuthMethodSelect: getOnAuthMethodSelectHandler<C>(config, onChange),\n    basicAuth: getBasicAuthProps<C>(config, onChange),\n    TLS: getTLSProps<C>(config, onChange),\n    customHeaders: getCustomHeaders<C>(config, onChange),\n    readOnly: config.readOnly,\n  };\n\n  return props;\n}\n\nexport function getSelectedMethod<C extends Config = Config>(config: C): AuthMethod {\n  if (config.basicAuth) {\n    return AuthMethod.BasicAuth;\n  }\n  if (config.withCredentials) {\n    return AuthMethod.CrossSiteCredentials;\n  }\n  if (config.jsonData.oauthPassThru) {\n    return AuthMethod.OAuthForward;\n  }\n  return AuthMethod.NoAuth;\n}\n\nexport function getOnAuthMethodSelectHandler<C extends Config = Config>(\n  config: C,\n  onChange: OnChangeHandler<C>\n): (method: AuthMethod | CustomMethodId) => void {\n  return (method: AuthMethod | CustomMethodId) => {\n    onChange({\n      ...config,\n      basicAuth: method === AuthMethod.BasicAuth,\n      withCredentials: method === AuthMethod.CrossSiteCredentials,\n      jsonData: {\n        ...config.jsonData,\n        oauthPassThru: method === AuthMethod.OAuthForward,\n      },\n    });\n  };\n}\n\nexport function getBasicAuthProps<C extends Config = Config>(\n  config: C,\n  onChange: OnChangeHandler<C>\n): AuthProps['basicAuth'] {\n  return {\n    user: config.basicAuthUser,\n    passwordConfigured: config.secureJsonFields.basicAuthPassword,\n    onUserChange: (user: string) => onChange({ ...config, basicAuthUser: user }),\n    onPasswordChange: (password: string) =>\n      onChange({\n        ...config,\n        secureJsonData: {\n          ...config.secureJsonData,\n          basicAuthPassword: password,\n        },\n      }),\n    onPasswordReset: () =>\n      onChange({\n        ...config,\n        secureJsonData: { ...config.secureJsonData, basicAuthPassword: '' },\n        secureJsonFields: {\n          ...config.secureJsonFields,\n          basicAuthPassword: false,\n        },\n      }),\n  };\n}\n\nexport function getTLSProps<C extends Config = Config>(config: C, onChange: OnChangeHandler<C>): AuthProps['TLS'] {\n  return {\n    selfSignedCertificate: {\n      enabled: Boolean(config.jsonData.tlsAuthWithCACert),\n      certificateConfigured: config.secureJsonFields.tlsCACert,\n      onToggle: (enabled) =>\n        onChange({\n          ...config,\n          jsonData: { ...config.jsonData, tlsAuthWithCACert: enabled },\n        }),\n      onCertificateChange: (certificate) =>\n        onChange({\n          ...config,\n          secureJsonData: { ...config.secureJsonData, tlsCACert: certificate },\n        }),\n      onCertificateReset: () =>\n        onChange({\n          ...config,\n          secureJsonData: { ...config.secureJsonData, tlsCACert: '' },\n          secureJsonFields: { ...config.secureJsonFields, tlsCACert: false },\n        }),\n    },\n    TLSClientAuth: {\n      enabled: config.jsonData.tlsAuth,\n      serverName: config.jsonData.serverName,\n      clientCertificateConfigured: config.secureJsonFields.tlsClientCert,\n      clientKeyConfigured: config.secureJsonFields.tlsClientKey,\n      onToggle: (enabled) =>\n        onChange({\n          ...config,\n          jsonData: { ...config.jsonData, tlsAuth: enabled },\n        }),\n      onServerNameChange: (serverName) =>\n        onChange({\n          ...config,\n          jsonData: { ...config.jsonData, serverName },\n        }),\n      onClientCertificateChange: (clientCertificate) =>\n        onChange({\n          ...config,\n          secureJsonData: {\n            ...config.secureJsonData,\n            tlsClientCert: clientCertificate,\n          },\n        }),\n      onClientCertificateReset: () =>\n        onChange({\n          ...config,\n          secureJsonData: {\n            ...config.secureJsonData,\n            tlsClientCert: '',\n          },\n          secureJsonFields: {\n            ...config.secureJsonFields,\n            tlsClientCert: false,\n          },\n        }),\n      onClientKeyChange: (clientKey) =>\n        onChange({\n          ...config,\n          secureJsonData: {\n            ...config.secureJsonData,\n            tlsClientKey: clientKey,\n          },\n        }),\n      onClientKeyReset: () =>\n        onChange({\n          ...config,\n          secureJsonData: {\n            ...config.secureJsonData,\n            tlsClientKey: '',\n          },\n          secureJsonFields: {\n            ...config.secureJsonFields,\n            tlsClientKey: false,\n          },\n        }),\n    },\n    skipTLSVerification: {\n      enabled: config.jsonData.tlsSkipVerify,\n      onToggle: (enabled) =>\n        onChange({\n          ...config,\n          jsonData: { ...config.jsonData, tlsSkipVerify: enabled },\n        }),\n    },\n  };\n}\n\nexport function getCustomHeaders<C extends Config = Config>(\n  config: C,\n  onChange: OnChangeHandler<C>\n): AuthProps['customHeaders'] {\n  const headers: Header[] = Object.keys(config.jsonData)\n    .filter((key) => key.startsWith(headerNamePrefix))\n    .sort()\n    .map((key) => {\n      const index = key.slice(headerNamePrefix.length);\n      return {\n        name: config.jsonData[key],\n        configured: config.secureJsonFields[`${headerValuePrefix}${index}`] ?? false,\n      };\n    });\n\n  return {\n    headers,\n    onChange: (headers) => {\n      const newJsonData = Object.fromEntries(\n        Object.entries(config.jsonData).filter(([key]) => !key.startsWith(headerNamePrefix))\n      );\n      const newSecureJsonData = Object.fromEntries(\n        Object.entries(config.secureJsonData || {}).filter(([key]) => !key.startsWith(headerValuePrefix))\n      );\n      const newSecureJsonFields = Object.fromEntries(\n        Object.entries(config.secureJsonFields).filter(([key]) => !key.startsWith(headerValuePrefix))\n      );\n\n      headers.forEach((header, index) => {\n        newJsonData[`${headerNamePrefix}${index + 1}`] = header.name;\n        if (header.configured) {\n          newSecureJsonFields[`${headerValuePrefix}${index + 1}`] = true;\n        } else {\n          newSecureJsonData[`${headerValuePrefix}${index + 1}`] = header.value;\n        }\n      });\n\n      onChange({\n        ...config,\n        jsonData: newJsonData,\n        secureJsonData: newSecureJsonData,\n        secureJsonFields: newSecureJsonFields,\n      });\n    },\n  };\n}\n"],"names":["headers"],"mappings":"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"}