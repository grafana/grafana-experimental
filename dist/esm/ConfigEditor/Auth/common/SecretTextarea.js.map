{"version":3,"file":"SecretTextarea.js","sources":["../../../../../src/ConfigEditor/Auth/common/SecretTextarea.tsx"],"sourcesContent":["/**\n * Copy & paste from https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/SecretTextArea/SecretTextArea.tsx\n * Available starting from @grafana/ui 9.2\n * Needed, because Auth component is also used in Grafana 8, which doesn't have SecretTextarea\n */\n\nimport { css, cx } from '@emotion/css';\nimport * as React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2, Button, TextArea, HorizontalGroup } from '@grafana/ui';\n\nexport type Props = React.ComponentProps<typeof TextArea> & {\n  /** TRUE if the secret was already configured. (It is needed as often the backend doesn't send back the actual secret, only the information that it was configured) */\n  isConfigured: boolean;\n  /** Called when the user clicks on the \"Reset\" button in order to clear the secret */\n  onReset: () => void;\n};\n\nexport const CONFIGURED_TEXT = 'configured';\nexport const RESET_BUTTON_TEXT = 'Reset';\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    configuredStyle: css`\n      min-height: ${theme.spacing(theme.components.height.md)};\n      padding-top: ${theme.spacing(0.5) /** Needed to mimic vertically centered text in an input box */};\n      resize: none;\n    `,\n  };\n};\n\n/**\n * Text area that does not disclose an already configured value but lets the user reset the current value and enter a new one.\n * Typically useful for asymmetric cryptography keys.\n */\nexport const SecretTextArea = ({ isConfigured, onReset, ...props }: Props) => {\n  const styles = useStyles2(getStyles);\n  return (\n    <HorizontalGroup>\n      {!isConfigured && <TextArea {...props} />}\n      {isConfigured && (\n        <TextArea {...props} rows={1} disabled={true} value={CONFIGURED_TEXT} className={cx(styles.configuredStyle)} />\n      )}\n      {isConfigured && (\n        <Button onClick={onReset} variant=\"secondary\">\n          {RESET_BUTTON_TEXT}\n        </Button>\n      )}\n    </HorizontalGroup>\n  );\n};\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmBO,MAAM,eAAkB,GAAA,aAAA;AACxB,MAAM,iBAAoB,GAAA,QAAA;AAEjC,MAAM,SAAA,GAAY,CAAC,KAAyB,KAAA;AAC1C,EAAO,OAAA;AAAA,IACL,eAAiB,EAAA,GAAA,CAAA;AAAA,kBAAA,EACD,KAAM,CAAA,OAAA,CAAQ,KAAM,CAAA,UAAA,CAAW,OAAO,EAAE,CAAA,CAAA;AAAA,mBACvC,EAAA,KAAA,CAAM,QAAQ,GAAG,CAAA,CAAA;AAAA;AAAA,IAAA,CAAA;AAAA,GAGpC,CAAA;AACF,CAAA,CAAA;AAMa,MAAA,cAAA,GAAiB,CAAC,EAA+C,KAAA;AAA/C,EAAA,IAAA,EAAA,GAAA,EAAA,EAAE,gBAAc,OApC/C,EAAA,GAoC+B,IAA4B,KAA5B,GAAA,SAAA,CAAA,EAAA,EAA4B,CAA1B,cAAc,EAAA,SAAA,CAAA,CAAA,CAAA;AAC7C,EAAM,MAAA,MAAA,GAAS,WAAW,SAAS,CAAA,CAAA;AACnC,EAAA,uBACG,KAAA,CAAA,aAAA,CAAA,eAAA,EAAA,IAAA,EACE,CAAC,YAAA,wCAAiB,QAAa,EAAA,cAAA,CAAA,EAAA,EAAA,KAAA,CAAO,CACtC,EAAA,YAAA,oBACE,KAAA,CAAA,aAAA,CAAA,QAAA,EAAA,aAAA,CAAA,cAAA,CAAA,EAAA,EAAa,KAAb,CAAA,EAAA,EAAoB,MAAM,CAAG,EAAA,QAAA,EAAU,IAAM,EAAA,KAAA,EAAO,eAAiB,EAAA,SAAA,EAAW,EAAG,CAAA,MAAA,CAAO,eAAe,CAAG,EAAA,CAAA,CAAA,EAE9G,YACC,oBAAA,KAAA,CAAA,aAAA,CAAC,UAAO,OAAS,EAAA,OAAA,EAAS,OAAQ,EAAA,WAAA,EAAA,EAC/B,iBACH,CAEJ,CAAA,CAAA;AAEJ;;;;"}